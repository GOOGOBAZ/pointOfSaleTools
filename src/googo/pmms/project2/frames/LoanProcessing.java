package googo.pmms.project2.frames;
import googo.pmms.project2.accountsHelper.BatchRefNumber;
import googo.pmms.project2.accountsHelper.Formartter;
import googo.pmms.project2.accountsHelper.PostingFieldValues;
import googo.pmms.project2.accountsHelper.PostingMain;
import googo.pmms.project2.loanHelper.MaxmumAmountBorrowedFormulas;
import googo.pmms.project2.frameHelper.MyComboBoxModel;
import googo.pmms.project2.frameHelper.MyTableModel;
import googo.pmms.project2.databases.DatabaseQuaries;
import googo.pmms.project2.databases.AccountNumberCreationDataBase;
import googo.pmms.project2.databases.loanDatabaseQuaries;
import googo.pmms.project2.accountsHelper.fileInputOutPutStreams;
import googo.pmms.project2.databaseConnectors.JdbcConnector;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Stanchart
 */
public class LoanProcessing extends javax.swing.JFrame implements BatchRefNumber,MouseListener,PostingFieldValues {
    DecimalFormat NumberFormat =new DecimalFormat("#,###.##");
    
    fileInputOutPutStreams fios= new fileInputOutPutStreams();
    Formartter ffm= new Formartter();
    Date Trndate,valuedate;
   ArrayList<String> data4, column1;
 ArrayList<ArrayList<String>> data5;
          JOptionPane p;
     MyTableModel model;
    Date date;
  SimpleDateFormat df;
  String text,position;
  int realMonth, otherMonth;
   String dates, dates2,getFieldValue,actualFieldValue,  jTFuserId1mt,today,thistime,today1,newDate1,jTFuserId1mt1,newDate11,today2;
   Integer Value,Value1;
   double newbalance,ledgerBalance,creditamount;
    GregorianCalendar cal = new GregorianCalendar(); 
         
     JdbcConnector csx = new JdbcConnector(fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "AccountDBDetails.txt"))); ; 

    loanDatabaseQuaries loan=new loanDatabaseQuaries();
    Formartter form= new Formartter();
    AccountNumberCreationDataBase ancdb=new AccountNumberCreationDataBase();
    List debit,credit;
     MyComboBoxModel modelcombo;
    JFrame fi, f,fa,fb,fc;
   Formartter dateformater = new Formartter();
 DatabaseQuaries dbq= new DatabaseQuaries();
 MaxmumAmountBorrowedFormulas maxValue= new MaxmumAmountBorrowedFormulas();
 MaxmumAmountBorrowedFormulas operator = new MaxmumAmountBorrowedFormulas();
  PostingMain post= new PostingMain(LoanProcessing.this);
     String userId;
         String batchNumber;
    public LoanProcessing(String userid) {
        this.userId=userid;
        initComponents();
          java.awt.Image img = new ImageIcon(System.getProperty("user.dir")+"/"+"ICON_LOGO.jpg").getImage();
      this.setIconImage(img);
      this.setTitle("LOAN PROCESSING WINDOW-"+dbq.title(userId));
        jTreeNewLoanApplication.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
       jTreeNewLoanApplication.addMouseListener( this);
    }
//public void setUserID(String userid){
//this.userId=userid;
//}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeNewLoanApplication = new javax.swing.JTree();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jComboBox2 = new javax.swing.JComboBox();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel2.setLayout(null);

        jCheckBox1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(0, 0, 153));
        jCheckBox1.setText("Manually Process The Loan");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox1);
        jCheckBox1.setBounds(550, 300, 360, 30);
        jCheckBox1.setEnabled(false);
        jCheckBox1.setSelected(false);

        jCheckBox2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(0, 0, 153));
        jCheckBox2.setText("Automatically Process The Loan");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox2);
        jCheckBox2.setBounds(190, 300, 340, 30);

        jComboBox1.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 153, 153));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox1);
        jComboBox1.setBounds(390, 340, 140, 30);
        jComboBox1.setSelectedItem("");

        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 153));
        jButton1.setText("Process Loan Request");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(280, 440, 230, 30);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("Loan Insurance Amount");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(550, 260, 180, 30);
        jLabel2.setVisible(false);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setForeground(java.awt.SystemColor.controlLtHighlight);
        jLabel1.setText("LOAN PROCESSING ");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jLabel1);
        jLabel1.setBounds(180, 0, 730, 40);

        jTreeNewLoanApplication.setBackground(java.awt.SystemColor.activeCaption);
        jTreeNewLoanApplication.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.SystemColor.activeCaption, null));
        jTreeNewLoanApplication.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTreeNewLoanApplication.setForeground(new java.awt.Color(255, 255, 255));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Navigation Guide");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Log Out");
        treeNode1.add(treeNode2);
        jTreeNewLoanApplication.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTreeNewLoanApplication);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 180, 610);

        jCheckBox4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox4.setForeground(new java.awt.Color(0, 0, 204));
        jCheckBox4.setText("Manually Recover Loan Charges");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox4);
        jCheckBox4.setBounds(550, 60, 360, 30);
        jCheckBox4.setEnabled(false);

        jCheckBox5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox5.setForeground(new java.awt.Color(0, 0, 153));
        jCheckBox5.setText("Automatically Recover Loan Charges");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox5);
        jCheckBox5.setBounds(190, 60, 340, 30);
        jCheckBox5.setEnabled(false);

        jComboBox2.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(0, 0, 204));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox2);
        jComboBox2.setBounds(390, 220, 140, 30);
        jComboBox2.setSelectedItem("");
        jComboBox2.setVisible(false);

        jFormattedTextField1.setForeground(new java.awt.Color(0, 153, 153));
        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###"))));
        jFormattedTextField1.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jPanel2.add(jFormattedTextField1);
        jFormattedTextField1.setBounds(730, 260, 180, 30);
        jFormattedTextField1.setVisible(false);
        jFormattedTextField1.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("Insurance Account Number");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(190, 220, 200, 30);
        jLabel3.setVisible(false);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Loan Disbursement Account");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(190, 340, 200, 30);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 153));
        jLabel5.setText("Charges Account Number");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(190, 100, 200, 30);
        jLabel5.setVisible(false);
        jLabel5.setEnabled(false);

        jComboBox3.setForeground(new java.awt.Color(0, 153, 153));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox3);
        jComboBox3.setBounds(390, 100, 140, 30);
        jComboBox3.setSelectedItem("");
        jComboBox3 .setVisible(false);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("Insurance Acount Name");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(550, 220, 180, 30);
        jLabel6 .setVisible(false);

        jFormattedTextField2.setForeground(new java.awt.Color(0, 0, 204));
        jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###"))));
        jPanel2.add(jFormattedTextField2);
        jFormattedTextField2.setBounds(730, 140, 180, 30);
        jFormattedTextField2.setVisible(false);
        jFormattedTextField2.setEnabled(false);

        jCheckBox6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox6.setForeground(new java.awt.Color(0, 153, 153));
        jCheckBox6.setText("Automatically Recover Loan Insurance");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox6);
        jCheckBox6.setBounds(190, 180, 340, 30);
        jCheckBox6.setEnabled(false);

        jCheckBox7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox7.setForeground(new java.awt.Color(0, 153, 153));
        jCheckBox7.setText("Manually Recover Loan Insurance");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox7);
        jCheckBox7.setBounds(550, 180, 360, 30);
        jCheckBox7.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 204));
        jLabel7.setText("Loan Charges Amount");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(550, 140, 170, 30);
        jLabel7.setVisible(false);

        jTextField1.setForeground(new java.awt.Color(0, 153, 153));
        jPanel2.add(jTextField1);
        jTextField1.setBounds(730, 100, 180, 30);
        jTextField1.setVisible(false);
        jTextField1.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 153));
        jLabel8.setText("Disburse Account Name");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(550, 340, 190, 30);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 153));
        jLabel9.setText("Charges Account Name");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(550, 100, 190, 30);
        jLabel9 .setVisible(false);
        jLabel9.setEnabled(false);

        jTextField2.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(0, 0, 204));
        jPanel2.add(jTextField2);
        jTextField2.setBounds(730, 220, 180, 30);
        jTextField2.setVisible(false);
        jTextField2.setEnabled(false);

        jTextField3.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(0, 153, 153));
        jPanel2.add(jTextField3);
        jTextField3.setBounds(730, 340, 180, 30);
        jTextField3.setText("");

        jButton2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 153));
        jButton2.setText("Refresh Loan Request");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);
        jButton2.setBounds(510, 440, 230, 30);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 0, 920, 610);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 setBatchNumber();
        if(!jCheckBox2.isSelected()){

        JOptionPane.showMessageDialog(this, "Please select the automatic loan repayment first");

        return;
        }else{ 

        String accountg=fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")); 


        if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==15){

        if(jComboBox3.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Charege's Account Number");return;}
        else if(jFormattedTextField2.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the charges Amount");return;}

        else if(jTextField1.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID CHARGES ACCOUNT NAME"); return;}
        else if(jComboBox2.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Insurance's Account Number");return;}
        else if(jFormattedTextField1.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the insuarance Amount");return;}
        else if(jTextField2.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID INSURANCE ACCOUNT NAME");return; }
        else if(jComboBox1.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Disbursement Account Number");return;}

        else if(jTextField3.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID DISBURSEMENT ACCOUNT NAME");return;}
        else{

        //    boolean d1=true, d2=true,d3=true, d4=true,d5=true, d6=true;

        ArrayList debitq = new ArrayList();
        debitq .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitq .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitq .add(2, "Loan charges"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"loan.");
        debitq .add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitq .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitq .add(5, jFormattedTextField2.getValue().toString());
        debitq .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        debitq .add(7, jTextField1.getText());
        debitq .add(8, "asms0001");
        debitq .add(9, this.getBatchNumber());
        debitq .add(10, "00025");
        debitq .add(11,  dbq.getTransactionSequenceNumber()+"");

        //         d1 = dbq.debit(debit);
        //      
        //       
        //       if(d1==false){
        //           
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully debited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Charges");
        //        
        //         
        //        }

        ArrayList creditq = new ArrayList();
        creditq.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        creditq.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditq.add(2, "Loan charges"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"  "+"loan.");
        creditq.add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditq.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditq.add(5, jFormattedTextField2.getValue().toString());
        creditq.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditq.add(7, jTextField3.getText());
        creditq.add(8, "asms0001");
        creditq.add(9, this.getBatchNumber());
        creditq.add(10,  "00025");
        creditq.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d2 = dbq.credit(credit);
        //        if(d2==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully credited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Charges");
        //        
        //        }
        
         SwingWorker<Void,Void>genCharges=new SwingWorker(){
      
            @Override
            protected Object doInBackground() throws Exception {
                post.generalPosting(debitq, creditq);
                return null;
            }
        
        
        };
        
      genCharges.execute();
        JOptionPane.showMessageDialog(this,"Loan Charges were successfully processed");

     
        ArrayList debiti = new ArrayList();
        debiti .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debiti .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debiti .add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"loan.");
        debiti .add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debiti .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debiti .add(5, jFormattedTextField1.getValue().toString());
        debiti .add(6,  dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        debiti .add(7, jTextField2.getText());
        debiti .add(8, "asms0001" );
        debiti .add(9, this.getBatchNumber());
        debiti .add(10, "00025");
        debiti .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d3= dbq.debit(debit);
        //         if(d3==false){
        //         JOptionPane.showMessageDialog(this,"Loan Insurance was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Insurance");        
        //         }
        //         

        ArrayList  crediti = new ArrayList();
        crediti.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        crediti.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        crediti.add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        crediti.add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        crediti.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        crediti.add(5, jFormattedTextField1.getValue().toString());
        crediti.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        crediti.add(7, jTextField3.getText());
        crediti.add(8, "asms0001");
        crediti.add(9, this.getBatchNumber());
        crediti.add(10, "00025");
        crediti.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d4 = dbq.credit(credit);
        //      
        //      if(d4==false){
        //         JOptionPane.showMessageDialog(this,"Loan Insurance was successfully credited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Insurance");        
        //         }
    
            
       SwingWorker<Void,Void>genInsureance=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
               post.generalPosting(debiti, crediti);
                return null;
            } };
      genInsureance.execute();
      
        JOptionPane.showMessageDialog(this,"Loan Insurance was successfully processed");

        
        String creditAmount="0.0";

        if(fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))==77){
            
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"),"7");
        if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
         JOptionPane.showMessageDialog(this, "The amount disbursed is not enough to cover all the charges and the borrower's account has been over drawn.\n Please reverse the charges or otherwise adjust accordingly");
        }
            
            creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))), operator.add(parseDouble(jFormattedTextField2.getValue().toString()), parseDouble(jFormattedTextField1.getValue().toString()))))+"";
       
        }else{

        creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1]), operator.add(parseDouble(jFormattedTextField2.getValue().toString()), parseDouble(jFormattedTextField1.getValue().toString()))))+"";

        }

        ArrayList debitl = new ArrayList();
        debitl .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitl .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitl .add(2, "Loan disbursed"+"  "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debitl .add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitl .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitl .add(5, creditAmount);
        debitl .add(6, dateformater.putSeparatorsOnNormaAccount( fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        debitl .add(7, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debitl .add(8, "asms0001");
        debitl .add(9, this.getBatchNumber());
        debitl .add(10, "00025");
        debitl .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d5 = dbq.debit(debit);
        //         if(d5==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit the Loan ");        
        //         }



        ArrayList creditl = new ArrayList();
        creditl.add(0, dateformater.putSeparatorsOnNormaAccount(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        creditl.add(1,  dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditl.add(2, "Loan disbursed to you");
        creditl.add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditl.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditl.add(5, creditAmount);
        creditl.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditl.add(7, jTextField3.getText());
        creditl.add(8, "asms0001");
        creditl.add(9, this.getBatchNumber());
        creditl.add(10, "00025");
        creditl.add(11, dbq.getTransactionSequenceNumber()+"");
        
        //      d6 = dbq.credit(credit);
        //        
        // if(d6==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to disburse the Loan ");        
        //         }        
        
                
                SwingWorker<Void,Void>genLoan=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
            post.loanDisbursement(debitl, creditl);
                return null;
            } };
      genLoan.execute();  
                
        JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
 String loandetails =fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"));       
        List loanDetails= new ArrayList();
       loanDetails.add(loandetails.split("[,]", 16)[1]);//Princimpal amount
         loanDetails.add(loandetails.split("[,]", 16)[2]);//interest amount
  loanDetails.add(loandetails.split("[,]", 16)[4]);//instalment start date
  loanDetails.add(loandetails.split("[,]", 16)[5]);//instalment start date
    loanDetails.add(loandetails.split("[,]", 16)[0]);//instalment start date
   loanDetails.add("Disbursed");//loan cycle status
    loanDetails.add(dbq.AccountName(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))));//loan cycle status
    loanDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")));//loan cycle status
     SwingWorker<Void,Void>updateLoanReportATable=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
             loan.updateLoanReportATable(loanDetails); 
                return null;
            } };
      updateLoanReportATable.execute(); 
   
       

        }

        Integer xxy=5;

        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "amortizeStatus"+accountg+ ".txt"), xxy.toString());
        fios.forceFileExistanceAppend(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"));
        Integer xl=0;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"),xl.toString());
//        fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " ")+"jjjjjj");

        loan.updateLoanStoreAll(userId, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),"Disbursed","newloan"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " "));
        LoanManagmentWindow f = new LoanManagmentWindow(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  



        }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==1){

        if(jComboBox3.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Insurance's Account Number");return;}
        else if(jFormattedTextField2.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the insuarance Amount");return;}
        else if(jTextField1.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID INSURANCE ACCOUNT NAME");return; }
        else if(jComboBox1.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Disbursement Account Number");return;}

        else if(jTextField3.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID DISBURSEMENT ACCOUNT NAME");return;}
        else{

        //    boolean d3=true, d4=true;


        ArrayList  debith = new ArrayList();
        debith .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debith .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debith .add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"loan.");
        debith .add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debith .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debith .add(5, jFormattedTextField2.getValue().toString());
        debith .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        debith .add(7, jTextField1.getText());
        debith .add(8, "asms0001");
        debith .add(9, this.getBatchNumber());
        debith .add(10, "00025");
        debith .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d3 = dbq.debit(debit);
        //         if(d3==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Loan Charges");        
        //         }


        ArrayList credith = new ArrayList();
        credith.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        credith.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credith.add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        credith.add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credith.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credith.add(5, jFormattedTextField2.getValue().toString());
        credith.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        credith.add(7, jTextField3.getText());
        credith.add(8, "asms0001");
        credith.add(9, this.getBatchNumber());
        credith.add(10, "00025");
        credith.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d4= dbq.credit(credit);
        //      if(d4==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges  was successfully credited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Charges ");        
        //         }

        
                
                  SwingWorker<Void,Void>genLoanD=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
            post.loanDisbursement(debith, credith);
                return null;
            } };
      genLoanD.execute(); 
      
        JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        String loandetails =fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"));       
        List loanDetails= new ArrayList();
       loanDetails.add(loandetails.split("[,]", 16)[1]);//Princimpal amount
         loanDetails.add(loandetails.split("[,]", 16)[2]);//interest amount
  loanDetails.add(loandetails.split("[,]", 16)[4]);//instalment start date
  loanDetails.add(loandetails.split("[,]", 16)[5]);//instalment start date
    loanDetails.add(loandetails.split("[,]", 16)[0]);//instalment start date
   loanDetails.add("Disbursed");//loan cycle status
    loanDetails.add(dbq.AccountName(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))));//loan cycle status
    loanDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")));//loan cycle status
 

           SwingWorker<Void,Void>updateLoanReportATable=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
             loan.updateLoanReportATable(loanDetails); 
                return null;
            } };
      updateLoanReportATable.execute(); 



        }
        Double D =(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1]), parseDouble(jFormattedTextField2.getValue().toString()+".0")));

        String creditAmount =D.intValue()+"";
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusAmount"+accountg+".txt"),creditAmount);
        Integer xl=46;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusPostion"+accountg+".txt"),xl.toString());

        LoanManagmentWindow f = new  LoanManagmentWindow (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  




        }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==1){



        if(jComboBox3.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Charege's Account Number");return;}
        else if(jFormattedTextField2.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the charges Amount");return;}

        else if(jTextField1.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID CHARGES ACCOUNT NAME"); return;}
        else if(jComboBox2.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Insurance's Account Number");return;}
        else if(jFormattedTextField1.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the insuarance Amount");return;}
        else if(jTextField2.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID INSURANCE ACCOUNT NAME");return; }

        else{

        //    boolean d1=true, d2=true,d3=true, d4=true;



        ArrayList  debitm = new ArrayList();
        debitm .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitm .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitm .add(2, "Loan charges"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"loan.");
        debitm .add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitm .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitm .add(5, jFormattedTextField2.getValue().toString());
        debitm .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        debitm .add(7,  jTextField1.getText());
        debitm .add(8, "asms0001");
        debitm .add(9, this.getBatchNumber());
        debitm .add(10, "00025");
        debitm .add(11, dbq.getTransactionSequenceNumber()+"");
        //              
        //         d1= dbq.debit(debit);
        //       
        //       if(d1==false){
        //           
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully debited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Charges");
        //        
        //         
        //        }


        ArrayList     creditm = new ArrayList();
        creditm.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        creditm.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditm.add(2, "Loan charges"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"  "+"loan.");
        creditm.add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditm.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditm.add(5, jFormattedTextField2.getValue().toString());
        creditm.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditm.add(7, jTextField3.getText());
        creditm.add(8, "asms0001");
        creditm.add(9, this.getBatchNumber());
        creditm.add(10, "00025");
        creditm.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d2 = dbq.credit(credit);
        //        if(d2==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully credited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Charges");
        //        
        //        }
      
            
              SwingWorker<Void,Void>genCharges=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
           post.generalPosting(debitm, creditm);
                return null;
            } };
      genCharges.execute(); 
        JOptionPane.showMessageDialog(this,"Loan Charges were successfully processed");

        
        ArrayList debito = new ArrayList();
        debito .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debito .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debito .add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"loan.");
        debito .add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debito .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debito .add(5, jFormattedTextField1.getValue().toString());
        debito .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        debito .add(7, jTextField2.getText());
        debito .add(8, "asms0001");
        debito .add(9, this.getBatchNumber());
        debito .add(10, "00025");
        debito .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d3 = dbq.debit(debit);
        //         if(d3==false){
        //         JOptionPane.showMessageDialog(this,"Loan Insurance was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Insurance");        
        //         }

        ArrayList  credito = new ArrayList();
        credito.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        credito.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credito.add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        credito.add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credito.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credito.add(5, jFormattedTextField1.getValue().toString());
        credito.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        credito.add(7, jTextField3.getText());
        credito.add(8, "asms0001");
        credito.add(9, this.getBatchNumber());
        credito.add(10, "00025");
        credito.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d4 = dbq.credit(credit);
        //      
        //      if(d4==false){
        //         JOptionPane.showMessageDialog(this,"Loan Insurance was successfully credited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Insurance");        
        //         }

       
                
                 SwingWorker<Void,Void>genInsurance=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
            post.generalPosting(debito, credito);
                return null;
            } };
      genInsurance.execute(); 
                
        JOptionPane.showMessageDialog(this,"Loan Insurance was successfully processed");

       

        }

        String creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1]), operator.add(parseDouble(jFormattedTextField2.getValue().toString()), parseDouble(jFormattedTextField1.getValue().toString()))))+"";
        Double D= parseDouble(creditAmount);
        Integer s=D.intValue();
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusAmount"+accountg+".txt"),s.toString());
        Integer xl=46;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusPostion"+accountg+".txt"),xl.toString());

        LoanManagmentWindow f = new  LoanManagmentWindow (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  



        }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==1){

        if(jComboBox3.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Charege's Account Number");return;}

        else if(jFormattedTextField2.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the charges Amount");return;}

        else if(jTextField1.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID CHARGES ACCOUNT NAME"); return;}
        else if(jComboBox1.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Disbursement Account Number");return;}

        else if(jTextField3.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID DISBURSEMENT ACCOUNT NAME");return;}
        else{

        //    boolean d1=true, d2=true;


        ArrayList debitt = new ArrayList();
        debitt .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitt .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitt .add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        debitt .add(3, "Charged on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitt .add(4,  dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitt .add(5, jFormattedTextField2.getValue().toString());
        debitt .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        debitt .add(7, jTextField1.getText());
        debitt .add(8, "asms0001");
        debitt .add(9, this.getBatchNumber());
        debitt .add(10, "00025");
        debitt .add(11, dbq.getTransactionSequenceNumber()+"");
        //              
        //         d1 = dbq.debit(debit);
        //       
        //       if(d1==false){
        //           
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully debited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Charges");
        //        
        //         
        //        }

        ArrayList  creditt = new ArrayList();
        creditt.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        creditt.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditt.add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        creditt.add(3, "Charged on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditt.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditt.add(5, jFormattedTextField2.getValue().toString());
        creditt.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditt.add(7, jTextField3.getText());
        creditt.add(8, "asms0001");
        creditt.add(9, this.getBatchNumber());
        creditt.add(10, "00025");
        creditt.add(11,  dbq.getTransactionSequenceNumber()+"");
        //      d2 = dbq.credit(credit);
        //        if(d2==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully credited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Charges");
        //        
        //        }
        
            
                 SwingWorker<Void,Void>genInsurance=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
           post.generalPosting(debitt, creditt);
                return null;
            } };
      genInsurance.execute(); 
      
        JOptionPane.showMessageDialog(this,"Loan Insurance was successfully processed");

        
        }


        String creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1]), operator.add(parseDouble(jFormattedTextField2.getValue().toString()), parseDouble(jFormattedTextField2.getValue().toString()))))+"";


        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusAmount"+accountg+".txt"),creditAmount);
        Integer xl=46;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusPostion"+accountg+".txt"),xl.toString());

        LoanManagmentWindow f = new  LoanManagmentWindow (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  




        } if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==15){

        if(jComboBox2.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Insurance's Account Number");return;}
        else if(jFormattedTextField1.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the insuarance Amount");return;}
        else if(jTextField2.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID INSURANCE ACCOUNT NAME");return;}

        else if(jComboBox1.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Disbursement Account Number");return;}

        else if(jTextField3.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID DISBURSEMENT ACCOUNT NAME");return;}
        else{
        //         
        //    boolean d1=true, d2=true,d5=true, d6=true;


        ArrayList    debitk = new ArrayList();
        debitk .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitk .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitk .add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        debitk .add(3, "Charged on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitk .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitk .add(5, jFormattedTextField1.getValue().toString());
        debitk .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        debitk .add(7, jTextField2.getText());
        debitk .add(8, "asms0001" );
        debitk .add(9, this.getBatchNumber());
        debitk .add(10,  "00025");
        debitk .add(11, dbq.getTransactionSequenceNumber()+"");
        //              
        //         d1 = dbq.debit(debit);
        //       
        //       if(d1==false){
        //           
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully debited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Charges");
        //        
        //         
        //        }

        ArrayList   creditk = new ArrayList();
        creditk.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox2.getSelectedItem().toString()));
        creditk.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditk.add(2, "Loan insurance"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        creditk.add(3,  "Charged on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditk.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditk.add(5, jFormattedTextField1.getValue().toString());
        creditk.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditk.add(7, jTextField3.getText());
        creditk.add(8, "asms0001");
        creditk.add(9, this.getBatchNumber());
        creditk.add(10, "00025");
        creditk.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d2= dbq.credit(credit);
        //        if(d2==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully credited");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Charges");
        //        
        //        }
      
                   SwingWorker<Void,Void>genInsurancef=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
            post.generalPosting(debitk, creditk);
                return null;
            } };
      genInsurancef.execute(); 
        JOptionPane.showMessageDialog(this,"Loan Insurance was successfully processed");

           
        String creditAmount="0.0";

        if(fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))==77){

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"),"7");
//if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
       
  if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
         JOptionPane.showMessageDialog(this, "The amount disbursed is not enough to cover all the charges and the borrower's account has been over drawn.\n Please reverse the charges or otherwise adjust accordingly");
        }


creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))),  parseDouble(jFormattedTextField1.getValue().toString())))+"";

        }else{



        creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1]), parseDouble(jFormattedTextField1.getValue().toString())))+"";
        }




        ArrayList debitj = new ArrayList();
        debitj .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitj .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitj .add(2, "Loan disbursed"+"  "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debitj .add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitj .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitj .add(5, creditAmount);
        debitj .add(6, dateformater.putSeparatorsOnNormaAccount( fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        debitj .add(7, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debitj .add(8, "asms0001");
        debitj .add(9, this.getBatchNumber());
        debitj .add(10,  "00025");
        debitj .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d5 = dbq.debit(debit);
        //         if(d5==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit the Loan ");        
        //         }

        ArrayList  creditj = new ArrayList();
        creditj.add(0, dateformater.putSeparatorsOnNormaAccount(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        creditj.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditj.add(2, "Loan disbursed to you");
        creditj.add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditj.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditj.add(5, creditAmount);
        creditj.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditj.add(7, jTextField3.getText());
        creditj.add(8, "asms0001");
        creditj.add(9, this.getBatchNumber());
        creditj.add(10, "00025");
        creditj.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d6 = dbq.credit(credit);
        // if(d6==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to disburse the Loan ");        
        //         }     
       
                  SwingWorker<Void,Void>genLoanDis=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
             post.loanDisbursement(debitj, creditj);
                return null;
            } };
      genLoanDis.execute();
      
        JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        String loandetails =fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"));       
        List loanDetails= new ArrayList();
       loanDetails.add(loandetails.split("[,]", 16)[1]);//Princimpal amount
         loanDetails.add(loandetails.split("[,]", 16)[2]);//interest amount
  loanDetails.add(loandetails.split("[,]", 16)[4]);//instalment start date
  loanDetails.add(loandetails.split("[,]", 16)[5]);//instalment start date
    loanDetails.add(loandetails.split("[,]", 16)[0]);//instalment start date
   loanDetails.add("Disbursed");//loan cycle status
    loanDetails.add(dbq.AccountName(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))));//loan cycle status
    loanDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")));//loan cycle status
 
    
      SwingWorker<Void,Void>updateLoanReportATable=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
          loan.updateLoanReportATable(loanDetails); 
                return null;
            } };
      updateLoanReportATable.execute();
    
 

       


        }

        Integer xxy=5;

        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "amortizeStatus"+accountg+ ".txt"), xxy.toString());
        fios.forceFileExistanceAppend(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"));
        Integer xl=0;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"),xl.toString());
        JOptionPane.showMessageDialog(this, "Remember to recover Insurance directly from this borrower's account");
//   fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " ")+"jjjjjj");
          
   loan.updateLoanStoreAll(userId, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),"Disbursed","newloan"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " "));

        LoanManagmentWindow f = new  LoanManagmentWindow (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  


        }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==15){
        if(jComboBox1.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Disbursement Account Number");return;}

        else if(jTextField3.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID DISBURSEMENT ACCOUNT NAME");return;}
        else{

        //    boolean d5=true, d6=true;
        String creditAmount="0.0";

        if(fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))==77){

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"),"7");
//if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
         if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
         JOptionPane.showMessageDialog(this, "The amount disbursed is not enough to cover all the charges and the borrower's account has been over drawn.\n Please reverse the charges or otherwise adjust accordingly");
        }

creditAmount=fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"));
//}
        }else{

        creditAmount=fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1];


        }




        ArrayList debits = new ArrayList();
        debits .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debits .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debits .add(2, "Loan disbursed"+"  "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debits .add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debits .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debits .add(5, creditAmount);
        debits .add(6, dateformater.putSeparatorsOnNormaAccount( fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        debits .add(7, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debits .add(8, "asms0001" );
        debits .add(9, this.getBatchNumber());
        debits .add(10, "00025");
        debits .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d5 = dbq.debit(debit);
        //         
        //         if(d5==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit the Loan ");        
        //         }


        ArrayList    credits = new ArrayList();
        credits.add(0, dateformater.putSeparatorsOnNormaAccount(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        credits.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credits.add(2, "Loan disbursed to you");
        credits.add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credits.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        credits.add(5, creditAmount);
        credits.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        credits.add(7, jTextField3.getText());
        credits.add(8,  "asms0001");
        credits.add(9, this.getBatchNumber());
        credits.add(10, "00025");
        credits.add(11, dbq.getTransactionSequenceNumber()+"");
        //      d6 = dbq.credit(credit);
        // if(d6==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to disburse the Loan ");        
        //         }        

       
                
              SwingWorker<Void,Void>genLoanDo=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
         post.loanDisbursement(debits, credits); 
                return null;
            } };
      genLoanDo.execute();
        JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
String loandetails =fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"));       
        List loanDetails= new ArrayList();
       loanDetails.add(loandetails.split("[,]", 16)[1]);//Princimpal amount
         loanDetails.add(loandetails.split("[,]", 16)[2]);//interest amount
  loanDetails.add(loandetails.split("[,]", 16)[4]);//instalment start date
  loanDetails.add(loandetails.split("[,]", 16)[5]);//instalment start date
    loanDetails.add(loandetails.split("[,]", 16)[0]);//instalment start date
   loanDetails.add("Disbursed");//loan cycle status
    loanDetails.add(dbq.AccountName(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))));//loan cycle status
    loanDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")));//loan cycle status

       
     SwingWorker<Void,Void>updateLoanReportATable=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
         loan.updateLoanReportATable(loanDetails); 
                return null;
            } };
      updateLoanReportATable.execute();

        }

        Integer xxy=5;

        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "amortizeStatus"+accountg+ ".txt"), xxy.toString());
        fios.forceFileExistanceAppend(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"));
        Integer xl=0;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"),xl.toString());
        JOptionPane.showMessageDialog(this, "Please remember to deduct both insurance and loan charges from this borrower's account");
//   fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " ")+"jjjjjj");
         loan.updateLoanStoreAll(userId, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),"Disbursed","newloan"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " "));
        LoanManagmentWindow f = new  LoanManagmentWindow (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  



        }  if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==15&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==15){



        if(jComboBox3.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Charege's Account Number");return;}

        else if(jFormattedTextField2.getValue()==null){JOptionPane.showMessageDialog(this, "Please input the charges Amount");return;}

        else if(jTextField1.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID CHARGES ACCOUNT NAME"); return;}
        else if(jComboBox1.getSelectedItem().toString().equals("")){JOptionPane.showMessageDialog(this, "Please select the Disbursement Account Number");return;}

        else if(jTextField3.getText().equals("")){JOptionPane.showMessageDialog(this, "INVALID DISBURSEMENT ACCOUNT NAME");return;}
        else{

        //         boolean d3=true, d4=true,d5=true, d6=true;





        ArrayList  debitu = new ArrayList();
        debitu .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitu .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitu .add(2, "Loan chrges"+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+" "+"loan.");
        debitu .add(3, "Charged on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitu .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitu .add(5, jFormattedTextField2.getValue().toString());
        debitu .add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        debitu .add(7, jTextField1.getText());
        debitu .add(8, "asms0001");
        debitu .add(9, this.getBatchNumber());
        debitu .add(10, "00025");
        debitu .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d3 = dbq.debit(debit);
        //         if(d3==false){
        //         JOptionPane.showMessageDialog(this,"Loan Charges were successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit Loan Charges");        
        //         }

        ArrayList   creditu = new ArrayList();
        creditu.add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox3.getSelectedItem().toString()));
        creditu.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditu.add(2, "Loan chrges "+" "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]+"'s"+"  "+"loan.");
        creditu.add(3, "Charged on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditu.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditu.add(5, jFormattedTextField2.getValue().toString());
        creditu.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditu.add(7, jTextField1.getText());
        creditu.add(8,  "asms0001");
        creditu.add(9, this.getBatchNumber());
        creditu.add(10, "00025");
        creditu.add(11, dbq.getTransactionSequenceNumber()+"");
        //     d4= dbq.credit(credit);
        //    
        //    if(d4==false){
        //         JOptionPane.showMessageDialog(this,"Loan Chargese was successfully credited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to credit Loan Charges");        
        //         }
    
                      
              SwingWorker<Void,Void>loanCharges=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
             post.generalPosting(debitu, creditu); 
                return null;
            } };
      loanCharges.execute();
        JOptionPane.showMessageDialog(this,"Loan Charges was successfully processed");

               

        String creditAmount="0.0";

        if(fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))==77){

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "topUpOn"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"),"7");
//if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
       
  if(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")))>0.0){
         JOptionPane.showMessageDialog(this, "The amount disbursed is not enough to cover all the charges and the borrower's account has been over drawn.\n Please reverse the charges or otherwise adjust accordingly");
        }

creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "takeHomeTopUp"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"))),  parseDouble(jFormattedTextField2.getValue().toString())))+"";
//}
        }else{


        creditAmount=(operator.subtract(parseDouble(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1]), parseDouble(jFormattedTextField2.getValue().toString())))+"";

        } 



        ArrayList    debitb = new ArrayList();
        debitb .add(0, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        debitb .add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitb .add(2, "Loan disbursed"+"  "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debitb .add(3, "Disbursed on"+"  "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitb .add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        debitb .add(5, creditAmount);
        debitb .add(6, dateformater.putSeparatorsOnNormaAccount( fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        debitb .add(7, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
        debitb .add(8, "asms0001");
        debitb .add(9, this.getBatchNumber());
        debitb .add(10,"00025");
        debitb .add(11, dbq.getTransactionSequenceNumber()+"");

        //         d5 = dbq.debit(debit);
        //         if(d5==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully debited!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to debit the Loan ");        
        //         }

        ArrayList   creditb = new ArrayList();
        creditb.add(0, dateformater.putSeparatorsOnNormaAccount(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[11]));
        creditb.add(1, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditb.add(2, "Loan disbursed to you");
        creditb.add(3, "Disbursed on"+" "+dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditb.add(4, dateformater.dateConverterForNormalDate(System.currentTimeMillis()));
        creditb.add(5, creditAmount);
        creditb.add(6, dateformater.putSeparatorsOnNormaAccount(jComboBox1.getSelectedItem().toString()));
        creditb.add(7, jTextField3.getText());
        creditb.add(8, "asms0001");
        creditb.add(9, this.getBatchNumber());
        creditb.add(10, "00025");
        creditb.add(11, dbq.getTransactionSequenceNumber()+"");
        //       d6= dbq.credit(credit);
        //             if(d6==false){
        //         JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        //        } else{
        //         JOptionPane.showMessageDialog(this,"Failed to disburse the Loan ");        
        //         }  

       
                         
              SwingWorker<Void,Void>loanDisib=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
            post.loanDisbursement(debitb, creditb); 
                return null;
            } };
      loanDisib.execute();
        JOptionPane.showMessageDialog(this,"The Loan  was successfully disbursed!!");
        String loandetails =fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt"));       
        List loanDetails= new ArrayList();
        loanDetails.add(loandetails.split("[,]", 15)[1]);//Princimpal amount
        loanDetails.add(loandetails.split("[,]", 15)[2]);//interest amount
        loanDetails.add(loandetails.split("[,]", 15)[4]);//instalment start date
        loanDetails.add(loandetails.split("[,]", 15)[5]);//instalment start date
        loanDetails.add(loandetails.split("[,]", 15)[0]);//instalment start date
        loanDetails.add("Disbursed");//loan cycle status
        loanDetails.add(dbq.AccountName(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))));//loan cycle status
        loanDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")));//loan cycle status
        
         SwingWorker<Void,Void>updateLoanReportATable=new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
            loan.updateLoanReportATable(loanDetails); 
                return null;
            } };
      updateLoanReportATable.execute();
        }

        Integer xxy=5;

        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "amortizeStatus"+accountg+ ".txt"), xxy.toString());
        fios.forceFileExistanceAppend(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"));
        Integer xl=0;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"),xl.toString());
        JOptionPane.showMessageDialog(this, "Remember to recover other loan charges other than insurance from this borrower's account");
//   fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " ")+"jjjjjj");
        loan.updateLoanStoreAll(userId, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),"Disbursed","newloan"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt")),fios.stringFileReader(fios.createFileName("loanApplication", "amortValues","loanStore"+accountg+".txt")).split("[,]", 16)[14].replaceAll("[,]", " "));
        LoanManagmentWindow f = new  LoanManagmentWindow (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        //        f.setUserID(userId);
        this.dispose();  



        } else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==1){

        String creditAmount= fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[1];
        Double D=parseDouble(creditAmount);
        Integer i=D.intValue();
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusAmount"+accountg+".txt"),i.toString());
        Integer xl=46;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "disbursementStatusPostion"+accountg+".txt"),xl.toString());

        LoanManagmentWindow f = new LoanManagmentWindow(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();        

        }


        if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==15){
        jCheckBox2.setSelected(true);
        jCheckBox1.setSelected(false);
        }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==16){
        jCheckBox2.setSelected(false);
        jCheckBox1.setSelected(true); 

        } else{
        jCheckBox2.setSelected(false);
        jCheckBox1.setSelected(false);

        }
        }    

        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        
 if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==1&&fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==1){
 
 jLabel5.setVisible(false);
jComboBox3.setVisible(false);
jLabel9.setVisible(false);
jTextField1.setVisible(false);
jFormattedTextField2.setVisible(false);
jLabel3.setVisible(false);
jComboBox2.setVisible(false);
jLabel6.setVisible(false);
jTextField2.setVisible(false);
jLabel2.setVisible(false);
jFormattedTextField1.setVisible(false);

 }       
        
        
        
        
        
        if( fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==15 ){
                jCheckBox6.setSelected(true);
           jCheckBox7.setSelected(false);

           jLabel3.setVisible(true);
jComboBox2.setVisible(true);
jLabel6.setVisible(true);
jTextField2.setVisible(true);
jLabel2.setVisible(true);
jFormattedTextField1.setVisible(true);

            }
           else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"))==1){
             jCheckBox7.setSelected(true);   
           jCheckBox6.setSelected(false);   
    jLabel3.setVisible(false);
jComboBox2.setVisible(false);
jLabel6.setVisible(false);
jTextField2.setVisible(false);
jLabel2.setVisible(false);
jFormattedTextField1  .setVisible(false);    
            
            }

        
    if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==15){
      
           jCheckBox5.setSelected(true);
           jCheckBox4.setSelected(false);

           jLabel5.setVisible(true);
jComboBox3.setVisible(true);
jLabel7.setVisible(true);
jLabel9.setVisible(true);
jTextField1.setVisible(true);
jFormattedTextField2.setVisible(true);
      
    }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"))==1){
 jCheckBox5.setSelected(false);
           jCheckBox4.setSelected(true);
jLabel5.setVisible(false);
jComboBox3.setVisible(false);
jLabel7.setVisible(false);
jLabel9.setVisible(false);
jTextField1.setVisible(false);
jFormattedTextField2.setVisible(false);
    
    }
    
    
       if( fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==15){
 
    jCheckBox2.setSelected(true);
    jCheckBox1.setSelected(false);
    
          
       }else if(fios.intFileReader(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"))==1){
    jCheckBox2.setSelected(false);
     jCheckBox1.setSelected(true);
    
            }  

        
        dbq.setChargesAccount(jComboBox3);
       

        dbq.setInsurancceAccount(jComboBox2);
        data4= new ArrayList();
        int numberOfDisbursements=fios.intFileReader(fios.createFileName("persistence", "disburseAc", "numberOfDisbursements.txt"));
       switch(numberOfDisbursements){
           case 1:
               
       data4.add(0,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
                       
                    
                    modelcombo = new MyComboBoxModel(data4);
                    jComboBox1.setModel(modelcombo);
             break;   
    
       case 2:
               
       data4.add(0,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
        data4.add(1,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount2.txt")).split("[,]", 3)[1]);               
                    
                    modelcombo = new MyComboBoxModel(data4);
                    jComboBox1.setModel(modelcombo);
                   break; 
            case 3:
               
       data4.add(0,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
        data4.add(1,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount2.txt")).split("[,]", 3)[1]);               
          data4.add(2,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount3.txt")).split("[,]", 3)[1]);                          
                    modelcombo = new MyComboBoxModel(data4);
                    jComboBox1.setModel(modelcombo);
                   break; 
                case 4:
               
       data4.add(0,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
        data4.add(1,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount2.txt")).split("[,]", 3)[1]);               
          data4.add(2,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount3.txt")).split("[,]", 3)[1]);                          
            data4.add(3,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount4.txt")).split("[,]", 3)[1]);       
          modelcombo = new MyComboBoxModel(data4);
                    jComboBox1.setModel(modelcombo);
                   break; 
                     case 5:
               
       data4.add(0,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
        data4.add(1,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount2.txt")).split("[,]", 3)[1]);               
          data4.add(2,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount3.txt")).split("[,]", 3)[1]);                          
            data4.add(3,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount4.txt")).split("[,]", 3)[1]);       
       data4.add(4,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount5.txt")).split("[,]", 3)[1]);       
            modelcombo = new MyComboBoxModel(data4);
                    jComboBox1.setModel(modelcombo);
                   break; 
                          case 6:
               
       data4.add(0,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
        data4.add(1,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount2.txt")).split("[,]", 3)[1]);               
          data4.add(2,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount3.txt")).split("[,]", 3)[1]);                          
            data4.add(3,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount4.txt")).split("[,]", 3)[1]);       
       data4.add(4,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount5.txt")).split("[,]", 3)[1]);       
        data4.add(5,  fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount5.txt")).split("[,]", 3)[1]);    
       modelcombo = new MyComboBoxModel(data4);
                    jComboBox1.setModel(modelcombo);
                   break; 
    }
       
       jLabel1.setText("LOAN PROCESSING FOR "+"  "+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "loanStore"+fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"))+".txt")).split("[,]", 15)[10]);
       
       
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    int i=1;
     while(i<=5){
     
     JOptionPane.showMessageDialog(this, "SYSTEM LOG OUT ERROR!!!!!!!!!");}
    }//GEN-LAST:event_formWindowClosing

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
           jCheckBox2.setSelected(true);
       if(jCheckBox2.isSelected()==true){
     Object[] optionsSF = {"Continue",  "Cancel"};
            int nSF = JOptionPane.showOptionDialog(this,  "PMMS assumes Insurance as Current liability to the COMPANY!!!\n"+"To apply a different account treatment, consider manually recovering Insurance\n"+
                    "Do you want to  continue ?",
            "Please Note:", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSF, optionsSF[0]);
            if(nSF==JOptionPane.YES_OPTION){
            Integer z=15;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"), z.toString());
    jCheckBox2.setSelected(true);
    jCheckBox1.setSelected(false);
    jLabel4.setVisible(true);
            jComboBox1.setVisible(true);
            jLabel8.setVisible(true);
                    jTextField3.setVisible(true);
              
            }
            else if (nSF==JOptionPane.NO_OPTION){
                 jLabel4.setVisible(false);
            jComboBox1.setVisible(false);
            jLabel8.setVisible(false);
                    jTextField3.setVisible(false);
     jCheckBox2.setSelected(false);
    Integer z=1;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"), z.toString());
    jCheckBox2.setSelected(false);          
        

            }}
        
        
        
        
        
  
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
      Integer z=1;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"), z.toString());         
        
        jCheckBox5.setSelected(false);
        jCheckBox4.setSelected(true);
        jLabel5.setVisible(false);
jComboBox3.setVisible(false);
jLabel7.setVisible(false);
jLabel9.setVisible(false);
jTextField1.setVisible(false);
jFormattedTextField2.setVisible(false);
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
  jCheckBox5.setSelected(true);
        if(jCheckBox5.isSelected()==true){
     Object[] optionsSF = {"Continue",  "Cancel"};
            int nSF = JOptionPane.showOptionDialog(this,  "PMMS assumes loan charges as Revenue to the COMPANY!!!\n"+"To apply a different account treatment, consider manually recovering charges\n"+
                    "Do you want to  continue ?",
            "Please Note:", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSF, optionsSF[0]);
            if(nSF==JOptionPane.YES_OPTION){
     
        Integer z=15;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"), z.toString());        
                
           jCheckBox5.setSelected(true);
           jCheckBox4.setSelected(false);
           
           
           jLabel5.setVisible(true);
jComboBox3.setVisible(true);
jLabel7.setVisible(true);
jLabel9.setVisible(true);
jTextField1.setVisible(true);
jFormattedTextField2.setVisible(true);
           
            }
            else if (nSF==JOptionPane.NO_OPTION){ jCheckBox5.setSelected(false);
            
   
        Integer z=1;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","loanChargesMethod.txt"), z.toString());         

jLabel5.setVisible(false);
jComboBox3.setVisible(false);
jLabel7.setVisible(false);
jLabel9.setVisible(false);
jTextField1.setVisible(false);
jFormattedTextField2.setVisible(false);
           

            }
    
    }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
     jCheckBox6.setSelected(true);
        if(jCheckBox6.isSelected()==true){
     Object[] optionsSF = {"Continue",  "Cancel"};
            int nSF = JOptionPane.showOptionDialog(this,  "PMMS assumes Insurance as Non current liability to the COMPANY!!!\n"+"To apply a different account treatment, consider manually recovering Insurance\n"+
                    "Do you want to  continue ?",
            "Please Note:", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSF, optionsSF[0]);
            if(nSF==JOptionPane.YES_OPTION){
        
          Integer z=15;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"), z.toString());          
                
                
                jCheckBox6.setSelected(true);
           jCheckBox7.setSelected(false);
           
       
           jLabel3.setVisible(true);
jComboBox2.setVisible(true);
jLabel6.setVisible(true);
jTextField2.setVisible(true);
jLabel2.setVisible(true);
jFormattedTextField1.setVisible(true);


           
            }
            else if (nSF==JOptionPane.NO_OPTION){ jCheckBox6.setSelected(false);
        Integer z=1;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"), z.toString());     
     jCheckBox6.setSelected(false);   
    jLabel3.setVisible(false);
jComboBox2.setVisible(false);
jLabel6.setVisible(false);
jTextField2.setVisible(false);
jLabel2.setVisible(false);
jFormattedTextField1  .setVisible(false); 


            }}
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
  Integer z=1;
    fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","insuranceChargesMethod.txt"), z.toString());     
    jCheckBox7.setSelected(true);
    jCheckBox6.setSelected(false);   
    jLabel3.setVisible(false);
jComboBox2.setVisible(false);
jLabel6.setVisible(false);
jTextField2.setVisible(false);
jLabel2.setVisible(false);
jFormattedTextField1  .setVisible(false);    
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
   LoanProcessing h = new  LoanProcessing (userId);
     
        h.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        h.setSize(screen.getSize());
        h.pack();
//        h.setUserID(userId);
        this.dispose();  
              
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
 if(!jComboBox3.getSelectedItem().equals("")){
        dbq.getAccountName(jComboBox3.getSelectedItem().toString(), jTextField1);
      
        }    
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
     if(!jComboBox2.getSelectedItem().equals("")){
        dbq.getAccountName(jComboBox2.getSelectedItem().toString(), jTextField2);
      
        }   
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
     
        
        if(!jComboBox1.getSelectedItem().equals("")){
            
        dbq.getAccountName(jComboBox1.getSelectedItem().toString(), jTextField3);
      
        } 
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
//        jCheckBox2.setSelected(false);
//        jCheckBox1.setSelected(true);
//        Integer zc=1;
//        fios.intFileWriterReplace(fios.createFileName("loanApplication", "loanProcessing","debitCreditMethod.txt"), zc.toString());

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        String userid="10000";
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(LoanProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(LoanProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(LoanProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(LoanProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//           LoanProcessing l=     new LoanProcessing(userid).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTree jTreeNewLoanApplication;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        if (me.getClickCount()==2){

  

  
    if(me.getSource()==jTreeNewLoanApplication){
    DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTreeNewLoanApplication.getLastSelectedPathComponent();
    String window =node.toString();
    switch (window){
    
    case "Log Out":
         Integer zx=1;
      fios.forceFileExistance(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"));
     fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), zx.toString());
        Object[] optionsSGS1 = {"Continue",  "Cancel"};
        int nSGS1 = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS1, optionsSGS1[0]);
        if(nSGS1==JOptionPane.YES_OPTION){
        NewLoanApplication frm5 = new NewLoanApplication(userId);
        frm5.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        frm5.setSize(screen.getSize());
        frm5.pack();
//        frm5.setUserID(userId);
        this.dispose(); 
        }
        else if (nSGS1==JOptionPane.NO_OPTION){ this.setVisible(true);}
        break;
      }}}
    }

    @Override
    public void mousePressed(MouseEvent e) {
      
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
      
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    @Override
    public String batchCode() {
       String batch="";int theNumber=0;
            
            
    fios.forceFileExistance(fios.createFileName("postingEntry", "generalTrn", "batchNumber.txt"));   

    String Thebatch= fios.stringFileReader(fios.createFileName("postingEntry", "generalTrn", "batchNumber.txt"));
    theNumber=parseInt(Thebatch)+1;
   fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "batchNumber.txt"), theNumber+"");
   batch="BTN"+(theNumber+"");
return batch; 
    }

    @Override
    public String getTransactionSequenceNumber() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getUseId() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getLogInTime() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getTransactionDate() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getTransactionType() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getValueDate() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getChequeNumber() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getDrReferenceNumber() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getDrAccountNumber() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getDrAccountName() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getNumberOfShares() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getValueOfShares() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getDrAmount() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getDrNarrative1() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getDrNarrative2() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getCrAccountNumber() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getCrAccountName() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getCrAmount() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getCrNarrative1() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getCrNarrative2() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getCrReferenceNumber() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setTransactionSequenceNumber(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setUserId(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setLogInTime(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setTransactionDate(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setTransactionType(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValueDate(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getBatchNumber() {
        return    batchNumber;
    }

    @Override
    public void setChequeNumber(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDrReferenceNumber(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDrAccountNumber(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDrAccountName(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setNumberOfShares(int a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValueOfShares(double a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDrAmount(double a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDrNarrative1(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDrNarrative2(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCrAccountNumber(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCrAccountName(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCrAmount(double a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCrNarrative1(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCrNarrative2(String a) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCrReferenceNumber(String a) {
    
        
    }

    @Override
    public void setBatchNumber() {
       
         batchNumber=this.batchCode();
    }

  }
