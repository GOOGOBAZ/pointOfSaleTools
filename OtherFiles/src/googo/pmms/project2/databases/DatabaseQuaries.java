/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package googo.pmms.project2.databases;

import googo.pmms.project2.accountsHelper.Formartter;
import googo.pmms.project2.loanHelper.MaxmumAmountBorrowedFormulas;
import googo.pmms.project2.frameHelper.MyComboBoxModel;
import googo.pmms.project2.frameHelper.ObjectTableModel;
import googo.pmms.project2.accountsHelper.fileInputOutPutStreams;
import googo.pmms.project2.databaseConnectors.*;
import googo.pmms.project2.frameHelper.DepreciatinStoreModel;
import googo.pmms.project2.frameHelper.ListDataModel;
import googo.pmms.project2.frameHelper.ListDataModel_12;
import googo.pmms.project2.frameHelper.PureListModel;
import googo.pmms.project2.frameHelper.ReportsModel;
import googo.pmms.project2.frameHelper.ReportsModelData;
import googo.pmms.project2.frameHelper.listComboBoxModel;
import googo.pmms.project2.frameHelper.myComboBoxObject1;
import java.awt.Component;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Stanchart  
 */
public class DatabaseQuaries {
    
    List<List> masterDebitDetails,masterCreditDetails;

       MaxmumAmountBorrowedFormulas formulas= new  MaxmumAmountBorrowedFormulas();
         fileInputOutPutStreams fios= new fileInputOutPutStreams();
    GregorianCalendar cal = new GregorianCalendar(); 
   
 
    ArrayList<ArrayList<String>> data7;

    Formartter fmt = new Formartter();
    JdbcConnector quaryObj = new JdbcConnector(fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "AccountDBDetails.txt"))); 
 JdbcConnector1 loancon= new   JdbcConnector1(fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "LoanDetails.txt")));
   JdbcConnector2 otherCon= new   JdbcConnector2(fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "OtherDBDetails.txt"))); 
//   ReportsDatabase report =new ReportsDatabase();
 DatabaseMetaData metadata = null;
      ArrayList<String> data8, column1,data;
      ArrayList<ArrayList<String>> data6;
    ArrayList<Object> data4;
DecimalFormat df2 = new DecimalFormat("#");
       SimpleDateFormat sdf =new SimpleDateFormat("dd/MM/yyyy");
 DecimalFormat NumberFormat =new DecimalFormat("#,###.##");
 DecimalFormat NumberFormatS =new DecimalFormat("#.##");
 ArrayList<ArrayList<Object>> data5;
   MyComboBoxModel modelcombo,modelcombo1;
   myComboBoxObject1 modelcombon;
   ObjectTableModel  model;
   ListDataModel_12  modelxx;
   ListDataModel listData;
   ReportsModelData reportsLikeTable;
List datum;
  String userId;
  JTextField tx;
     //This function returns true if the table name exists
     //It uses the getMetaData method the Connection class to invoke a Resultset object that is used to test the existance of the table
   public void setUserID(String userid){
this.userId=userid;
}
public boolean testTable(String tableName) {
           boolean testT=true;
        try {
            
     testT= quaryObj.createConnection().getMetaData().getTables(null, null, tableName,  null).next();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
      return  testT;
     }
    
     public boolean testColumn(String tableName,String columnName) {
         boolean testC=true;
        try {
        testC=  quaryObj.createConnection().getMetaData().getColumns(null, null, tableName, columnName).next();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
       return testC;
     }
    
    
//     public double sharesReturnRate(){
//     
//         
//     
//     return ;
//     
//     }
     
     public boolean theAssetExistsInRegister(String accountNumber){
     
      int lastItem=0; boolean isThere=false;

     try {
           Connection cq=quaryObj.createConnection(); 
           
                cq.setAutoCommit(false);
                
               String query = "SELECT  COUNT(AssetAccountNumber) AS existsy FROM depreciationstore WHERE AssetAccountNumber="+accountNumber;
               
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
            while(rs.next()) {
                   
                   lastItem= rs.getInt("existsy");
                 
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
    if(lastItem>0){
    isThere=true;
    }
 
 return isThere;
     
     
     }
     
     
     public synchronized void createTheInitailLoanPayStateWrittenOff(List dts,Component c){
     
//         JOptionPane.showMessageDialog(c, "In");
//           newPaymentCame.add(MonthYearPaid.getMonth().toString());//MonthPaidFor0
//newPaymentCame.add(MonthYearPaid.getYear());//YearPaidFor1
//newPaymentCame.add(trnIdInterest.get(0));//loanTrnId2
//newPaymentCame.add("newloan"+accountNumberNow);//LoanId3
//newPaymentCame.add(debit.get(9).toString());//BatchCode4
//newPaymentCame.add("0.0");//AmountDisbursed5
//newPaymentCame.add("0.0");//Expected Interest6
//newPaymentCame.add("0.0");//Expected Total Amount7
//newPaymentCame.add(trnIdInterest.get(1));//Interest Rate 8
//newPaymentCame.add(amountPaid);//Amount Paid 9
//newPaymentCame.add("0.0");//PrincipalPaid 10
//newPaymentCame.add("0.0");//Interest Paid 11
//newPaymentCame.add("0.0");//AccumulatedInterestPaid 12
//newPaymentCame.add("0.0");//LoanPenaltyPaid 13
            
            try {
                
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps = cq.prepareStatement("INSERT INTO LoanDisburseRepayStatement VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);//TrnId
            ps.setObject(2, this.getDBCurrentDate());//TrnDate 
            ps.setObject(3, dts.get(0).toString());//MonthPaid 
            ps.setObject(4, dts.get(1).toString());//YearPaid
            ps.setObject(5, dts.get(2).toString());//loanTrnId
            ps.setObject(6, dts.get(3).toString());//LoanId
            ps.setObject(7, dts.get(3).toString().substring(7, 18));//LoanId
            ps.setObject(8, dts.get(4).toString());//BatchCode
             ps.setObject(9, dts.get(5).toString());//AmountDisbursed
            ps.setObject(10, dts.get(6).toString());//ExpectedInterest
            ps.setObject(11,dts.get(7).toString());//ExpectedTotalAmount
            ps.setObject(12,"0");//InterestRate
            ps.setObject(13, dts.get(9).toString());//AmountPaid
            ps.setObject(14, dts.get(10).toString());//PrincipalPaid
            ps.setObject(15,dts.get(11).toString());//InterestPaid
            ps.setObject(16,dts.get(12).toString());//AccumulatedInterestPaid
             ps.setObject(17,dts.get(13).toString());//LoanPenaltyPaid
             
                ps.setObject(18, "0.0");//PrincipalBalance
            ps.setObject(19, "0.0");//InterestBalance
            ps.setObject(20,"0.0");//AccumulatedInterestBalance
            ps.setObject(21,"0.0");//LoanPenaltyBalance
             ps.setObject(22,"0.0");//LoanBalance
             
              ps.setObject(23,"WrittenOff");//LoanStatusReport
            ps.setObject(24, "NA");//OtherOne
          ps.setObject(25, "NA");//OtherTwo
              ps.setObject(26, "NA");//OtherThree
               ps.setObject(27, "NA");//OtherFour
            ps.execute();
        
            
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  
     
     }
     
     
     
     
     
     
     
     
     
     public synchronized void createTheInitailLoanPayState(List dts,Component c){
     
//         JOptionPane.showMessageDialog(c, "In");
//           newPaymentCame.add(MonthYearPaid.getMonth().toString());//MonthPaidFor0
//newPaymentCame.add(MonthYearPaid.getYear());//YearPaidFor1
//newPaymentCame.add(trnIdInterest.get(0));//loanTrnId2
//newPaymentCame.add("newloan"+accountNumberNow);//LoanId3
//newPaymentCame.add(debit.get(9).toString());//BatchCode4
//newPaymentCame.add("0.0");//AmountDisbursed5
//newPaymentCame.add("0.0");//Expected Interest6
//newPaymentCame.add("0.0");//Expected Total Amount7
//newPaymentCame.add(trnIdInterest.get(1));//Interest Rate 8
//newPaymentCame.add(amountPaid);//Amount Paid 9
//newPaymentCame.add("0.0");//PrincipalPaid 10
//newPaymentCame.add("0.0");//Interest Paid 11
//newPaymentCame.add("0.0");//AccumulatedInterestPaid 12
//newPaymentCame.add("0.0");//LoanPenaltyPaid 13
            
            try {
                
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps = cq.prepareStatement("INSERT INTO LoanDisburseRepayStatement VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);//TrnId
            ps.setObject(2, this.getDBCurrentDate());//TrnDate 
            ps.setObject(3, dts.get(0).toString());//MonthPaid 
            ps.setObject(4, dts.get(1).toString());//YearPaid
            ps.setObject(5, dts.get(2).toString());//loanTrnId
            ps.setObject(6, dts.get(3).toString());//LoanId
            ps.setObject(7, dts.get(3).toString().substring(7, 18));//LoanId
            ps.setObject(8, dts.get(4).toString());//BatchCode
             ps.setObject(9, dts.get(5).toString());//AmountDisbursed
            ps.setObject(10, dts.get(6).toString());//ExpectedInterest
            ps.setObject(11,dts.get(7).toString());//ExpectedTotalAmount
            ps.setObject(12,"0");//InterestRate
            ps.setObject(13, dts.get(9).toString());//AmountPaid
            ps.setObject(14, dts.get(10).toString());//PrincipalPaid
            ps.setObject(15,dts.get(11).toString());//InterestPaid
            ps.setObject(16,dts.get(12).toString());//AccumulatedInterestPaid
             ps.setObject(17,dts.get(13).toString());//LoanPenaltyPaid
             
                ps.setObject(18, "0.0");//PrincipalBalance
            ps.setObject(19, "0.0");//InterestBalance
            ps.setObject(20,"0.0");//AccumulatedInterestBalance
            ps.setObject(21,"0.0");//LoanPenaltyBalance
             ps.setObject(22,"0.0");//LoanBalance
             
              ps.setObject(23,"Running");//LoanStatusReport
            ps.setObject(24, "NA");//OtherOne
          ps.setObject(25, "NA");//OtherTwo
              ps.setObject(26, "NA");//OtherThree
               ps.setObject(27, "NA");//OtherFour
            ps.execute();
        
            
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  
     
     }
     
     
     
     

     
     
public void createTheFormularDetails(List theDetails){
    String RangeLevel="";
    if(this.thePayRollItemThere(theDetails.get(0).toString())){
    RangeLevel=this.getTheRangeLevel(theDetails.get(0).toString());
    
    RangeLevel=(parseInt(RangeLevel)+1)+"";
    
    }else{
    
    RangeLevel="1";
    }
    
    String theItemId=theItemPayRollId(theDetails.get(0).toString());

  try {
                
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps = cq.prepareStatement("INSERT INTO payrollitemsparameterforformulars VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);//TrnId
            ps.setObject(2, this.getDBCurrentDate());//TrnDate 
            ps.setObject(3, theItemId);//MonthPaid 
            ps.setObject(4, theDetails.get(0).toString());//YearPaid
            ps.setObject(5, RangeLevel);//loanTrnId
            ps.setObject(6, theDetails.get(1).toString());//LoanId
             ps.setObject(7, theDetails.get(2).toString());//LoanId
            ps.setObject(8, theDetails.get(3).toString());//BatchCode
                 ps.setObject(9, "Not Used");//loanTrnId
            ps.setObject(10, "NA");//LoanId
             ps.setObject(11, "NA");//LoanId
            ps.setObject(12, "NA");//BatchCode
              ps.setObject(13, "NA");//LoanId
            ps.setObject(14, "NA");//BatchCode
            ps.execute();
        
            
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  
     
  

}



public boolean thePayRollItemThere(String theItem){

boolean theItemThere=false;int theNumbeThre=0;
       try {
           
            Connection cq=quaryObj.createConnection(); 
            
            cq.setAutoCommit(false);
            
            PreparedStatement ps1 = cq.prepareStatement("SELECT COUNT(TrnId) AS payRolls FROM payrollitemsparameterforformulars WHERE ItemName="+"'"+theItem+"'");
           
            ResultSet rst=ps1.executeQuery();
            while(rst.next()){
           theNumbeThre=rst.getInt("payRolls");
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(theNumbeThre>0){
        theItemThere=true;
        }
  return theItemThere;  
}

public String getTheRangeLevel(String TheItem){

String rangeLevel="";
       try {
           
            Connection cq=quaryObj.createConnection(); 
            
            cq.setAutoCommit(false);
            
            PreparedStatement ps1 = cq.prepareStatement("SELECT RangeLevel FROM payrollitemsparameterforformulars WHERE ItemName="+"'"+TheItem+"'");
           
            ResultSet rst=ps1.executeQuery();
            if(rst.last()){
           rangeLevel=rst.getString("RangeLevel");
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  return rangeLevel;  


}

public void fillThePayRollItem (JComboBox box){

String theRewards="";
 
 List rewards=new ArrayList();
 
rewards.add("Select Item");


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             if(theNotUsedRewardThere()){
             String query = "SELECT ItemName FROM payrollemployeerewarddeductionstore";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theRewards=rst3.getString("ItemName");
       rewards.add(theRewards);
            
             }
   }else{
           
      rewards.add("Empty");      
           }     
         
        listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
                    box.setModel(modelcombo); 
                    box.setSelectedIndex(0);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 


}

//
//
//     public void updateDetailsLoanStaR(String batchNumber, List detailsNow, Component c){
//     
//         Connection cq=quaryObj.createConnection(); 
//        try {
//            
//           cq.setAutoCommit(false);
//           
//           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET PrincipalBalance=?,InterestBalance=?,AccumulatedInterestBalance=?,LoanPenaltyBalance=?,LoanBalance=?  WHERE BatchCode=?";
//           
//            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
//            
//        ps.setObject(1, detailsNow.get(0).toString());
//        
//        ps.setObject(2, detailsNow.get(1).toString());
//        
//        ps.setObject(3, detailsNow.get(2).toString());
//        
//         ps.setObject(4, detailsNow.get(3).toString());
//        
//        ps.setObject(5, detailsNow.get(4).toString());
//        
//        ps.setObject(6, batchNumber);
//        
//        
//         ps.execute();
//           
//           cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//       } catch (SQLException ex) {
//           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//       }      
//            
//    
//     
//     
//     }
     
     
     public synchronized void updateClosedStatementWrittenOff(List theOnesD){
//         closedDetails.add(newLoanId);//New loan Id:0
//        closedDetails.add("Completed");//Loan cycle status:1
//        closedDetails.add(accountNumberNow);//Borrower Account Number:1
//        
    Connection cq=quaryObj.createConnection(); 
        try {
            
           cq.setAutoCommit(false);
           
           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET LoanId=?,LoanStatusReport=?  WHERE LoanId=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
            
        ps.setObject(1, theOnesD.get(0).toString());
        
        ps.setObject(2, theOnesD.get(1).toString());
        
        ps.setObject(3, "writtenOffloan"+theOnesD.get(2).toString());
        
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }      
            
    
    }
     
     
     
    public synchronized void updateClosedStatement(List theOnesD){
//         closedDetails.add(newLoanId);//New loan Id:0
//        closedDetails.add("Completed");//Loan cycle status:1
//        closedDetails.add(accountNumberNow);//Borrower Account Number:1
//        
    Connection cq=quaryObj.createConnection(); 
        try {
            
           cq.setAutoCommit(false);
           
           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET LoanId=?,LoanStatusReport=?  WHERE LoanId=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
            
        ps.setObject(1, theOnesD.get(0).toString());
        
        ps.setObject(2, theOnesD.get(1).toString());
        
        ps.setObject(3, "newLoan"+theOnesD.get(2).toString());
        
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }      
            
    
    }
     
     
     
     
    public synchronized void createTheInitailLoanDisState(List dts,Component c){
     
////  newloanDis.add(interestRateId.get(0));//loanTrnId
//newloanDis.add("newloan"+borrowerAccount);//LoanId
//newloanDis.add(debit.get(9).toString());//BatchCode
//newloanDis.add(debit.get(5).toString());//AmountDisbursed
//newloanDis.add(interestRateId.get(1));//Expected Interest
//newloanDis.add(interestRateId.get(2));//Expected Total Amount
//newloanDis.add(interestRateId.get(3));//Interest Rate
//newloanDis.add("0.0");//Amount Paid
//newloanDis.add("0.0");//PrincipalPaid
//newloanDis.add("0.0");//Interest Paid
//newloanDis.add("0.0");//AccumulatedInterestPaid
//newloanDis.add("0.0");//LoanPenaltyPaid
//         JOptionPane.showMessageDialog(c, dts.get(1).toString().substring(7, 18));
            try {
                
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps = cq.prepareStatement("INSERT INTO LoanDisburseRepayStatement VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);//TrnId
            ps.setObject(2, this.getDBCurrentDate());//TrnDate 
            ps.setObject(3, "");//MonthPaid 
            ps.setObject(4, "");//YearPaid
            ps.setObject(5, dts.get(0).toString());//loanTrnId
            ps.setObject(6, dts.get(1).toString());//LoanId
             ps.setObject(7, dts.get(1).toString().substring(7, 18));//LoanId
            ps.setObject(8, dts.get(2).toString());//BatchCode
             ps.setObject(9, dts.get(3).toString());//AmountDisbursed
            ps.setObject(10, dts.get(4).toString());//ExpectedInterest
            ps.setObject(11,dts.get(5).toString());//ExpectedTotalAmount
            ps.setObject(12,dts.get(6).toString());//InterestRate
            
            ps.setObject(13, "0.0");//AmountPaid
            ps.setObject(14, "0.0");//PrincipalPaid
            ps.setObject(15,"0.0");//InterestPaid
            ps.setObject(16,"0.0");//AccumulatedInterestPaid
             ps.setObject(17,"0.0");//LoanPenaltyPaid
             
               ps.setObject(18, "0.0");//PrincipalBalance
            ps.setObject(19, "0.0");//InterestBalance
            ps.setObject(20,"0.0");//AccumulatedInterestBalance
            ps.setObject(21,"0.0");//LoanPenaltyBalance
             ps.setObject(22,"0.0");//LoanBalance
             
              ps.setObject(23,"Running");//LoanStatusReport
            ps.setObject(24, "NA");//OtherOne
          ps.setObject(25, "NA");//OtherTwo
              ps.setObject(26, "NA");//OtherThree
               ps.setObject(27, "NA");//OtherFour
               
            ps.execute();
        
            
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  
     
     }
    
//    public void updateTheInterest(List theAmountD,Component c){
//    
////        JOptionPane.showMessageDialog(c, theAmountD.get(1).toString()+" "+theAmountD.get(2).toString()+" "+theAmountD.get(0).toString());
//    switch(theAmountD.get(0).toString()){
//    
//        case "Interest":
//       Connection cq=quaryObj.createConnection(); 
//        try {
//           cq.setAutoCommit(false);
//           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET InterestPaid=?  WHERE BatchCode=?";
//           
//            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
//        ps.setObject(1, theAmountD.get(1).toString());
//        ps.setObject(2, theAmountD.get(2).toString());
//         ps.execute();
//           
//           cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//       } catch (SQLException ex) {
//           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//       }      
//            
//            
//            break;
//              case "AccumulatedInterest":
//                  
//              Connection cqx=quaryObj.createConnection(); 
//        try {
//           cqx.setAutoCommit(false);
//           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET AccumulatedInterestPaid=?  WHERE BatchCode=?";
//           
//            PreparedStatement ps =cqx.prepareStatement(UpdateQuary);
//        ps.setObject(1, theAmountD.get(1).toString());
//        ps.setObject(2, theAmountD.get(2).toString());
//         ps.execute();
//           
//           cqx.setAutoCommit(true);
//           
//           quaryObj.closeConnection(cqx);
//       } catch (SQLException ex) {
//           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//       }       
//                  
//                  
//                  break;
//                    case "LoanPenalty":
//                  Connection cqxc=quaryObj.createConnection(); 
//        try {
//           cqxc.setAutoCommit(false);
//           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET LoanPenaltyPaid=?  WHERE BatchCode=?";
//           
//            PreparedStatement ps =cqxc.prepareStatement(UpdateQuary);
//        ps.setObject(1, theAmountD.get(1).toString());
//        ps.setObject(2, theAmountD.get(2).toString());
//         ps.execute();
//           
//           cqxc.setAutoCommit(true);
//           quaryObj.closeConnection(cqxc);
//       } catch (SQLException ex) {
//           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//       }       
//                      
//                        
//                        
//                        break;
//                          case "PrincimpalPayment":
//                                 Connection cqxcv=quaryObj.createConnection(); 
//        try {
//           cqxcv.setAutoCommit(false);
//           String UpdateQuary = "UPDATE LoanDisburseRepayStatement SET PrincipalPaid=?  WHERE BatchCode=?";
//           
//            PreparedStatement ps =cqxcv.prepareStatement(UpdateQuary);
//        ps.setObject(1, theAmountD.get(1).toString());
//        ps.setObject(2, theAmountD.get(2).toString());
//         ps.execute();
//           
//           cqxcv.setAutoCommit(true);
//           quaryObj.closeConnection(cqxcv);
//       } catch (SQLException ex) {
//           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//       }       
//                       
//                              
//                              
//                              break;
//    
//    }
//    
//    
//    }
    
    public synchronized String customerEmail(String accountNumber){
     String email="";
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT email FROM master WHERE account_number="+"'"+accountNumber+"'");
            ResultSet rst=ps1.executeQuery();
           if (rst.first()) {
                email= rst.getString("email");
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return email;
    
    }
      public synchronized List accountNumberByEmail(String accountNumber){
          
     List email= new ArrayList();
     
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT account_number FROM master WHERE email="+"'"+accountNumber+"'");
            ResultSet rst=ps1.executeQuery();
           if (rst.next()) {
                email.add(rst.getString("account_number"));
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
       
       
       
       if(email.isEmpty()){
       email.add("05502000010");
       }
           return email;
    
    }
    
    public List boardMembersAndStaff(){
    
    List emailAccounts=new ArrayList();
       try {
           
            Connection cq=quaryObj.createConnection(); 
            
            cq.setAutoCommit(false);
            
            PreparedStatement ps1 = cq.prepareStatement("SELECT account_number FROM log_in");
            ResultSet rst=ps1.executeQuery();
           while (rst.next()) {
              emailAccounts.add(rst.getString("account_number"));
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return emailAccounts;
    
    }
    
    
public boolean ExpenseledgersExist(){
boolean expenseExists=false;
if(this.testTable("bsanca02221000010")||this.testTable("bsanca02220000010")||this.testTable("bsanca02222000010")||this.testTable("bsanca02223000010")){
        
        expenseExists=true;
        
        }

return expenseExists;

}
    
   public String getLoggedInUserId(){

        return   fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "activeUserId.txt"));  
 }
   
   public String getLoggedInUserName(){
      
      String lastName="",firstName="",userName="";
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT last_name,first_name FROM log_in WHERE user_id="+getLoggedInUserId());
            ResultSet rst=ps1.executeQuery();
            if (rst.next()) {
                lastName= rst.getString("last_name");
                firstName= rst.getString("first_name");
                userName= lastName.concat(" ").concat(firstName);  }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
         
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return userName;
}
   public String getLoggedInUserRole(){
        String userRole="";
       try {
            Connection cq=quaryObj.createConnection(); 
           cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT role FROM log_in WHERE user_id="+getLoggedInUserId());
            ResultSet rst=ps1.executeQuery();
            if (rst.next()) {
                userRole= rst.getString("role");  }
            rst.close();
            ps1.close();
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  return userRole;
}
   
   
   
 public synchronized double  existingProvisionedAmount(){
  String bal="";
    Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT ledger_balance FROM  BSANCA05509000110";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
            
             
              if (rs.last()) {
                       
                bal =rs.getString("ledger_balance");
                    
     
          
              }
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 if(bal.isEmpty()){
 
 bal="0.0";
 }
 
 return parseDouble(bal);
 
 }
   public String getLoggedInUserTitle(){
         String userTitle="";
       
       try {
           Connection cq=quaryObj.createConnection(); 
           cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT title FROM log_in WHERE user_id="+getLoggedInUserId());
            ResultSet rst=ps1.executeQuery();
            if (rst.next()) {
                userTitle= rst.getString("title");  }
            rst.close();
            ps1.close();
            cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return userTitle;
} 
   public String getLoggedInUserLineManager(){
        String userLineManager="";
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT line_manager FROM log_in WHERE user_id="+getLoggedInUserId());
            ResultSet rst=ps1.executeQuery();
            if (rst.next()) {
                userLineManager= rst.getString("line_manager");  }
            rst.close();
            ps1.close();
            cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  return userLineManager;
} 
   public String getLoggedInUserLoginTime() {
        String userLoginTime="";
       
       try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT log_time logged_in");
            ResultSet rst=ps1.executeQuery();
            if (rst.last()) {
                userLoginTime= rst.getString("log_time");  }
            rst.close();
            ps1.close();
            cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
           
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        } return userLoginTime;
} 
    public String getLoggedInUserLoginDate(){
        String userLoginDate="";
        try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT log_date logged_in");
            ResultSet rst=ps1.executeQuery();
            if (rst.last()) {
                userLoginDate= rst.getString("log_date");  }
            rst.close();
            ps1.close();
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
           
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        } return userLoginDate;
}  
 
 public void createPayRollFormularItems(JComboBox box){
 
 String theRewards="";
 
 List rewards=new ArrayList();
 
rewards.add("Select The Item");


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             if(theNotUsedRewardThere()){
             String query = "SELECT ItemName FROM payrollemployeerewarddeductionstore WHERE AccrualMethod='Formular'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theRewards=rst3.getString("ItemName");
       rewards.add(theRewards);
            
             }
   }else{
           
      rewards.add("Empty");      
           }     
         
        listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
                    box.setModel(modelcombo); 
                    box.setSelectedIndex(0);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 
 
 
 
 }
   
public String theItemPayRollId(String theItem){
 
 String theRewards="";
 


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
            
             String query = "SELECT TrnId FROM payrollemployeerewarddeductionstore WHERE ItemName="+"'"+theItem+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theRewards=rst3.getString("TrnId");
      
            
             }
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 
 return theRewards;
 
 
 }


 public List fetchUpdatedPayRollD(String idP){
    List thePayRolls=new ArrayList();
    
     try {
         
         Connection cq=quaryObj.createConnection();
               cq.setAutoCommit(false);
               String query = "SELECT  ItemName,ItemGroup,ItemCategory,AccrualFrequency,AccrualMethod,Exceptional,UsageStatus FROM payrollemployeerewarddeductionstore WHERE TrnId="+idP;
               PreparedStatement ps =  cq.prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
               while (rs.next()) {
                 thePayRolls.add(rs.getString("ItemName"));
                 thePayRolls.add(rs.getString("ItemGroup"));
                 thePayRolls.add(rs.getString("ItemCategory"));
                 thePayRolls.add(rs.getString("AccrualFrequency"));
                 thePayRolls.add(rs.getString("AccrualMethod"));
                 thePayRolls.add(rs.getString("Exceptional"));
                 
                   
               }
                 cq.setAutoCommit(true);
          quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
    
    
    return thePayRolls;
    }
   
 
 
 public void createNewPayRollItem(String itemGroup,String theItem){

     
       try {
  Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO payrollemployeerewarddeductionstore VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null); //   TrnId:1
    
    ps.setObject(2, getDBCurrentDate());//TrnDate:2
    
    ps.setObject(3, itemGroup);// AccountNumber:3 theSavings:0
    
    ps.setObject(4, "Not Specified");//AccountName:4 theSavings:2
    
    ps.setObject(5,theItem);//SavingsMonth:5 
  
    ps.setObject(6, "Not Specified");//  SavingsYear:6 
    
    ps.setObject(7,"Not Specified");//SavingsAdded:5 theFinalDetails:4
    
    ps.setObject(8, "Not Specified");//SavingsRemoved:6 theFinalDetails:5
    
    ps.setObject(9,"New");//SavingsRunningBalance:7theFinalDetails:6
    
    ps.setObject(10, "Not Used"); //OtherOne 
    
    ps.setObject(11, "NA");//OtherTwo
    
    ps.setObject(12,"NA");//OTherThree
    
    
    ps.setObject(13, "NA"); // OtherFour
    
    ps.setObject(14,"NA");  // OtherFive
    
     ps.setObject(15,"NA");  // OtherFive
    
    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 
 
 }
 
 
 public void updatePayRollItem(String itemGroup,String theItem){

       try {
  Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    PreparedStatement pstool2 =  cq.prepareStatement("UPDATE payrollemployeerewarddeductionstore SET ItemGroup=? WHERE ItemName=?");
    
        
    pstool2.setObject(1, itemGroup);
    
    pstool2.setObject(2, theItem);
    
    
    pstool2.executeUpdate();
    
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 
 
 }
 
 
 
public String getDBCurrentTime(){
    String thistime=null;
    
          SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
       thistime= sdf.format(cal.getTime()) ; 
            
       return thistime;
}
public String getDBCurrentDate() {
    String thistime=" ";
    thistime=fmt.dateConverterForDatabase(System.currentTimeMillis( ));

return thistime;
}

  public boolean newLedgerCreated(){
  
        boolean  accountCreated=false;int theN=0;
        
     try {
         
         Connection cq=quaryObj.createConnection();
               cq.setAutoCommit(false);
               String query = "SELECT  COUNT(trn_id) AS counts FROM account_created_store WHERE account_status='New'";
               PreparedStatement ps =  cq.prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
               while (rs.next()) {
                   
                   theN= rs.getInt("counts");
                 
                   
               }
                 cq.setAutoCommit(true);
          quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
     if(theN>0){
     
     accountCreated=true;
     }
 
 return accountCreated;
  
  }
 public String userid(String password){
 String user_id="";
try {
Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        PreparedStatement ps1 =cq.prepareStatement("SELECT user_id FROM logged_in WHERE p_word_login="+password);
        ResultSet rst=ps1.executeQuery();
        
        
        if (rst.next())
        {
            user_id =rst.getString("user_id");
            
        }
    
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    

} catch (SQLException ex) {
 Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
   }
    return  user_id;
}
 
  public String login_time(){
 String loginTime="";
try {
Connection cq=quaryObj.createConnection(); 
      cq.setAutoCommit(false);
        PreparedStatement ps1 =cq.prepareStatement("SELECT log_time FROM logged_in");
        ResultSet rst=ps1.executeQuery();
        
        
        if (rst.last())
        {
            loginTime=rst.getString("log_time");
            
        }
    
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    

} catch (SQLException ex) {
 Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
   }
    return  loginTime;
}
 
 
  public String userName(String userId){
 String user_name="";
try {

Connection cq=quaryObj.createConnection(); 
     cq.setAutoCommit(false);
        PreparedStatement ps1 =cq.prepareStatement("SELECT first_name,last_name FROM log_in WHERE user_id="+userId);
        ResultSet rst=ps1.executeQuery();
        
        
        if (rst.next())
        {
            user_name =rst.getString("first_name")+" "+rst.getString("last_name");
            
        }
    
   cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    

} catch (SQLException ex) {
 Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
   }
    return  user_name;
}
 
  
  public String password(String userID){
 String passWord="";
try {
Connection cq=quaryObj.createConnection(); 
     cq.setAutoCommit(false);
        PreparedStatement ps1 =cq.prepareStatement("SELECT p_word_login FROM log_in WHERE user_id="+userID);
        ResultSet rst=ps1.executeQuery();
        
        
        if (rst.next())
        {
           passWord =rst.getString("p_word_login");
            
        }
    
  cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    

} catch (SQLException ex) {
 Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
   }
    return  passWord;
}
  public void updateLogging_in(String user_id,String password, String Login_Date, String login_time){
  
  
     try {
         Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =cq.prepareStatement("INSERT INTO logged_in VALUES(?,?,?,?)");
         ps1.setObject(1, user_id);
         ps1.setObject(2, password);
         ps1.setObject(3,Login_Date);
         ps1.setObject(4,login_time);
         ps1.executeUpdate();
         cq.setAutoCommit(false);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }
  
  
  }
 
  public String title(String userID){
      
 String passWord="";
 
 
try {
 Connection cq=quaryObj.createConnection(); 
      cq.setAutoCommit(false);
        PreparedStatement ps1 =cq.prepareStatement("SELECT title FROM log_in WHERE user_id="+userID);
        ResultSet rst=ps1.executeQuery();
        
        
        if (rst.next())
        {
           passWord =rst.getString("title");
            
        }
    
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    

} catch (SQLException ex) {
 Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
   }
    return  passWord;
}
 
 
  public boolean id_Exists(String userID){
 boolean itemThere=false;
try {
 Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        PreparedStatement ps1 =cq.prepareStatement("SELECT user_id FROM log_in WHERE user_id="+userID);
        ResultSet rst=ps1.executeQuery();
        
        
        if (rst.next()==true)
        {
           itemThere =true;
            
        }
    
  cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    

} catch (SQLException ex) {
 Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
   }
    return  itemThere;
}
 
 
public String updateTransactionDetails(JTable table,JTextField field,String account){
 double bal=0.0;String balType="",balType5="",pos="",flag="";

    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Name");
      column1.add("Value");
      column1.add("Position");

     try {
                Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
            String query = "SELECT account_l5, account_l1,running_balance FROM account_created_store WHERE account_number="+account;
            PreparedStatement ps =cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           if(rst3.next()){
         
              balType=rst3.getString("account_l1");
                balType5=rst3.getString("account_l5");
              bal=parseDouble(df2.format(rst3.getDouble("running_balance")));
           
            }
           	
		
         if((bal<0.0&&balType.equalsIgnoreCase("Credits"))||(bal<0.0&&(balType5.equalsIgnoreCase("Allowance for Doubtful Accounts")||balType5.equalsIgnoreCase("Allowance for Doubtful Interest")||balType5.equalsIgnoreCase("Accumulated Depreciation/Amortization")))){
         bal=Math.abs(bal);
         pos="DR";
         flag="Red";
         }else if(bal<0.0&&balType.equalsIgnoreCase("Debits")) {
         
         bal=Math.abs(bal);
         pos="CR"; 
         flag="Red";
         } else if((bal>=0.0&&balType.equalsIgnoreCase("Credits"))||(bal<0.0&&(balType5.equalsIgnoreCase("Allowance for Doubtful Accounts")||balType5.equalsIgnoreCase("Allowance for Doubtful Interest")||balType5.equalsIgnoreCase("Accumulated Depreciation/Amortization")))) {
         bal=Math.abs(bal);
          pos="CR"; 
         flag="Green";
         }else if(bal>=0.0&&balType.equalsIgnoreCase("Debits")) {
         bal=Math.abs(bal);
          pos="DR"; 
         flag="Green";
         }
 
          data4  =new ArrayList();  
           data4.add(0, "Available Bal");
           data4.add(1, bal);
            data4.add(2, pos);
             data5.add(0, data4);
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
            field.setText(AccountName(account));
            
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }



return flag;



} 
 public void updateSharesPart(JTextField field,JFormattedTextField ffield,String S4){
 double bal=0.0;String balType="";
 try {
   Connection cq=quaryObj.createConnection(); 
   cq.setAutoCommit(false);
            String query = "SELECT value_of_shares,number_of_shares FROM master WHERE account_number="+S4;
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           if(rst3.next()){
         
              balType=rst3.getString("number_of_shares");
              bal=parseDouble(df2.format(parseDouble(rst3.getString("value_of_shares").replace(",", ""))));
           
            }
        field.setText(balType);
        ffield.setValue(bal);
            
           cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

 }
 
  public synchronized String getAccountNumber(String accountName){

//  return   fios.stringFileReader(fios.createFileName("accountManagement", "accountNumber", "accountNumber"+accountName+".txt"));

 String accountNumber = "";
          try {
             Connection cq=quaryObj.createConnection(); 
             cq.setAutoCommit(false);
              String query = "SELECT  account_number FROM  account_created_store WHERE account_name="+"'"+accountName+"'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    accountNumber= rs.getString("account_number");
                      
                  
                    }
            cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return accountNumber;
  }

 
 
 
public boolean debit(List debitItem,Component c){
  boolean end=false;
   
//   JOptionPane.showMessageDialog(c, debitItem.get(0).toString()+";\n"+debitItem.get(1).toString()+";\n"+debitItem.get(2).toString()+";\n"+debitItem.get(3).toString()+";\n"+debitItem.get(4).toString()+";\n"+debitItem.get(5).toString()+";\n"+debitItem.get(6).toString()+";\n"+debitItem.get(7).toString()+";\n"+debitItem.get(8).toString()+";\n"+debitItem.get(9).toString()+";\n"+debitItem.get(10).toString()+";\n"+debitItem.get(11).toString());
//      
      String accountNumber=fmt.formatAccountWithSeperators(debitItem.get(0).toString());
      
       if("01128000110".equalsIgnoreCase(accountNumber)){
          
      this.updateDailyReportPrincimpalWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      }
      
      
       if("03301000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportInterestWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      }
       
       if("03311000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportAccumulatedInterestWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      } 
      
          if("03312000110".equalsIgnoreCase(accountNumber)){
              
      this.updateDailyReportLoanPenaltyWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      } 
      
      
//      JOptionPane.showMessageDialog(c, accountNumber+";"+debitItem.get(5).toString());
      
//      fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test3"+accountNumber+".txt"), debitItem.get(4).toString());
    String selection3=accountCategory(accountNumber);
    
  String balance= accountBalance(accountNumber,debitItem.get(4).toString());
  
// fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test"+accountNumber+".txt"), balance);
    switch(selection3){
    
        case "Land & Building":
            
 end=  updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
 
// updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Land & Building",debitItem.get(4).toString());  
     
            break;
            
case "Office Equipment":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Office Equipment",debitItem.get(4).toString()); 
   break;		
case "Motor Vehicles":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Motor Vehicles",debitItem.get(4).toString()); 
   break;		
case "Furniture, Fixtures & Fittings":
    
    end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Furniture, Fixtures & Fittings",debitItem.get(4).toString());  
    break;		
case "Computers And Accessories":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computers And Accessories",debitItem.get(4).toString());  
    break;		
case "Other Fixed Assets":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Fixed Assets",debitItem.get(4).toString()); 
    
   break;		
case "Intangible Assets":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Intangible Assets",debitItem.get(4).toString()); 
   break;		
case "Accumulated Depreciation/Amortization":
    
     end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",debitItem.get(4).toString()); 
    
//  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet");
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",debitItem.get(4).toString()); 
   break;		
case "Shares":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Shares",debitItem.get(4).toString()); 
   break;		
case "Debentures":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Debentures",debitItem.get(4).toString()); 
   break;		
case "Fixed Deposits":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fixed Deposits",debitItem.get(4).toString()); 
   break;		
case "Government Securities":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Government Securities",debitItem.get(4).toString()); 
   break;		
case "Other Investments":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Investments",debitItem.get(4).toString()); 
   break;		
case "Stores/Consumables Including Packing Materials":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Stores/Consumables Including Packing Materials",debitItem.get(4).toString()); 
   break;		
case "Raw Materials":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Raw Materials",debitItem.get(4).toString()); 
   break;		
case "Work-In-Progress":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Work-In-Progress",debitItem.get(4).toString()); 
   break;		
case "Finished Goods Or Trade Goods":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Finished Goods Or Trade Goods",debitItem.get(4).toString()); 
   break;		
case "Trade Receivables":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Trade Receivables",debitItem.get(4).toString()); 
   break;	
 case "Debtors":
     
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Debtors",debitItem.get(4).toString()); 
   break;	
   case "Computer Software And Hardware":
     
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computer Software And Hardware",debitItem.get(4).toString()); 
   break;
   
case "Interest Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Receivable",debitItem.get(4).toString()); 
   break;
   case "Accounts Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accounts Receivable",debitItem.get(4).toString()); 
   break;
   case "Accumulated Interest Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Interest Receivable",debitItem.get(4).toString()); 
   break;
   case "Loan Penalty Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loan Penalty Receivable",debitItem.get(4).toString()); 
   break;
   case "Allowance for Doubtful Accounts":
    
  end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Allowance for Doubtful Accounts",debitItem.get(4).toString()); 
     break;
     case "Allowance for Doubtful Interest":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Allowance for Doubtful Interest",debitItem.get(4).toString()); 
     break;
case "Prepayments":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Prepayments",debitItem.get(4).toString()); 
   break;		
case "Mobile Money":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Mobile Money",debitItem.get(4).toString()); 
   break;		
case "Bank Balance":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bank Balance",debitItem.get(4).toString()); 
   break;		
case "Cash At Hand":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Cash At Hand",debitItem.get(4).toString()); 
   break;		
case "Cash Equivalents":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Cash Equivalents",debitItem.get(4).toString()); 
   break;		
 case "Loans To Related Parties":
     
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans To Related Parties",debitItem.get(4).toString()); 
   break;		
case "Advances To Staff":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Advances To Staff",debitItem.get(4).toString()); 
   break;	
case "Deposits (Other Than Fixed Deposit)":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Deposits (Other Than Fixed Deposit)",debitItem.get(4).toString()); 
    break;
case "Loans To Customers":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans To Customers",debitItem.get(4).toString()); 
   break;		
case "Balances With Tax Authority":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Balances With Tax Authority",debitItem.get(4).toString()); 
   break;		
case "Deferred Tax Asset":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Deferred Tax Asset",debitItem.get(4).toString()); 
   break;
    
case "Accounts Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accounts Payable",debitItem.get(4).toString());  
 break;		
case "Uknown Mobile Money":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Uknown Mobile Money",debitItem.get(4).toString()); 
 break;		
case "Customer Deposits":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Customer Deposits",debitItem.get(4).toString()); 
 break;		
case "Liability For Leased Assets":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Liability For Leased Assets",debitItem.get(4).toString()); 
 break;		
case "Accrued Interest":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accrued Interest",debitItem.get(4).toString()); 
 break;		
case "Amounts Due To Others":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Amounts Due To Others",debitItem.get(4).toString()); 
 break;		
case "Unpaid Matured Debts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unpaid Matured Debts",debitItem.get(4).toString()); 
 break;		
case "Other Current Liabilities":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Current Liabilities",debitItem.get(4).toString());   
 break;		
 case "Return On Investment Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "Insurance Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "Interest Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "Tax Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "PAYE Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "NSSF Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
 

  case "Unclassified Amounts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unclassified Amounts",debitItem.get(4).toString());   
 break;	
 
case "Provision For Income Tax":
      
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Income Tax",debitItem.get(4).toString()); 
 break;		
case "Provision For Bad Debts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad Debts",debitItem.get(4).toString()); 
 break;		
case "Proposed Dividends":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Proposed Dividends",debitItem.get(4).toString());  
 
 break;		
case "Other Provisions":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Provisions",debitItem.get(4).toString()); 
 break;		
case "Secured Loan From Financial Institutions":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Loan From Financial Institutions",debitItem.get(4).toString()); 
 break;		
case "Secured Other Loans":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Other Loans",debitItem.get(4).toString());  
 break;		
case "Debt Securities Issued":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Debt Securities Issued",debitItem.get(4).toString());  
 break;		
case "Secured Due To Related Parties":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Due To Related Parties",debitItem.get(4).toString()); 
 break;		
case "Unsecured Loan From Financial Institutions":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Loan From Financial Institutions",debitItem.get(4).toString()); 
 break;		
case "Unsecured Other Loans":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Other Loans",debitItem.get(4).toString()); 
 break;		
case "Payables For More Than One Operating Cycle":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Payables For More Than One Operating Cycle",debitItem.get(4).toString());  
 break;		
case "Creditors For More Than One Operating Cycle":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Creditors For More Than One Operating Cycle",debitItem.get(4).toString()); 
 break;		
case "Unsecured Due To Related Parties":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Due To Related Parties",debitItem.get(4).toString()); 
 break;		
case "Deferred Tax Liability":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Deferred Tax Liability",debitItem.get(4).toString()); 
 break;	
case "Sales":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Sales",debitItem.get(4).toString()); 
 break;		
case "Gross Interest Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Interest Income",debitItem.get(4).toString()); 
 break;		
case "Gross Receipt Of Profession Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Receipt Of Profession Fees",debitItem.get(4).toString());  
 break;		
case "Gross Receipt Of Consultancy Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Receipt Of Consultancy Fees",debitItem.get(4).toString());  
 break;		
case "Ledger Fee":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Ledger Fee",debitItem.get(4).toString()); 
 break;		
case "Savings Withdraw Charges":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Savings Withdraw Charges",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Interest Recovered":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Interest Recovered",debitItem.get(4).toString()); 
 break;		
case "Admin Costs":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Admin Costs",debitItem.get(4).toString()); 
 break;		
case "Charges":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Charges",debitItem.get(4).toString());  
 break;		
case "Membership Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Membership Fees",debitItem.get(4).toString()); 
 break;		
case "Loan Insurance Charges":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Insurance Charges",debitItem.get(4).toString()); 
 break;		
case "Accumulated Interest Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Interest Income",debitItem.get(4).toString()); 
 
 break;		
case "Loan Surcharge":
    
    end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//     updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Surcharge",debitItem.get(4).toString()); 
 break;		
case "Commission And Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Commission And Fees",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Principal RecoveredX":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",debitItem.get(4).toString()); 
 break;	
 
 case "Bad Debts Principal Recovered":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Principal Recovered",debitItem.get(4).toString()); 
 break;	
 
case "Loan Processing Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Processing Fees",debitItem.get(4).toString()); 
 break;		
case "Annual Subscription Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Annual Subscription Fees",debitItem.get(4).toString()); 
 break;		
case "Provision For Bad And Doubtful Debts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Recovered":
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Recovered",debitItem.get(4).toString()); 
 break;		
 case "Savings Penalties":
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
 break;	
  case "Other Incomes":
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
 break;	
case "Gross Amount Received":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Amount Received",debitItem.get(4).toString()); 
 break;		
case "Amount Recovered":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Amount Recovered",debitItem.get(4).toString()); 
 break;		
case "Reserve For Unexpired Risk Brought From Previous Year Of Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Reserve For Unexpired Risk Brought From Previous Year Of Income",debitItem.get(4).toString()); 
 break;		
case "Other Purely Short Term Insurance Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Purely Short Term Insurance Income",debitItem.get(4).toString()); 
 break;		
case "Any Other Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Any Other Income",debitItem.get(4).toString());  
 break;		
case "Issued, Subscribed And Paid Up Capital":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Issued, Subscribed And Paid Up Capital",debitItem.get(4).toString()); 
 break;		
case "Additional Issued Share Capital":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Additional Issued Share Capital",debitItem.get(4).toString()); 
 break;		
case "Education Fund 1%":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber, "Education Fund 1%",debitItem.get(4).toString()); 
 break;		
case "Capital Reserve":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Capital Reserve",debitItem.get(4).toString()); 
 break;		
case "Education Fund":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Education Fund",debitItem.get(4).toString()); 
 break;		
case "Statutory Reserve Fund 10%":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Statutory Reserve Fund 10%",debitItem.get(4).toString()); 
 break;		
case "Revaluation Reserve":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Revaluation Reserve",debitItem.get(4).toString()); 
 break;		
case "Co-Operative Development Fund":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Co-Operative Development Fund",debitItem.get(4).toString()); 
 break;		
case "Retained Earnings":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Retained Earnings",debitItem.get(4).toString());   
    break;		
case "Accumulated Profit Or Loss Or Surplus Or Deficit":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Profit Or Loss Or Surplus Or Deficit",debitItem.get(4).toString()); 
 break;		
case "General Reserve":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"General Reserve",debitItem.get(4).toString()); 
 break;		
                case "Opening Stock Of Raw Materials":
                    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Raw Materials",debitItem.get(4).toString());                 
   
   break;		
              case "Opening Stock Of Work In Progress":
                  
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);              
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Work In Progress",debitItem.get(4).toString());  
   break;		
           case "Opening Stock Of Trading Goods":
               
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);           
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Trading Goods",debitItem.get(4).toString());  
   break;		
         case "Opening Stock Of Manufactured Goods":
             
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Manufactured Goods",debitItem.get(4).toString());  
   break;		
       case "Local Purchases Net Of Duties And Taxes":
           
    end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//      updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Local Purchases Net Of Duties And Taxes",debitItem.get(4).toString());        
   break;		
        case "Imports CIF Value And Taxes":
            
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);            
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Imports CIF Value And Taxes",debitItem.get(4).toString());        
   break;		
       case "Direct Wages":
           
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);       
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Direct Wages",debitItem.get(4).toString());  
   break;		
        case "Interest Expenses":
            
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Expenses",debitItem.get(4).toString());  
   break;		
      case "Direct Expenses":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Direct Expenses",debitItem.get(4).toString());  
   break;		
       case "Factory Rent":
           
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Factory Rent",debitItem.get(4).toString());  
   break;		
      case "Factory Rates":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Factory Rates",debitItem.get(4).toString());  
   break;		
     case "Fuel And Power":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fuel And Power",debitItem.get(4).toString());    
   break;		
               case "Indirect Wages":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Indirect Wages",debitItem.get(4).toString());               
   break;		
               case "Consumables":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Consumables",debitItem.get(4).toString());  
   break;		
               case "Depreciation":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Depreciation",debitItem.get(4).toString());                
   break;		
               case "Other Factory Overheads":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Factory Overheads",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Raw Materials":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Raw Materials",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Work In Progress":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Work In Progress",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Manufactured Goods":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Manufactured Goods",debitItem.get(4).toString());                
   break;		
               case "Closing Stock Of Trading Goods":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Trading Goods",debitItem.get(4).toString());  
   break;		
     case "Advertisement Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Advertisement Expense",debitItem.get(4).toString());  
   break;		
     case "Audit Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Audit Expenses",debitItem.get(4).toString());  
   break;		
     case "Bad Debts Written Off":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Written Off",debitItem.get(4).toString());  
   break;		
     case "Commission":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Commission",debitItem.get(4).toString());    
   break;		
     case "Computer Soft And Hardware Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computer Soft And Hardware Expenses",debitItem.get(4).toString());      
   break;		
     case "Maintainance of Office Equipment":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Maintainance of Office Equipment",debitItem.get(4).toString());    
   break;		
     case "News Papers And Periodicals":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"News Papers And Periodicals",debitItem.get(4).toString());  
   break;		
     case "Donations":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Donations",debitItem.get(4).toString());     
   break;	
     case "Entertainment And Refreshments":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Entertainment And Refreshments",debitItem.get(4).toString());  
   break;		
     case "Freight And Transport":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Freight And Transport",debitItem.get(4).toString());  
   break;		
     case "Air Time Allowance":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Air Time Allowance",debitItem.get(4).toString());    
   break;		
     case "Hotel, Boarding And Lodging Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Hotel, Boarding And Lodging Expenses",debitItem.get(4).toString());    
   break;		
     case "Legal Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Legal Expenses",debitItem.get(4).toString());  
   break;		
     case "Fuel":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fuel",debitItem.get(4).toString());       
   break;		
     case "Utilities Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Utilities Expenses",debitItem.get(4).toString());     
   break;		
     case "Provision For Bad And Doubtful Debts Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts Expense",debitItem.get(4).toString());      
   break;		
     case "Rent Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Rent Expense",debitItem.get(4).toString());  
   break;		
     case "Bad Debts Expense":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Expense",debitItem.get(4).toString());      
   break;		
     case "Car Maintainance And Repairs":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Car Maintainance And Repairs",debitItem.get(4).toString());      
   break;		
     case "Provision for Depreciation":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Provision for Depreciation",debitItem.get(4).toString());   
   break;		
     case "Office Maintainance Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Office Maintainance Expense",debitItem.get(4).toString());      
   break;		
     case "Consultancy":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Consultancy",debitItem.get(4).toString());       
         break;		
     case "Loan Recovery Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loan Recovery Expenses",debitItem.get(4).toString());      
   break;		
     case "Stationery And Printing":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Stationery And Printing",debitItem.get(4).toString());     
   break;
     case "Compliance And Regulatory Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Compliance And Regulatory Expenses",debitItem.get(4).toString());     
   break;
   
   
   
     case "Lunch Allowance":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lunch Allowance",debitItem.get(4).toString());  
   break;		
     case "Telephone And Internet":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Telephone And Internet",debitItem.get(4).toString());     
   break;		
     case "Training Expenditure":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Training Expenditure",debitItem.get(4).toString());        
         break;		
     case "Lincenses And Permits":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lincenses And Permits",debitItem.get(4).toString());     
   break;		
     case "Parking And Security":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Parking And Security",debitItem.get(4).toString());  
         break;	
         case "Caveat Charges":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Parking And Security",debitItem.get(4).toString());  
         break;	 
         
         
     case "Depreciation Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Depreciation Expense",debitItem.get(4).toString());  
   break;		
     case "Loss On Disposal Of Assets":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loss On Disposal Of Assets",debitItem.get(4).toString());       
   break;		
     case "Management Fees":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Management Fees",debitItem.get(4).toString());  
   break;		
     case "AGM Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"AGM Expenses",debitItem.get(4).toString());  
   break;
   
      case "Loans Committee Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans Committee Expenses",debitItem.get(4).toString());  
   break;
   
      case "Admin Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Admin Expenses",debitItem.get(4).toString());  
   break;
   
   
  
      case "Salaries And Wages":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Salaries And Wages",debitItem.get(4).toString());       
          break;
          
      case "Bonus":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bonus",debitItem.get(4).toString());  
   break;		
      case "PAYEE":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"PAYEE",debitItem.get(4).toString());        
   break;		
      case "Board Sitting Allowances":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Board Sitting Allowances",debitItem.get(4).toString());        
   break;		
      case "Employee Allowances":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Employee Allowances",debitItem.get(4).toString());      
   
   break;		
      case "Directors Allowances":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Directors Allowances",debitItem.get(4).toString());       
   break;		
      case "Contribution To Retirement Fund":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Contribution To Retirement Fund",debitItem.get(4).toString());       
   break;
          
      case "Medical Allowance":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Medical Allowance",debitItem.get(4).toString());      
   break;		
      case "NSSF Contributions":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"NSSF Contributions",debitItem.get(4).toString());  
   break;
   
     case "Festive Allowance":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
 
   break;
   
     case "Employee Welfare":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
 
   break;
   
    case "Interest Expense":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Expense",debitItem.get(4).toString());    
   break;		
    case "Bank Charges":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bank Charges",debitItem.get(4).toString());     
   break;		
    case "Start Up Expenses":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Start Up Expenses",debitItem.get(4).toString());    
   break;		
    case "Lending License":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lending License",debitItem.get(4).toString()); 
   break;		
    case "Company Stamps":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Company Stamps",debitItem.get(4).toString()); 
   break;		
    case "Unrealized Exchange Loss":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",debitItem.get(4).toString());     
   break;	
    case "Return On Investment Expense":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Expense",debitItem.get(4).toString());     
   break;
   
    case "Claims Admitted During The Year":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Claims Admitted During The Year",debitItem.get(4).toString());    
   break;		
    case "Premiums Returned To Insured":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Premiums Returned To Insured",debitItem.get(4).toString());     
        break;		
    case "Reserves For Unexpired Risk Carried Forward":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Reserves For Unexpired Risk Carried Forward",debitItem.get(4).toString()); 
   break;		
    case "Agency Expenses":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Agency Expenses",debitItem.get(4).toString());    
   break;		
    case "Other Expenses Related To Short Term Business":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Expenses Related To Short Term Business",debitItem.get(4).toString());   
   break;
        
  case "Income Tax Expense":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Income Tax Expense",debitItem.get(4).toString()); 
   break;
 
  case  "Dividends paid during the Operating period":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Dividends paid during the Operating period",debitItem.get(4).toString());  
   break;		
  case "Retained earnings at start of Operating period":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Retained earnings at start of Operating period",debitItem.get(4).toString());  
   break;
   
    case "Restatement of retained earnings for corrections of previous period errors":
      
end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Restatement of retained earnings for corrections of previous period errors",debitItem.get(4).toString());  
   break;
   
   case  "Restatement of retained earnings for changes in accounting policies":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Restatement of retained earnings for changes in accounting policies",debitItem.get(4).toString());  
   break;
   
  case "General expense":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"General expense",debitItem.get(4).toString());  
   break;
 

 }
    
  
    
  
    
  return end;
  
 }
 public boolean debit1xx(List debitItem,Component c,JTextField fieldMe){
  boolean end=false;
   
//      JOptionPane.showMessageDialog(c, debitItem.get(0).toString()+";\n"+debitItem.get(1).toString()+";\n"+debitItem.get(2).toString()+";\n"+debitItem.get(3).toString()+";\n"+debitItem.get(4).toString()+";\n"+debitItem.get(5).toString()+";\n"+debitItem.get(6).toString()+";\n"+debitItem.get(7).toString()+";\n"+debitItem.get(8).toString()+";\n"+debitItem.get(9).toString()+";\n"+debitItem.get(10).toString()+";\n"+debitItem.get(11).toString());
      this.tx=fieldMe;
 
      String accountNumber=fmt.formatAccountWithSeperators(debitItem.get(0).toString());
//      fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test3"+accountNumber+".txt"), debitItem.get(4).toString());

//JOptionPane.showMessageDialog(c, accountNumber);
 if("01128000110".equalsIgnoreCase(accountNumber)){
          
      this.updateDailyReportPrincimpalWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      }
      
      
       if("03301000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportInterestWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      }
       
       if("03311000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportAccumulatedInterestWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      } 
      
          if("03312000110".equalsIgnoreCase(accountNumber)){
              
      this.updateDailyReportLoanPenaltyWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      } 
String selection3=accountCategory(accountNumber);
    
  String balance= accountBalance(accountNumber,debitItem.get(4).toString());
  
// fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test"+accountNumber+".txt"), balance);
    switch(selection3){
    
        case "Land & Building":
            
 end=  updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
 
// updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Land & Building",debitItem.get(4).toString());  
     
            break;
            
case "Office Equipment":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Office Equipment",debitItem.get(4).toString()); 
   break;		
case "Motor Vehicles":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Motor Vehicles",debitItem.get(4).toString()); 
   break;		
case "Furniture, Fixtures & Fittings":
    
    end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Furniture, Fixtures & Fittings",debitItem.get(4).toString());  
    break;		
case "Computers And Accessories":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computers And Accessories",debitItem.get(4).toString());  
    break;		
case "Other Fixed Assets":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Fixed Assets",debitItem.get(4).toString()); 
    
   break;		
case "Intangible Assets":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Intangible Assets",debitItem.get(4).toString()); 
   break;		
case "Accumulated Depreciation/Amortization":
    
     end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",debitItem.get(4).toString()); 
    
//  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet");
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",debitItem.get(4).toString()); 
   break;		
case "Shares":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Shares",debitItem.get(4).toString()); 
   break;		
case "Debentures":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Debentures",debitItem.get(4).toString()); 
   break;		
case "Fixed Deposits":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fixed Deposits",debitItem.get(4).toString()); 
   break;		
case "Government Securities":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Government Securities",debitItem.get(4).toString()); 
   break;		
case "Other Investments":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Investments",debitItem.get(4).toString()); 
   break;		
case "Stores/Consumables Including Packing Materials":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Stores/Consumables Including Packing Materials",debitItem.get(4).toString()); 
   break;		
case "Raw Materials":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Raw Materials",debitItem.get(4).toString()); 
   break;		
case "Work-In-Progress":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Work-In-Progress",debitItem.get(4).toString()); 
   break;		
case "Finished Goods Or Trade Goods":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Finished Goods Or Trade Goods",debitItem.get(4).toString()); 
   break;		
case "Trade Receivables":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Trade Receivables",debitItem.get(4).toString()); 
   break;	
 case "Debtors":
     
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Debtors",debitItem.get(4).toString()); 
   break;	
   case "Computer Software And Hardware":
     
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computer Software And Hardware",debitItem.get(4).toString()); 
   break;
   
case "Interest Receivable":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Receivable",debitItem.get(4).toString()); 
   break;
   case "Accounts Receivable":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accounts Receivable",debitItem.get(4).toString()); 
   break;
   case "Accumulated Interest Receivable":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Interest Receivable",debitItem.get(4).toString()); 
   break;
   case "Loan Penalty Receivable":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loan Penalty Receivable",debitItem.get(4).toString()); 
   break;
   case "Allowance for Doubtful Accounts":
    
  end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Allowance for Doubtful Accounts",debitItem.get(4).toString()); 
     break;
     case "Allowance for Doubtful Interest":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Allowance for Doubtful Interest",debitItem.get(4).toString()); 
     break;
case "Prepayments":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Prepayments",debitItem.get(4).toString()); 
   break;		
case "Mobile Money":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Mobile Money",debitItem.get(4).toString()); 
   break;		
case "Bank Balance":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bank Balance",debitItem.get(4).toString()); 
   break;		
case "Cash At Hand":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Cash At Hand",debitItem.get(4).toString()); 
   break;		
case "Cash Equivalents":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Cash Equivalents",debitItem.get(4).toString()); 
   break;		
 case "Loans To Related Parties":
     
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans To Related Parties",debitItem.get(4).toString()); 
   break;		
case "Advances To Staff":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Advances To Staff",debitItem.get(4).toString()); 
   break;	
case "Deposits (Other Than Fixed Deposit)":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Deposits (Other Than Fixed Deposit)",debitItem.get(4).toString()); 
    break;
case "Loans To Customers":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans To Customers",debitItem.get(4).toString()); 
   break;		
case "Balances With Tax Authority":
    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Balances With Tax Authority",debitItem.get(4).toString()); 
   break;		
case "Deferred Tax Asset":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
   break;
    
case "Accounts Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accounts Payable",debitItem.get(4).toString());  
 break;		
case "Uknown Mobile Money":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Uknown Mobile Money",debitItem.get(4).toString()); 
 break;		
case "Customer Deposits":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Customer Deposits",debitItem.get(4).toString()); 
 break;		
case "Liability For Leased Assets":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Liability For Leased Assets",debitItem.get(4).toString()); 
 break;		
case "Accrued Interest":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accrued Interest",debitItem.get(4).toString()); 
 break;		
case "Amounts Due To Others":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Amounts Due To Others",debitItem.get(4).toString()); 
 break;		
case "Unpaid Matured Debts":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unpaid Matured Debts",debitItem.get(4).toString()); 
 break;		
case "Other Current Liabilities":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Current Liabilities",debitItem.get(4).toString());   
 break;		
 case "Return On Investment Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "Insurance Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "Interest Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "Tax Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "PAYE Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
  case "NSSF Payable":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;	
 

  case "Unclassified Amounts":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unclassified Amounts",debitItem.get(4).toString());   
 break;	
 
case "Provision For Income Tax":
      
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Income Tax",debitItem.get(4).toString()); 
 break;		
case "Provision For Bad Debts":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad Debts",debitItem.get(4).toString()); 
 break;		
case "Proposed Dividends":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Proposed Dividends",debitItem.get(4).toString());  
 
 break;		
case "Other Provisions":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Provisions",debitItem.get(4).toString()); 
 break;		
case "Secured Loan From Financial Institutions":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Loan From Financial Institutions",debitItem.get(4).toString()); 
 break;		
case "Secured Other Loans":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Other Loans",debitItem.get(4).toString());  
 break;		
case "Debt Securities Issued":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Debt Securities Issued",debitItem.get(4).toString());  
 break;		
case "Secured Due To Related Parties":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Due To Related Parties",debitItem.get(4).toString()); 
 break;		
case "Unsecured Loan From Financial Institutions":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Loan From Financial Institutions",debitItem.get(4).toString()); 
 break;		
case "Unsecured Other Loans":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Other Loans",debitItem.get(4).toString()); 
 break;		
case "Payables For More Than One Operating Cycle":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Payables For More Than One Operating Cycle",debitItem.get(4).toString());  
 break;		
case "Creditors For More Than One Operating Cycle":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Creditors For More Than One Operating Cycle",debitItem.get(4).toString()); 
 break;		
case "Unsecured Due To Related Parties":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Due To Related Parties",debitItem.get(4).toString()); 
 break;		
case "Deferred Tax Liability":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Deferred Tax Liability",debitItem.get(4).toString()); 
 break;	
case "Sales":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Sales",debitItem.get(4).toString()); 
 break;		
case "Gross Interest Income":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Interest Income",debitItem.get(4).toString()); 
 break;		
case "Gross Receipt Of Profession Fees":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Receipt Of Profession Fees",debitItem.get(4).toString());  
 break;		
case "Gross Receipt Of Consultancy Fees":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Receipt Of Consultancy Fees",debitItem.get(4).toString());  
 break;		
case "Ledger Fee":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Ledger Fee",debitItem.get(4).toString()); 
 break;		
case "Savings Withdraw Charges":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Savings Withdraw Charges",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Interest Recovered":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Interest Recovered",debitItem.get(4).toString()); 
 break;		
case "Admin Costs":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Admin Costs",debitItem.get(4).toString()); 
 break;		
case "Charges":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Charges",debitItem.get(4).toString());  
 break;		
case "Membership Fees":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Membership Fees",debitItem.get(4).toString()); 
 break;		
case "Loan Insurance Charges":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Insurance Charges",debitItem.get(4).toString()); 
 break;		
case "Accumulated Interest Income":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Interest Income",debitItem.get(4).toString()); 
 
 break;		
case "Loan Surcharge":
    
    end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//     updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Surcharge",debitItem.get(4).toString()); 
 break;		
case "Commission And Fees":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Commission And Fees",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Principal RecoveredX":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",debitItem.get(4).toString()); 
 break;	
 
 case "Bad Debts Principal Recovered":
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Principal Recovered",debitItem.get(4).toString()); 
 break;	
 
case "Loan Processing Fees":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Processing Fees",debitItem.get(4).toString()); 
 break;		
case "Annual Subscription Fees":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Annual Subscription Fees",debitItem.get(4).toString()); 
 break;		
case "Provision For Bad And Doubtful Debts":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Recovered":
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Recovered",debitItem.get(4).toString()); 
 break;		
 case "Savings Penalties":
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
 break;	
  case "Other Incomes":
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
 break;	
case "Gross Amount Received":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Amount Received",debitItem.get(4).toString()); 
 break;		
case "Amount Recovered":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Amount Recovered",debitItem.get(4).toString()); 
 break;		
case "Reserve For Unexpired Risk Brought From Previous Year Of Income":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Reserve For Unexpired Risk Brought From Previous Year Of Income",debitItem.get(4).toString()); 
 break;		
case "Other Purely Short Term Insurance Income":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Purely Short Term Insurance Income",debitItem.get(4).toString()); 
 break;		
case "Any Other Income":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Any Other Income",debitItem.get(4).toString());  
 break;		
case "Issued, Subscribed And Paid Up Capital":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Issued, Subscribed And Paid Up Capital",debitItem.get(4).toString()); 
 break;		
case "Additional Issued Share Capital":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Additional Issued Share Capital",debitItem.get(4).toString()); 
 break;		
case "Education Fund 1%":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber, "Education Fund 1%",debitItem.get(4).toString()); 
 break;		
case "Capital Reserve":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Capital Reserve",debitItem.get(4).toString()); 
 break;		
case "Education Fund":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Education Fund",debitItem.get(4).toString()); 
 break;		
case "Statutory Reserve Fund 10%":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Statutory Reserve Fund 10%",debitItem.get(4).toString()); 
 break;		
case "Revaluation Reserve":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Revaluation Reserve",debitItem.get(4).toString()); 
 break;		
case "Co-Operative Development Fund":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Co-Operative Development Fund",debitItem.get(4).toString()); 
 break;		
case "Retained Earnings":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Retained Earnings",debitItem.get(4).toString());   
    break;		
case "Accumulated Profit Or Loss Or Surplus Or Deficit":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Profit Or Loss Or Surplus Or Deficit",debitItem.get(4).toString()); 
 break;		
case "General Reserve":
    
 end= updateAccountDebit1(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"General Reserve",debitItem.get(4).toString()); 
 break;		
                case "Opening Stock Of Raw Materials":
                    
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Raw Materials",debitItem.get(4).toString());                 
   
   break;		
              case "Opening Stock Of Work In Progress":
                  
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);              
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Work In Progress",debitItem.get(4).toString());  
   break;		
           case "Opening Stock Of Trading Goods":
               
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);           
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Trading Goods",debitItem.get(4).toString());  
   break;		
         case "Opening Stock Of Manufactured Goods":
             
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Manufactured Goods",debitItem.get(4).toString());  
   break;		
       case "Local Purchases Net Of Duties And Taxes":
           
    end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//      updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Local Purchases Net Of Duties And Taxes",debitItem.get(4).toString());        
   break;		
        case "Imports CIF Value And Taxes":
            
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);            
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Imports CIF Value And Taxes",debitItem.get(4).toString());        
   break;		
       case "Direct Wages":
           
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);       
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Direct Wages",debitItem.get(4).toString());  
   break;		
        case "Interest Expenses":
            
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Expenses",debitItem.get(4).toString());  
   break;		
      case "Direct Expenses":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Direct Expenses",debitItem.get(4).toString());  
   break;		
       case "Factory Rent":
           
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Factory Rent",debitItem.get(4).toString());  
   break;		
      case "Factory Rates":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Factory Rates",debitItem.get(4).toString());  
   break;		
     case "Fuel And Power":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fuel And Power",debitItem.get(4).toString());    
   break;		
               case "Indirect Wages":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Indirect Wages",debitItem.get(4).toString());               
   break;		
               case "Consumables":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Consumables",debitItem.get(4).toString());  
   break;		
               case "Depreciation":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Depreciation",debitItem.get(4).toString());                
   break;		
               case "Other Factory Overheads":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Factory Overheads",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Raw Materials":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Raw Materials",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Work In Progress":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Work In Progress",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Manufactured Goods":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Manufactured Goods",debitItem.get(4).toString());                
   break;		
               case "Closing Stock Of Trading Goods":
                   
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Trading Goods",debitItem.get(4).toString());  
   break;		
     case "Advertisement Expense":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Advertisement Expense",debitItem.get(4).toString());  
   break;		
     case "Audit Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Audit Expenses",debitItem.get(4).toString());  
   break;		
     case "Bad Debts Written Off":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Written Off",debitItem.get(4).toString());  
   break;		
     case "Commission":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Commission",debitItem.get(4).toString());    
   break;		
     case "Computer Soft And Hardware Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computer Soft And Hardware Expenses",debitItem.get(4).toString());      
   break;		
     case "Maintainance of Office Equipment":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Maintainance of Office Equipment",debitItem.get(4).toString());    
   break;		
     case "News Papers And Periodicals":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"News Papers And Periodicals",debitItem.get(4).toString());  
   break;		
     case "Donations":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Donations",debitItem.get(4).toString());     
   break;	
     case "Entertainment And Refreshments":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Entertainment And Refreshments",debitItem.get(4).toString());  
   break;		
     case "Freight And Transport":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Freight And Transport",debitItem.get(4).toString());  
   break;		
     case "Air Time Allowance":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Air Time Allowance",debitItem.get(4).toString());    
   break;		
     case "Hotel, Boarding And Lodging Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Hotel, Boarding And Lodging Expenses",debitItem.get(4).toString());    
   break;		
     case "Legal Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Legal Expenses",debitItem.get(4).toString());  
   break;		
     case "Fuel":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fuel",debitItem.get(4).toString());       
   break;		
     case "Utilities Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Utilities Expenses",debitItem.get(4).toString());     
   break;		
     case "Provision For Bad And Doubtful Debts Expense":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts Expense",debitItem.get(4).toString());      
   break;		
     case "Rent Expense":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Rent Expense",debitItem.get(4).toString());  
   break;		
     case "Bad Debts Expense":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Expense",debitItem.get(4).toString());      
   break;		
     case "Car Maintainance And Repairs":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Car Maintainance And Repairs",debitItem.get(4).toString());      
   break;		
     case "Provision for Depreciation":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Provision for Depreciation",debitItem.get(4).toString());   
   break;		
     case "Office Maintainance Expense":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Office Maintainance Expense",debitItem.get(4).toString());      
   break;		
     case "Consultancy":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Consultancy",debitItem.get(4).toString());       
         break;		
     case "Loan Recovery Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loan Recovery Expenses",debitItem.get(4).toString());      
   break;		
     case "Stationery And Printing":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Stationery And Printing",debitItem.get(4).toString());     
   break;
     case "Compliance And Regulatory Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Compliance And Regulatory Expenses",debitItem.get(4).toString());     
   break;
   
   
   
     case "Lunch Allowance":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lunch Allowance",debitItem.get(4).toString());  
   break;		
     case "Telephone And Internet":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Telephone And Internet",debitItem.get(4).toString());     
   break;		
     case "Training Expenditure":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Training Expenditure",debitItem.get(4).toString());        
         break;		
     case "Lincenses And Permits":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lincenses And Permits",debitItem.get(4).toString());     
   break;		
     case "Parking And Security":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Parking And Security",debitItem.get(4).toString());  
         break;	
         case "Caveat Charges":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Parking And Security",debitItem.get(4).toString());  
         break;	 
         
         
     case "Depreciation Expense":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Depreciation Expense",debitItem.get(4).toString());  
   break;		
     case "Loss On Disposal Of Assets":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loss On Disposal Of Assets",debitItem.get(4).toString());       
   break;		
     case "Management Fees":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Management Fees",debitItem.get(4).toString());  
   break;		
     case "AGM Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"AGM Expenses",debitItem.get(4).toString());  
   break;	
   
     case  "Loans Committee Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Loans Committee Expenses",debitItem.get(4).toString());  
   break;
   
     case "Admin Expenses":
         
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Admin Expenses",debitItem.get(4).toString());  
   break;
   
   
  
      case "Salaries And Wages":
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Salaries And Wages",debitItem.get(4).toString());       
          break;
          
      case "Bonus":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bonus",debitItem.get(4).toString());  
   break;		
      case "PAYEE":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"PAYEE",debitItem.get(4).toString());        
   break;		
      case "Board Sitting Allowances":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Board Sitting Allowances",debitItem.get(4).toString());        
   break;		
      case "Employee Allowances":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Employee Allowances",debitItem.get(4).toString());      
   
   break;		
      case "Directors Allowances":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Directors Allowances",debitItem.get(4).toString());       
   break;		
      case "Contribution To Retirement Fund":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Contribution To Retirement Fund",debitItem.get(4).toString());       
   break;
          
      case "Medical Allowance":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Medical Allowance",debitItem.get(4).toString());      
   break;		
      case "NSSF Contributions":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"NSSF Contributions",debitItem.get(4).toString());  
   break;
   
     case "Festive Allowance":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
 
   break;
   
     case "Employee Welfare":
          
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
 
   break;
   
    case "Interest Expense":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Expense",debitItem.get(4).toString());    
   break;		
    case "Bank Charges":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bank Charges",debitItem.get(4).toString());     
   break;		
    case "Start Up Expenses":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Start Up Expenses",debitItem.get(4).toString());    
   break;		
    case "Lending License":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lending License",debitItem.get(4).toString()); 
   break;		
    case "Company Stamps":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Company Stamps",debitItem.get(4).toString()); 
   break;		
    case "Unrealized Exchange Loss":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",debitItem.get(4).toString());     
   break;	
    case "Return On Investment Expense":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Expense",debitItem.get(4).toString());     
   break;
   
    case "Claims Admitted During The Year":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Claims Admitted During The Year",debitItem.get(4).toString());    
   break;		
    case "Premiums Returned To Insured":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Premiums Returned To Insured",debitItem.get(4).toString());     
        break;		
    case "Reserves For Unexpired Risk Carried Forward":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Reserves For Unexpired Risk Carried Forward",debitItem.get(4).toString()); 
   break;		
    case "Agency Expenses":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Agency Expenses",debitItem.get(4).toString());    
   break;		
    case "Other Expenses Related To Short Term Business":
        
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Expenses Related To Short Term Business",debitItem.get(4).toString());   
   break;
        
  case "Income Tax Expense":
      
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Income Tax Expense",debitItem.get(4).toString()); 
   break;
 
  case  "Dividends paid during the Operating period":
      
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Dividends paid during the Operating period",debitItem.get(4).toString());  
   break;		
  case "Retained earnings at start of Operating period":
      
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Retained earnings at start of Operating period",debitItem.get(4).toString());  
   break;
   
    case "Restatement of retained earnings for corrections of previous period errors":
      
end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Restatement of retained earnings for corrections of previous period errors",debitItem.get(4).toString());  
   break;
   
   case  "Restatement of retained earnings for changes in accounting policies":
      
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Restatement of retained earnings for changes in accounting policies",debitItem.get(4).toString());  
   break;
   
  case "General expense":
      
  end=updateAccountDebit1(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"General expense",debitItem.get(4).toString());  
   break;
 

 }
    
  
    
  
    
  return end;
  
 }
 
  public boolean credit(List CreditItem,Component c) {
    
      boolean end=false;
 
      String accountNumber=fmt.formatAccountWithSeperators(CreditItem.get(0).toString());
      
      
//      JOptionPane.showMessageDialog(c, CreditItem.get(0).toString()+";\n"+CreditItem.get(1).toString()+";\n"+CreditItem.get(2).toString()+";\n"+CreditItem.get(3).toString()+";\n"+CreditItem.get(4).toString()+";\n"+CreditItem.get(5).toString()+";\n"+CreditItem.get(6).toString()+";\n"+CreditItem.get(7).toString()+";\n"+CreditItem.get(8).toString()+";\n"+CreditItem.get(9).toString()+";\n"+CreditItem.get(10).toString()+";\n"+CreditItem.get(11).toString());
      
      
      if("01128000110".equalsIgnoreCase(accountNumber)){
          
      this.updateDailyReportPrincimpal(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      }
      
      
       if("03301000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportInterest(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      }
       
       if("03311000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportAccumulatedInterest(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      } 
      
          if("03312000110".equalsIgnoreCase(accountNumber)){
              
      this.updateDailyReportLoanPenalty(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      } 
      
////      JOptionPane.showMessageDialog(c, accountNumber);
//       fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test3"+accountNumber+".txt"), CreditItem.get(4).toString());
    String selection3=accountCategory(accountNumber);
    
  String balance= accountBalance(accountNumber,CreditItem.get(4).toString());

// fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test"+accountNumber+".txt"), balance);
  switch(selection3){
    
        case "Land & Building":
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Land & Building",CreditItem.get(4).toString());         
            break;
            
case "Office Equipment":
  
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Office Equipment",CreditItem.get(4).toString()); 558
     break;		
case "Motor Vehicles":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Motor Vehicles",CreditItem.get(4).toString()); 
     break;		
case "Furniture, Fixtures & Fittings":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Furniture, Fixtures & Fittings",CreditItem.get(4).toString()); 
    break;		
case "Computers And Accessories":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computers And Accessories",CreditItem.get(4).toString()); 
    
    break;		
case "Other Fixed Assets":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Fixed Assets",CreditItem.get(4).toString()); 
    break;		
case "Intangible Assets":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Intangible Assets",CreditItem.get(4).toString()); 
    break;		
case "Accumulated Depreciation/Amortization":
    
  end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",CreditItem.get(4).toString());     
    
    
    
//end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet"); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",CreditItem.get(4).toString()); 
     break;		
case "Shares":
    
  end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Shares",CreditItem.get(4).toString()); 
    break;		
case "Debentures":
updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Debentures",CreditItem.get(4).toString()); 
    break;		
case "Fixed Deposits": 
    
   end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fixed Deposits",CreditItem.get(4).toString()); 
     break;		
case "Government Securities":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Government Securities",CreditItem.get(4).toString()); 
    break;		
case "Other Investments":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Investments",CreditItem.get(4).toString()); 
     break;		
case "Stores/Consumables Including Packing Materials":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Stores/Consumables Including Packing Materials",CreditItem.get(4).toString()); 
     break;		
case "Raw Materials":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Raw Materials",CreditItem.get(4).toString()); 
    break;		
case "Work-In-Progress":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Work-In-Progress",CreditItem.get(4).toString()); 
     break;		
case "Finished Goods Or Trade Goods":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Finished Goods Or Trade Goods",CreditItem.get(4).toString()); 
     break;		
case "Trade Receivables":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Trade Receivables",CreditItem.get(4).toString()); 
    break;	
 case "Debtors":
     
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Debtors",CreditItem.get(4).toString()); 
     break;
      case "Computer Software And Hardware":
     
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computer Software And Hardware",CreditItem.get(4).toString()); 
     break;	
case "Interest Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Receivable",CreditItem.get(4).toString()); 
     break;	
     case "Accounts Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accounts Receivable",CreditItem.get(4).toString()); 
     break;
       case "Accumulated Interest Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Interest Receivable",CreditItem.get(4).toString()); 
     break;
       case "Loan Penalty Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loan Penalty Receivable",CreditItem.get(4).toString()); 
     break;
     case "Allowance for Doubtful Accounts":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Allowance for Doubtful Accounts",CreditItem.get(4).toString());     
     break;
     case "Allowance for Doubtful Interest":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Allowance for Doubtful Interest",CreditItem.get(4).toString());     
     break;
case "Prepayments":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Prepayments",CreditItem.get(4).toString());  
    break;		
case "Mobile Money":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Mobile Money",CreditItem.get(4).toString()); 
    break;		
case "Bank Balance":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bank Balance",CreditItem.get(4).toString()); 
    break;		
case "Cash At Hand":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Cash At Hand",CreditItem.get(4).toString()); 
    break;		
case "Cash Equivalents":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Cash Equivalents",CreditItem.get(4).toString()); 
     break;		
 case "Loans To Related Parties":
     
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans To Related Parties",CreditItem.get(4).toString()); 
     break;		
case "Advances To Staff":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Advances To Staff",CreditItem.get(4).toString()); 
     break;	
case "Deposits (Other Than Fixed Deposit)":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Deposits (Other Than Fixed Deposit)",CreditItem.get(4).toString()); 
     break;		
case "Loans To Customers":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans To Customers",CreditItem.get(4).toString());  
    break;		
case "Balances With Tax Authority":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Balances With Tax Authority",CreditItem.get(4).toString()); 
    break;		
case "Deferred Tax Assets":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Deferred Tax Assets",CreditItem.get(4).toString()); 
     break;
    
case "Accounts Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accounts Payable",CreditItem.get(4).toString()); 
   break;		
case "Uknown Mobile Money":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Uknown Mobile Money",CreditItem.get(4).toString());   
   break;		
case "Customer Deposits":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Customer Deposits",CreditItem.get(4).toString());  
   break;		
case "Liability For Leased Assets":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Liability For Leased Assets",CreditItem.get(4).toString());   
   break;		
case "Accrued Interest":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accrued Interest",CreditItem.get(4).toString());  
    break;		
case "Amounts Due To Others":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Amounts Due To Others",CreditItem.get(4).toString());   
   break;		
case "Unpaid Matured Debts":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unpaid Matured Debts",CreditItem.get(4).toString());   
    break;		
case "Return On Investment Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;	
   
   case "Insurance Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case "Interest Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case "Tax Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case  "PAYE Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case  "NSSF Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   
   
 

   case "Unclassified Amounts":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unclassified Amounts",CreditItem.get(4).toString());   
   break;
   
case "Provision For Income Tax":
  
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Income Tax",CreditItem.get(4).toString());   
   break;		
case "Provision For Bad Debts":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad Debts",CreditItem.get(4).toString());   
   break;		
case "Proposed Dividends":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Proposed Dividends",CreditItem.get(4).toString());     
    break;		
case "Other Provisions":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);      
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Provisions",CreditItem.get(4).toString()); 
   break;		
case "Secured Loan From Financial Institutions":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Loan From Financial Institutions",CreditItem.get(4).toString());   
   break;		
case "Secured Other Loans":
    
  end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Other Loans",CreditItem.get(4).toString());    
    break;		
case "Debt Securities Issued":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Debt Securities Issued",CreditItem.get(4).toString());    
    break;		
case "Secured Due To Related Parties":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Due To Related Parties",CreditItem.get(4).toString());  
   break;		
case "Unsecured Loan From Financial Institutions":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Loan From Financial Institutions",CreditItem.get(4).toString());  
   break;		
case "Unsecured Other Loans":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Other Loans",CreditItem.get(4).toString());  
   break;		
case "Payables For More Than One Operating Cycle":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Payables For More Than One Operating Cycle",CreditItem.get(4).toString());   
    break;		
case "Creditors For More Than One Operating Cycle":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Creditors For More Than One Operating Cycle",CreditItem.get(4).toString());   
   break;		
case "Unsecured Due To Related Parties":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Due To Related Parties",CreditItem.get(4).toString()); 
    break;		
case "Deferred Tax Liability":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Deferred Tax Liability",CreditItem.get(4).toString()); 
    break;	
case "Sales":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Sales",CreditItem.get(4).toString()); 
   break;		
case "Gross Interest Income":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Interest Income",CreditItem.get(4).toString()); 
   break;		
case "Gross Receipt Of Profession Fees":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Receipt Of Profession Fees",CreditItem.get(4).toString());  
    break;		
case "Gross Receipt Of Consultancy Fees":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Receipt Of Consultancy Fees",CreditItem.get(4).toString()); 
    break;		
case "Ledger Fee":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Ledger Fee",CreditItem.get(4).toString()); 
   break;		
case "Savings Withdraw Charges":
    
end=  updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Savings Withdraw Charges",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Interest Recovered":
    
 end=  updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Interest Recovered",CreditItem.get(4).toString()); 
   break;		
case "Admin Costs":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Admin Costs",CreditItem.get(4).toString()); 
   break;		
case "Charges":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Charges",CreditItem.get(4).toString()); 
    break;		
case "Membership Fees":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Membership Fees",CreditItem.get(4).toString()); 
   break;		
case "Loan Insurance Charges":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Insurance Charges",CreditItem.get(4).toString()); 
   break;		
case "Accumulated Interest Income":
    
  end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Interest Income",CreditItem.get(4).toString()); 
    break;		
case "Loan Surcharge":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Surcharge",CreditItem.get(4).toString()); 
   break;		
case "Commission And Fees":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Commission And Fees",CreditItem.get(4).toString()); 
   break;
   
case "Bad Debts Principal RecoveredX":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",CreditItem.get(4).toString()); 
   break;
   
   
   case "Bad Debts Principal Recovered":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Principal Recovered",CreditItem.get(4).toString()); 
   break;
   
case "Loan Processing Fees":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Processing Fees",CreditItem.get(4).toString()); 
   break;		
case "Annual Subscription Fees":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Annual Subscription Fees",CreditItem.get(4).toString()); 
    break;		
case "Provision For Bad And Doubtful Debts":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Recovered":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Recovered",CreditItem.get(4).toString()); 
   break;
   case "Savings Penalties":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
 break;
   case "Other Incomes":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
 break;
case "Gross Amount Received":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Amount Received",CreditItem.get(4).toString()); 
    break;		
case "Amount Recovered":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Amount Recovered",CreditItem.get(4).toString()); 
    break;		
case "Reserve For Unexpired Risk Brought From Previous Year Of Income":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Reserve For Unexpired Risk Brought From Previous Year Of Income",CreditItem.get(4).toString()); 
   break;		
case "Other Purely Short Term Insurance Income":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Purely Short Term Insurance Income",CreditItem.get(4).toString()); 
   break;		
case "Any Other Income":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Any Other Income",CreditItem.get(4).toString()); 
    break;		
case "Issued, Subscribed And Paid Up Capital":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Issued, Subscribed And Paid Up Capital",CreditItem.get(4).toString()); 
   break;		
case "Additional Issued Share Capital":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Additional Issued Share Capital",CreditItem.get(4).toString()); 
   break;		
case "Education Fund 1%":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Education Fund 1%",CreditItem.get(4).toString()); 
    break;		
case "Capital Reserve":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Capital Reserve",CreditItem.get(4).toString()); 
   break;		
case "Education Fund":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Education Fund",CreditItem.get(4).toString()); 
   break;		
case "Statutory Reserve Fund 10%":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Statutory Reserve Fund 10%",CreditItem.get(4).toString()); 
   break;		
case "Revaluation Reserve":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Revaluation Reserve",CreditItem.get(4).toString()); 
   break;		
case "Co-Operative Development Fund":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Co-Operative Development Fund",CreditItem.get(4).toString()); 
    break;		
case "Retained Earnings":
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Retained Earnings",CreditItem.get(4).toString()); 
    
    break;		
case "Accumulated Profit Or Loss Or Surplus Or Deficit":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Profit Or Loss Or Surplus Or Deficit",CreditItem.get(4).toString()); 
    break;		
case "General Reserve":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"General Reserve",CreditItem.get(4).toString()); 
   break;		
                case "Opening Stock Of Raw Materials":
                    
end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                 
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Raw Materials",CreditItem.get(4).toString());           
                    break;		
              case "Opening Stock Of Work In Progress":
                  
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);       
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Work In Progress",CreditItem.get(4).toString());             
     break;		
           case "Opening Stock Of Trading Goods":
               
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Trading Goods",CreditItem.get(4).toString());         
     break;		
         case "Opening Stock Of Manufactured Goods":
             
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Manufactured Goods",CreditItem.get(4).toString());         
     break;		
       case "Local Purchases Net Of Duties And Taxes":
           
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Local Purchases Net Of Duties And Taxes",CreditItem.get(4).toString());    
     break;		
        case "Imports CIF Value And Taxes":
            
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);          
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Imports CIF Value And Taxes",CreditItem.get(4).toString());       
            break;		
       case "Direct Wages":
           
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Direct Wages",CreditItem.get(4).toString());     
     break;		
        case "Interest Expenses":
            
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);          
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Expenses",CreditItem.get(4).toString());       
     break;		
      case "Direct Expenses":
          
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);       
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Direct Expenses",CreditItem.get(4).toString());  
     break;		
       case "Factory Rent":
           
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Factory Rent",CreditItem.get(4).toString());     
     break;		
      case "Factory Rates":
          
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);        
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Factory Rates",CreditItem.get(4).toString());    
     break;		
     case "Fuel And Power":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fuel And Power",CreditItem.get(4).toString());    
         break;		
               case "Indirect Wages":
                   
 end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);              
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Indirect Wages",CreditItem.get(4).toString());              
                   break;		
               case "Consumables":
                   
 end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);               
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Consumables",CreditItem.get(4).toString());            
     break;		
               case "Depreciation":
                   
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Depreciation",CreditItem.get(4).toString());              
                   break;		
               case "Other Factory Overheads":
                   
  end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Factory Overheads",CreditItem.get(4).toString());               
     break;		
               case "Closing Stock Of Raw Materials":
                   
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);             
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Raw Materials",CreditItem.get(4).toString());             
     break;		
               case "Closing Stock Of Work In Progress":
                   
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Work In Progress",CreditItem.get(4).toString());             
     break;		
               case "Closing Stock Of Manufactured Goods":
                   
end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                 
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Manufactured Goods",CreditItem.get(4).toString());             
                   break;		
               case "Closing Stock Of Trading Goods":
                   
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Trading Goods",CreditItem.get(4).toString());           
     break;		
     case "Advertisement Expense":
         
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Advertisement Expense",CreditItem.get(4).toString());  
     break;		
     case "Audit Expenses":
         
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Audit Expenses",CreditItem.get(4).toString());
     break;		
     case "Bad Debts Written Off":
         
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);         
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Written Off",CreditItem.get(4).toString()); 
     break;		
     case "Commission":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Commission",CreditItem.get(4).toString());  
         break;		
     case "Computer Soft And Hardware Expenses":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computer Soft And Hardware Expenses",CreditItem.get(4).toString());  
         break;		
     case "Maintainance of Office Equipment":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Maintainance of Office Equipment",CreditItem.get(4).toString());
         break;		
     case "News Papers And Periodicals":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//  updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"News Papers And Periodicals",CreditItem.get(4).toString());  
     break;		
     case "Donations":
         
    end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Donations",CreditItem.get(4).toString()); 
         break;	
     case "Entertainment And Refreshments":
         
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Entertainment And Refreshments",CreditItem.get(4).toString());  
     break;		
     case "Freight And Transport":
         
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Freight And Transport",CreditItem.get(4).toString());   
     break;		
     case "Air Time Allowance":
         
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Air Time Allowance",CreditItem.get(4).toString());
         break;		
     case "Hotel, Boarding And Lodging Expenses":
         
 end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Hotel, Boarding And Lodging Expenses",CreditItem.get(4).toString());  
         break;		
     case "Legal Expenses":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Legal Expenses",CreditItem.get(4).toString());
     break;		
     case "Fuel":
         
 end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fuel",CreditItem.get(4).toString());
         break;		
     case "Utilities Expenses":
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Utilities Expenses",CreditItem.get(4).toString());
         break;		
     case "Provision For Bad And Doubtful Debts Expense":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts Expense",CreditItem.get(4).toString()); 
         break;		
     case "Rent Expense":
         
end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Rent Expense",CreditItem.get(4).toString()); 
     break;		
     case "Bad Debts Expense":
         
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Expense",CreditItem.get(4).toString());  
         break;		
     case "Car Maintainance And Repairs":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Car Maintainance And Repairs",CreditItem.get(4).toString());   
         break;		
     case "Provision for Depreciation":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Provision for Depreciation",CreditItem.get(4).toString()); 
         break;		
     case "Office Maintainance Expense":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Office Maintainance Expense",CreditItem.get(4).toString());   
         break;		
     case "Consultancy":
         
  end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Consultancy",CreditItem.get(4).toString());   
         
         break;		
     case "Loan Recovery Expenses":
         
    end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loan Recovery Expenses",CreditItem.get(4).toString());
         break;		
     case "Stationery And Printing":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Stationery And Printing",CreditItem.get(4).toString()); 
         break;	
         case "Compliance And Regulatory Expenses":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Compliance And Regulatory Expenses",CreditItem.get(4).toString()); 
         break;	   
         
         
     case "Lunch Allowance":
         
    end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lunch Allowance",CreditItem.get(4).toString()); 
     break;		
     case "Telephone And Internet":
         
   end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Telephone And Internet",CreditItem.get(4).toString()); 
         break;		
     case "Training Expenditure":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Training Expenditure",CreditItem.get(4).toString()); 
         
         break;		
     case "Lincenses And Permits":
         
 end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lincenses And Permits",CreditItem.get(4).toString());
         break;		
     case "Parking And Security":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Parking And Security",CreditItem.get(4).toString());
         break;	
          case  "Caveat Charges":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Parking And Security",CreditItem.get(4).toString());
         break;	
         
        
     case "Depreciation Expense":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Depreciation Expense",CreditItem.get(4).toString());
     break;		
     case "Loss On Disposal Of Assets":
         
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loss On Disposal Of Assets",CreditItem.get(4).toString()); 
         break;		
     case "Management Fees":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Management Fees",CreditItem.get(4).toString());
     break;		
     case "AGM Expenses":
         
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans Committee Expenses",CreditItem.get(4).toString());
     break;	
     
       case "Loans Committee Expenses":
         
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"AGM Expenses",CreditItem.get(4).toString());
     break;
     
       case "Admin Expenses":
         
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Admin Expenses",CreditItem.get(4).toString());
     break;
     
     
      case "Salaries And Wages":
          
   end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Salaries And Wages",CreditItem.get(4).toString());
          
          break;		
      case "Bonus":
          
     end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//     updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bonus",CreditItem.get(4).toString());
     break;		
      case "PAYEE":
          
    end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"PAYEE",CreditItem.get(4).toString()); 
          break;		
      case "Board Sitting Allowances":
          
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Board Sitting Allowances",CreditItem.get(4).toString());
          break;		
      case "Employee Allowances":
          
      end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//      updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Employee Allowances",CreditItem.get(4).toString()); 
          break;		
      case "Directors Allowances":
          
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Directors Allowances",CreditItem.get(4).toString()); 
          break;		
      case "Contribution To Retirement Fund":
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Contribution To Retirement Fund",CreditItem.get(4).toString());
          break;
          
      case "Medical Allowance":
   end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Medical Allowance",CreditItem.get(4).toString());
          break;		
      case "NSSF Contributions":
          
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;
      case "Festive Allowance":
          
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break; 
          
       case "Employee Welfare":
          
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;     
          
    case "Interest Expense":
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Expense",CreditItem.get(4).toString());
        break;		
    case "Bank Charges":
        
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bank Charges",CreditItem.get(4).toString());
        break;		
    case "Start Up Expenses":
        
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Start Up Expenses",CreditItem.get(4).toString());
        break;		
    case "Lending License":
        
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lending License",CreditItem.get(4).toString());
     break;		
    case "Company Stamps":
        
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Company Stamps",CreditItem.get(4).toString());
     break;		
    case "Unrealized Exchange Loss":
        
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",CreditItem.get(4).toString());
        break;	
        
         case "Return On Investment Expense":
        
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Expense",CreditItem.get(4).toString());
        break;	
    case "Claims Admitted During The Year":
        
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Claims Admitted During The Year",CreditItem.get(4).toString());
        break;		
    case "Premiums Returned To Insured":
        
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);        
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Premiums Returned To Insured",CreditItem.get(4).toString());
        
        break;		
    case "Reserves For Unexpired Risk Carried Forward":
        
    end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Reserves For Unexpired Risk Carried Forward",CreditItem.get(4).toString());
     break;		
    case "Agency Expenses":
        
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Agency Expenses",CreditItem.get(4).toString());
        break;		
    case "Other Expenses Related To Short Term Business":
        
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Expenses Related To Short Term Business",CreditItem.get(4).toString()); 
        break;	
        
         
  case "Income Tax Expense":
      
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Income Tax Expense",CreditItem.get(4).toString());
     break;		
  case "Dividends paid during the Operating period":
      
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Dividends paid during the Operating period",CreditItem.get(4).toString());
      break;		
  case  "Retained earnings at start of Operating period":
      
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Retained earnings at start of Operating period",CreditItem.get(4).toString()); 
      break;
  case  "Restatement of retained earnings for corrections of previous period errors":
      
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Restatement of retained earnings for corrections of previous period errors",CreditItem.get(4).toString()); 
      break;    
      
    case  "Restatement of retained earnings for changes in accounting policies":
      
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Restatement of retained earnings for changes in accounting policies",CreditItem.get(4).toString()); 
      break;   
      
  case "General expense":
      
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"General expense",CreditItem.get(4).toString());
      break;
 
    }

   return end;
  
 }
  
  
  
public boolean credit1xx(List CreditItem,Component c,JTextField fieldsN) {
    
      boolean end=false;
       this.tx=fieldsN;
//      JOptionPane.showMessageDialog(c, CreditItem.get(0).toString()+";\n"+CreditItem.get(1).toString()+";\n"+CreditItem.get(2).toString()+";\n"+CreditItem.get(3).toString()+";\n"+CreditItem.get(4).toString()+";\n"+CreditItem.get(5).toString()+";\n"+CreditItem.get(6).toString()+";\n"+CreditItem.get(7).toString()+";\n"+CreditItem.get(8).toString()+";\n"+CreditItem.get(9).toString()+";\n"+CreditItem.get(10).toString()+";\n"+CreditItem.get(11).toString());
      
      String accountNumber=fmt.formatAccountWithSeperators(CreditItem.get(0).toString());
//      JOptionPane.showMessageDialog(c, accountNumber);
//       fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test3"+accountNumber+".txt"), CreditItem.get(4).toString());
  
 if("01128000110".equalsIgnoreCase(accountNumber)){
          
      this.updateDailyReportPrincimpal(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      }
      
      
       if("03301000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportInterest(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      }
       
       if("03311000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportAccumulatedInterest(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      } 
      
          if("03312000110".equalsIgnoreCase(accountNumber)){
              
      this.updateDailyReportLoanPenalty(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      } 
      
String selection3=accountCategory(accountNumber);
    
  String balance= accountBalance(accountNumber,CreditItem.get(4).toString());

// fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test"+accountNumber+".txt"), balance);
  switch(selection3){
    
        case "Land & Building":
   end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Land & Building",CreditItem.get(4).toString());         
            break;
            
case "Office Equipment":
  
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Office Equipment",CreditItem.get(4).toString()); 
     break;		
case "Motor Vehicles":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Motor Vehicles",CreditItem.get(4).toString()); 
     break;		
case "Furniture, Fixtures & Fittings":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Furniture, Fixtures & Fittings",CreditItem.get(4).toString()); 
    break;		
case "Computers And Accessories":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computers And Accessories",CreditItem.get(4).toString()); 
    
    break;		
case "Other Fixed Assets":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Fixed Assets",CreditItem.get(4).toString()); 
    break;		
case "Intangible Assets":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Intangible Assets",CreditItem.get(4).toString()); 
    break;		
case "Accumulated Depreciation/Amortization":
    
  end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",CreditItem.get(4).toString());     
    
    
    
//end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet"); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",CreditItem.get(4).toString()); 
     break;		
case "Shares":
    
  end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Shares",CreditItem.get(4).toString()); 
    break;		
case "Debentures":
updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Debentures",CreditItem.get(4).toString()); 
    break;		
case "Fixed Deposits": 
    
   end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fixed Deposits",CreditItem.get(4).toString()); 
     break;		
case "Government Securities":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Government Securities",CreditItem.get(4).toString()); 
    break;		
case "Other Investments":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Investments",CreditItem.get(4).toString()); 
     break;		
case "Stores/Consumables Including Packing Materials":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Stores/Consumables Including Packing Materials",CreditItem.get(4).toString()); 
     break;		
case "Raw Materials":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Raw Materials",CreditItem.get(4).toString()); 
    break;		
case "Work-In-Progress":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Work-In-Progress",CreditItem.get(4).toString()); 
     break;		
case "Finished Goods Or Trade Goods":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Finished Goods Or Trade Goods",CreditItem.get(4).toString()); 
     break;		
case "Trade Receivables":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Trade Receivables",CreditItem.get(4).toString()); 
    break;	
 case "Debtors":
     
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Debtors",CreditItem.get(4).toString()); 
     break;
      case "Computer Software And Hardware":
     
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computer Software And Hardware",CreditItem.get(4).toString()); 
     break;	
case "Interest Receivable":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Receivable",CreditItem.get(4).toString()); 
     break;	
     case "Accounts Receivable":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accounts Receivable",CreditItem.get(4).toString()); 
     break;
       case "Accumulated Interest Receivable":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Interest Receivable",CreditItem.get(4).toString()); 
     break;
       case "Loan Penalty Receivable":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loan Penalty Receivable",CreditItem.get(4).toString()); 
     break;
     case "Allowance for Doubtful Accounts":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Allowance for Doubtful Accounts",CreditItem.get(4).toString());     
     break;
     case "Allowance for Doubtful Interest":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Allowance for Doubtful Interest",CreditItem.get(4).toString());     
     break;
case "Prepayments":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Prepayments",CreditItem.get(4).toString());  
    break;		
case "Mobile Money":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Mobile Money",CreditItem.get(4).toString()); 
    break;		
case "Bank Balance":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bank Balance",CreditItem.get(4).toString()); 
    break;		
case "Cash At Hand":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Cash At Hand",CreditItem.get(4).toString()); 
    break;		
case "Cash Equivalents":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Cash Equivalents",CreditItem.get(4).toString()); 
     break;		
 case "Loans To Related Parties":
     
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans To Related Parties",CreditItem.get(4).toString()); 
     break;		
case "Advances To Staff":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Advances To Staff",CreditItem.get(4).toString()); 
     break;	
case "Deposits (Other Than Fixed Deposit)":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Deposits (Other Than Fixed Deposit)",CreditItem.get(4).toString()); 
     break;		
case "Loans To Customers":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans To Customers",CreditItem.get(4).toString());  
    break;		
case "Balances With Tax Authority":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Balances With Tax Authority",CreditItem.get(4).toString()); 
    break;		
case "Deferred Tax Assets":
    
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Deferred Tax Assets",CreditItem.get(4).toString()); 
     break;
    
case "Accounts Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accounts Payable",CreditItem.get(4).toString()); 
   break;		
case "Uknown Mobile Money":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Uknown Mobile Money",CreditItem.get(4).toString());   
   break;		
case "Customer Deposits":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Customer Deposits",CreditItem.get(4).toString());  
   break;		
case "Liability For Leased Assets":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Liability For Leased Assets",CreditItem.get(4).toString());   
   break;		
case "Accrued Interest":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accrued Interest",CreditItem.get(4).toString());  
    break;		
case "Amounts Due To Others":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Amounts Due To Others",CreditItem.get(4).toString());   
   break;		
case "Unpaid Matured Debts":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unpaid Matured Debts",CreditItem.get(4).toString());   
    break;		
case "Return On Investment Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;	
   
   case "Insurance Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case "Interest Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case "Tax Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case  "PAYE Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   case  "NSSF Payable":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   
   
 

   case "Unclassified Amounts":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unclassified Amounts",CreditItem.get(4).toString());   
   break;
   
case "Provision For Income Tax":
  
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Income Tax",CreditItem.get(4).toString());   
   break;		
case "Provision For Bad Debts":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad Debts",CreditItem.get(4).toString());   
   break;		
case "Proposed Dividends":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Proposed Dividends",CreditItem.get(4).toString());     
    break;		
case "Other Provisions":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);      
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Provisions",CreditItem.get(4).toString()); 
   break;		
case "Secured Loan From Financial Institutions":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Loan From Financial Institutions",CreditItem.get(4).toString());   
   break;		
case "Secured Other Loans":
    
  end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Other Loans",CreditItem.get(4).toString());    
    break;		
case "Debt Securities Issued":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Debt Securities Issued",CreditItem.get(4).toString());    
    break;		
case "Secured Due To Related Parties":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Due To Related Parties",CreditItem.get(4).toString());  
   break;		
case "Unsecured Loan From Financial Institutions":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Loan From Financial Institutions",CreditItem.get(4).toString());  
   break;		
case "Unsecured Other Loans":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Other Loans",CreditItem.get(4).toString());  
   break;		
case "Payables For More Than One Operating Cycle":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Payables For More Than One Operating Cycle",CreditItem.get(4).toString());   
    break;		
case "Creditors For More Than One Operating Cycle":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Creditors For More Than One Operating Cycle",CreditItem.get(4).toString());   
   break;		
case "Unsecured Due To Related Parties":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Due To Related Parties",CreditItem.get(4).toString()); 
    break;		
case "Deferred Tax Liability":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Deferred Tax Liability",CreditItem.get(4).toString()); 
    break;	
case "Sales":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Sales",CreditItem.get(4).toString()); 
   break;		
case "Gross Interest Income":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Interest Income",CreditItem.get(4).toString()); 
   break;		
case "Gross Receipt Of Profession Fees":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Receipt Of Profession Fees",CreditItem.get(4).toString());  
    break;		
case "Gross Receipt Of Consultancy Fees":
    
 end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Receipt Of Consultancy Fees",CreditItem.get(4).toString()); 
    break;		
case "Ledger Fee":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Ledger Fee",CreditItem.get(4).toString()); 
   break;		
case "Savings Withdraw Charges":
    
end=  updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Savings Withdraw Charges",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Interest Recovered":
    
 end=  updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Interest Recovered",CreditItem.get(4).toString()); 
   break;		
case "Admin Costs":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Admin Costs",CreditItem.get(4).toString()); 
   break;		
case "Charges":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Charges",CreditItem.get(4).toString()); 
    break;		
case "Membership Fees":
    
 end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Membership Fees",CreditItem.get(4).toString()); 
   break;		
case "Loan Insurance Charges":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Insurance Charges",CreditItem.get(4).toString()); 
   break;		
case "Accumulated Interest Income":
    
  end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Interest Income",CreditItem.get(4).toString()); 
    break;		
case "Loan Surcharge":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Surcharge",CreditItem.get(4).toString()); 
   break;		
case "Commission And Fees":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Commission And Fees",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Principal RecoveredX":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",CreditItem.get(4).toString()); 
   break;		
case "Loan Processing Fees":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Processing Fees",CreditItem.get(4).toString()); 
   break;		
case "Annual Subscription Fees":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Annual Subscription Fees",CreditItem.get(4).toString()); 
    break;		
case "Provision For Bad And Doubtful Debts":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Recovered":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Recovered",CreditItem.get(4).toString()); 
   break;
   case "Savings Penalties":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
 break;
   case "Other Incomes":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
 break;
case "Gross Amount Received":
    
 end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Amount Received",CreditItem.get(4).toString()); 
    break;		
case "Amount Recovered":
    
 end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Amount Recovered",CreditItem.get(4).toString()); 
    break;		
case "Reserve For Unexpired Risk Brought From Previous Year Of Income":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Reserve For Unexpired Risk Brought From Previous Year Of Income",CreditItem.get(4).toString()); 
   break;		
case "Other Purely Short Term Insurance Income":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Purely Short Term Insurance Income",CreditItem.get(4).toString()); 
   break;		
case "Any Other Income":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Any Other Income",CreditItem.get(4).toString()); 
    break;		
case "Issued, Subscribed And Paid Up Capital":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Issued, Subscribed And Paid Up Capital",CreditItem.get(4).toString()); 
   break;		
case "Additional Issued Share Capital":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Additional Issued Share Capital",CreditItem.get(4).toString()); 
   break;		
case "Education Fund 1%":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Education Fund 1%",CreditItem.get(4).toString()); 
    break;		
case "Capital Reserve":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Capital Reserve",CreditItem.get(4).toString()); 
   break;		
case "Education Fund":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Education Fund",CreditItem.get(4).toString()); 
   break;		
case "Statutory Reserve Fund 10%":
    
 end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Statutory Reserve Fund 10%",CreditItem.get(4).toString()); 
   break;		
case "Revaluation Reserve":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Revaluation Reserve",CreditItem.get(4).toString()); 
   break;		
case "Co-Operative Development Fund":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Co-Operative Development Fund",CreditItem.get(4).toString()); 
    break;		
case "Retained Earnings":
 end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Retained Earnings",CreditItem.get(4).toString()); 
    
    break;		
case "Accumulated Profit Or Loss Or Surplus Or Deficit":
    
 end=updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Profit Or Loss Or Surplus Or Deficit",CreditItem.get(4).toString()); 
    break;		
case "General Reserve":
    
end= updateAccountCredit1(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"General Reserve",CreditItem.get(4).toString()); 
   break;		
                case "Opening Stock Of Raw Materials":
                    
end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                 
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Raw Materials",CreditItem.get(4).toString());           
                    break;		
              case "Opening Stock Of Work In Progress":
                  
    end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);       
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Work In Progress",CreditItem.get(4).toString());             
     break;		
           case "Opening Stock Of Trading Goods":
               
  end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Trading Goods",CreditItem.get(4).toString());         
     break;		
         case "Opening Stock Of Manufactured Goods":
             
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Manufactured Goods",CreditItem.get(4).toString());         
     break;		
       case "Local Purchases Net Of Duties And Taxes":
           
    end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Local Purchases Net Of Duties And Taxes",CreditItem.get(4).toString());    
     break;		
        case "Imports CIF Value And Taxes":
            
  end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);          
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Imports CIF Value And Taxes",CreditItem.get(4).toString());       
            break;		
       case "Direct Wages":
           
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Direct Wages",CreditItem.get(4).toString());     
     break;		
        case "Interest Expenses":
            
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);          
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Expenses",CreditItem.get(4).toString());       
     break;		
      case "Direct Expenses":
          
 end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);       
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Direct Expenses",CreditItem.get(4).toString());  
     break;		
       case "Factory Rent":
           
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Factory Rent",CreditItem.get(4).toString());     
     break;		
      case "Factory Rates":
          
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);        
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Factory Rates",CreditItem.get(4).toString());    
     break;		
     case "Fuel And Power":
         
  end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fuel And Power",CreditItem.get(4).toString());    
         break;		
               case "Indirect Wages":
                   
 end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);              
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Indirect Wages",CreditItem.get(4).toString());              
                   break;		
               case "Consumables":
                   
 end=     updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);               
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Consumables",CreditItem.get(4).toString());            
     break;		
               case "Depreciation":
                   
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Depreciation",CreditItem.get(4).toString());              
                   break;		
               case "Other Factory Overheads":
                   
  end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Factory Overheads",CreditItem.get(4).toString());               
     break;		
               case "Closing Stock Of Raw Materials":
                   
 end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);             
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Raw Materials",CreditItem.get(4).toString());             
     break;		
               case "Closing Stock Of Work In Progress":
                   
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Work In Progress",CreditItem.get(4).toString());             
     break;		
               case "Closing Stock Of Manufactured Goods":
                   
end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                 
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Manufactured Goods",CreditItem.get(4).toString());             
                   break;		
               case "Closing Stock Of Trading Goods":
                   
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Trading Goods",CreditItem.get(4).toString());           
     break;		
     case "Advertisement Expense":
         
  end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Advertisement Expense",CreditItem.get(4).toString());  
     break;		
     case "Audit Expenses":
         
  end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Audit Expenses",CreditItem.get(4).toString());
     break;		
     case "Bad Debts Written Off":
         
  end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);         
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Written Off",CreditItem.get(4).toString()); 
     break;		
     case "Commission":
         
 end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Commission",CreditItem.get(4).toString());  
         break;		
     case "Computer Soft And Hardware Expenses":
         
  end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computer Soft And Hardware Expenses",CreditItem.get(4).toString());  
         break;		
     case "Maintainance of Office Equipment":
         
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Maintainance of Office Equipment",CreditItem.get(4).toString());
         break;		
     case "News Papers And Periodicals":
         
  end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//  updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"News Papers And Periodicals",CreditItem.get(4).toString());  
     break;		
     case "Donations":
         
    end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Donations",CreditItem.get(4).toString()); 
         break;	
     case "Entertainment And Refreshments":
         
    end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Entertainment And Refreshments",CreditItem.get(4).toString());  
     break;		
     case "Freight And Transport":
         
  end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Freight And Transport",CreditItem.get(4).toString());   
     break;		
     case "Air Time Allowance":
         
   end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Air Time Allowance",CreditItem.get(4).toString());
         break;		
     case "Hotel, Boarding And Lodging Expenses":
         
 end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Hotel, Boarding And Lodging Expenses",CreditItem.get(4).toString());  
         break;		
     case "Legal Expenses":
         
 end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Legal Expenses",CreditItem.get(4).toString());
     break;		
     case "Fuel":
         
 end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fuel",CreditItem.get(4).toString());
         break;		
     case "Utilities Expenses":
  end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Utilities Expenses",CreditItem.get(4).toString());
         break;		
     case "Provision For Bad And Doubtful Debts Expense":
         
 end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts Expense",CreditItem.get(4).toString()); 
         break;		
     case "Rent Expense":
         
end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Rent Expense",CreditItem.get(4).toString()); 
     break;		
     case "Bad Debts Expense":
         
 end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Expense",CreditItem.get(4).toString());  
         break;		
     case "Car Maintainance And Repairs":
         
 end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Car Maintainance And Repairs",CreditItem.get(4).toString());   
         break;		
     case "Provision for Depreciation":
         
  end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Provision for Depreciation",CreditItem.get(4).toString()); 
         break;		
     case "Office Maintainance Expense":
         
  end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Office Maintainance Expense",CreditItem.get(4).toString());   
         break;		
     case "Consultancy":
         
  end=     updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Consultancy",CreditItem.get(4).toString());   
         
         break;		
     case "Loan Recovery Expenses":
         
    end=     updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loan Recovery Expenses",CreditItem.get(4).toString());
         break;		
     case "Stationery And Printing":
         
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Stationery And Printing",CreditItem.get(4).toString()); 
         break;	
         case "Compliance And Regulatory Expenses":
         
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Compliance And Regulatory Expenses",CreditItem.get(4).toString()); 
         break;	   
         
         
     case "Lunch Allowance":
         
    end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lunch Allowance",CreditItem.get(4).toString()); 
     break;		
     case "Telephone And Internet":
         
   end=     updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Telephone And Internet",CreditItem.get(4).toString()); 
         break;		
     case "Training Expenditure":
         
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Training Expenditure",CreditItem.get(4).toString()); 
         
         break;		
     case "Lincenses And Permits":
         
 end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lincenses And Permits",CreditItem.get(4).toString());
         break;		
     case "Parking And Security":
         
   end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Parking And Security",CreditItem.get(4).toString());
         break;	
          case  "Caveat Charges":
         
   end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Parking And Security",CreditItem.get(4).toString());
         break;	
         
        
     case "Depreciation Expense":
         
   end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Depreciation Expense",CreditItem.get(4).toString());
     break;		
     case "Loss On Disposal Of Assets":
         
    end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loss On Disposal Of Assets",CreditItem.get(4).toString()); 
         break;		
     case "Management Fees":
         
   end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Management Fees",CreditItem.get(4).toString());
     break;		
     case "AGM Expenses":
         
  end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"AGM Expenses",CreditItem.get(4).toString());
     break;
     
     case "Loans Committee Expenses":
         
  end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans Committee Expenses",CreditItem.get(4).toString());
     break;
     
      case "Admin Expenses":
         
  end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Admin Expenses",CreditItem.get(4).toString());
     break;
     
      case "Salaries And Wages":
          
   end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Salaries And Wages",CreditItem.get(4).toString());
          
          break;		
      case "Bonus":
          
     end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//     updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bonus",CreditItem.get(4).toString());
     break;		
      case "PAYEE":
          
    end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"PAYEE",CreditItem.get(4).toString()); 
          break;		
      case "Board Sitting Allowances":
          
  end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Board Sitting Allowances",CreditItem.get(4).toString());
          break;		
      case "Employee Allowances":
          
      end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//      updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Employee Allowances",CreditItem.get(4).toString()); 
          break;		
      case "Directors Allowances":
          
   end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Directors Allowances",CreditItem.get(4).toString()); 
          break;		
      case "Contribution To Retirement Fund":
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Contribution To Retirement Fund",CreditItem.get(4).toString());
          break;
          
      case "Medical Allowance":
   end=    updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Medical Allowance",CreditItem.get(4).toString());
          break;		
      case "NSSF Contributions":
          
    end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;
      case "Festive Allowance":
          
    end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break; 
          
       case "Employee Welfare":
          
    end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;     
          
    case "Interest Expense":
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Expense",CreditItem.get(4).toString());
        break;		
    case "Bank Charges":
        
    end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bank Charges",CreditItem.get(4).toString());
        break;		
    case "Start Up Expenses":
        
  end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Start Up Expenses",CreditItem.get(4).toString());
        break;		
    case "Lending License":
        
    end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lending License",CreditItem.get(4).toString());
     break;		
    case "Company Stamps":
        
   end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Company Stamps",CreditItem.get(4).toString());
     break;		
    case "Unrealized Exchange Loss":
        
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",CreditItem.get(4).toString());
        break;	
        
         case "Return On Investment Expense":
        
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Expense",CreditItem.get(4).toString());
        break;	
    case "Claims Admitted During The Year":
        
   end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Claims Admitted During The Year",CreditItem.get(4).toString());
        break;		
    case "Premiums Returned To Insured":
        
   end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);        
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Premiums Returned To Insured",CreditItem.get(4).toString());
        
        break;		
    case "Reserves For Unexpired Risk Carried Forward":
        
    end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Reserves For Unexpired Risk Carried Forward",CreditItem.get(4).toString());
     break;		
    case "Agency Expenses":
        
  end=  updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Agency Expenses",CreditItem.get(4).toString());
        break;		
    case "Other Expenses Related To Short Term Business":
        
    end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Expenses Related To Short Term Business",CreditItem.get(4).toString()); 
        break;	
        
         
  case "Income Tax Expense":
      
    end=   updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Income Tax Expense",CreditItem.get(4).toString());
     break;		
  case "Dividends paid during the Operating period":
      
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Dividends paid during the Operating period",CreditItem.get(4).toString());
      break;		
  case  "Retained earnings at start of Operating period":
      
 end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Retained earnings at start of Operating period",CreditItem.get(4).toString()); 
      break;
  case  "Restatement of retained earnings for corrections of previous period errors":
      
 end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Restatement of retained earnings for corrections of previous period errors",CreditItem.get(4).toString()); 
      break;    
      
    case  "Restatement of retained earnings for changes in accounting policies":
      
 end= updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Restatement of retained earnings for changes in accounting policies",CreditItem.get(4).toString()); 
      break;   
      
  case "General expense":
      
end=updateAccountCredit1(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"General expense",CreditItem.get(4).toString());
      break;
 
    }

   return end;
  
 }
  
  
public boolean debitSave(List debitItem,Component c){
  boolean end=false;
   
  
//     JOptionPane.showMessageDialog(c, debitItem.get(0).toString()+";\n"+debitItem.get(1).toString()+";\n"+debitItem.get(2).toString()+";\n"+debitItem.get(3).toString()+";\n"+debitItem.get(4).toString()+";\n"+debitItem.get(5).toString()+";\n"+debitItem.get(6).toString()+";\n"+debitItem.get(7).toString()+";\n"+debitItem.get(8).toString()+";\n"+debitItem.get(9).toString()+";\n"+debitItem.get(10).toString()+";\n"+debitItem.get(11).toString());
      
      String accountNumber=fmt.formatAccountWithSeperators(debitItem.get(0).toString());
       if("01128000110".equalsIgnoreCase(accountNumber)){
          
      this.updateDailyReportPrincimpalWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      }
      
      
       if("03301000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportInterestWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      }
       
       if("03311000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportAccumulatedInterestWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      } 
      
          if("03312000110".equalsIgnoreCase(accountNumber)){
              
      this.updateDailyReportLoanPenaltyWriteOff(fmt.formatAccountWithSeperators(debitItem.get(6).toString()), debitItem.get(5).toString());
      
      } 
//      JOptionPane.showMessageDialog(c, accountNumber);
//          fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test3"+accountNumber+".txt"), debitItem.get(4).toString());
    String selection3=accountCategory(accountNumber);
//    fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),selection3); 
  String balance= accountBalance(accountNumber,debitItem.get(4).toString());
//fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test"+accountNumber+".txt"), balance);
    switch(selection3){
    
        case "Land & Building":
            
 end=  updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
// updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Land & Building",debitItem.get(4).toString());  
     
            break;
            
case "Office Equipment":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Office Equipment",debitItem.get(4).toString()); 
   break;		
case "Motor Vehicles":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Motor Vehicles",debitItem.get(4).toString()); 
   break;		
case "Furniture, Fixtures & Fittings":
    
    end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Furniture, Fixtures & Fittings",debitItem.get(4).toString());  
    break;		
case "Computers And Accessories":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computers And Accessories",debitItem.get(4).toString());  
    break;		
case "Other Fixed Assets":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Fixed Assets",debitItem.get(4).toString()); 
    
   break;		
case "Intangible Assets":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Intangible Assets",debitItem.get(4).toString()); 
   break;		
case "Accumulated Depreciation/Amortization":
     end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",debitItem.get(4).toString()); 
    
    
    
    
    
//  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet");
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",debitItem.get(4).toString()); 
   break;		
case "Shares":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Shares",debitItem.get(4).toString()); 
   break;		
case "Debentures":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Debentures",debitItem.get(4).toString()); 
   break;		
case "Fixed Deposits":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fixed Deposits",debitItem.get(4).toString()); 
   break;		
case "Government Securities":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Government Securities",debitItem.get(4).toString()); 
   break;		
case "Other Investments":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Investments",debitItem.get(4).toString()); 
   break;		
case "Stores/Consumables Including Packing Materials":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Stores/Consumables Including Packing Materials",debitItem.get(4).toString()); 
   break;		
case "Raw Materials":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Raw Materials",debitItem.get(4).toString()); 
   break;		
case "Work-In-Progress":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Work-In-Progress",debitItem.get(4).toString()); 
   break;		
case "Finished Goods Or Trade Goods":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Finished Goods Or Trade Goods",debitItem.get(4).toString()); 
   break;		
case "Trade Receivables":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Trade Receivables",debitItem.get(4).toString()); 
   break;	
 case "Debtors":
     
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Debtors",debitItem.get(4).toString()); 
   break;
    case "Computer Software And Hardware":
     
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computer Software And Hardware",debitItem.get(4).toString()); 
   break;
   	
case "Interest Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Receivable",debitItem.get(4).toString()); 
   break;
   case "Accounts Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accounts Receivable",debitItem.get(4).toString()); 
   break;
   case "Accumulated Interest Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Interest Receivable",debitItem.get(4).toString()); 
   break;
   case "Loan Penalty Receivable":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loan Penalty Receivable",debitItem.get(4).toString()); 
   break;
    case "Allowance for Doubtful Accounts":
    
  end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Allowance for Doubtful Accounts",debitItem.get(4).toString()); 
     break;
     case "Allowance for Doubtful Interest":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//  updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Allowance for Doubtful Interest",debitItem.get(4).toString()); 
     break;
case "Prepayments":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Prepayments",debitItem.get(4).toString()); 
   break;		
case "Mobile Money":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Mobile Money",debitItem.get(4).toString()); 
   break;		
case "Bank Balance":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bank Balance",debitItem.get(4).toString()); 
   break;		
case "Cash At Hand":
  
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Cash At Hand",debitItem.get(4).toString()); 
   break;		
case "Cash Equivalents":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Cash Equivalents",debitItem.get(4).toString()); 
   break;		
 case "Loans To Related Parties":
     
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans To Related Parties",debitItem.get(4).toString()); 
   break;		
case "Advances To Staff":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Advances To Staff",debitItem.get(4).toString()); 
   break;	
case "Deposits (Other Than Fixed Deposit)":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Deposits (Other Than Fixed Deposit)",debitItem.get(4).toString()); 
    break;
case "Loans To Customers":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans To Customers",debitItem.get(4).toString()); 
   break;		
case "Balances With Tax Authority":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Balances With Tax Authority",debitItem.get(4).toString()); 
   break;		
case "Deferred Tax Asset":
    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Deferred Tax Asset",debitItem.get(4).toString()); 
   break;
    
case "Accounts Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accounts Payable",debitItem.get(4).toString());  
 break;		
case "Uknown Mobile Money":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Uknown Mobile Money",debitItem.get(4).toString()); 
 break;		
case "Customer Deposits":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Customer Deposits",debitItem.get(4).toString()); 
 break;		
case "Liability For Leased Assets":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Liability For Leased Assets",debitItem.get(4).toString()); 
 break;		
case "Accrued Interest":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accrued Interest",debitItem.get(4).toString()); 
 break;		
case "Amounts Due To Others":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Amounts Due To Others",debitItem.get(4).toString()); 
 break;		
case "Unpaid Matured Debts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unpaid Matured Debts",debitItem.get(4).toString()); 
 break;		
case "Other Current Liabilities":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Current Liabilities",debitItem.get(4).toString());   
 break;	
 case "Return On Investment Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;
  case "Insurance Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;
  case "Interest Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;
  case "Tax Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;
  case "PAYE Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;
  case "NSSF Payable":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Payable",debitItem.get(4).toString());   
 break;
   
    

  case "Unclassified Amounts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unclassified Amounts",debitItem.get(4).toString());   
 break;
 
case "Provision For Income Tax":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Income Tax",debitItem.get(4).toString()); 
 break;		
case "Provision For Bad Debts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad Debts",debitItem.get(4).toString()); 
 break;		
case "Proposed Dividends":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Proposed Dividends",debitItem.get(4).toString());  
 
 break;		
case "Other Provisions":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Provisions",debitItem.get(4).toString()); 
 break;		
case "Secured Loan From Financial Institutions":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Loan From Financial Institutions",debitItem.get(4).toString()); 
 break;		
case "Secured Other Loans":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Other Loans",debitItem.get(4).toString());  
 break;		
case "Debt Securities Issued":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Debt Securities Issued",debitItem.get(4).toString());  
 break;		
case "Secured Due To Related Parties":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Secured Due To Related Parties",debitItem.get(4).toString()); 
 break;		
case "Unsecured Loan From Financial Institutions":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Loan From Financial Institutions",debitItem.get(4).toString()); 
 break;		
case "Unsecured Other Loans":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Other Loans",debitItem.get(4).toString()); 
 break;		
case "Payables For More Than One Operating Cycle":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Payables For More Than One Operating Cycle",debitItem.get(4).toString());  
 break;		
case "Creditors For More Than One Operating Cycle":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Creditors For More Than One Operating Cycle",debitItem.get(4).toString()); 
 break;		
case "Unsecured Due To Related Parties":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Unsecured Due To Related Parties",debitItem.get(4).toString()); 
 break;		
case "Deferred Tax Liability":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Deferred Tax Liability",debitItem.get(4).toString()); 
 break;	
case "Sales":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Sales",debitItem.get(4).toString()); 
 break;		
case "Gross Interest Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Interest Income",debitItem.get(4).toString()); 
 break;		
case "Gross Receipt Of Profession Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Receipt Of Profession Fees",debitItem.get(4).toString());  
 break;		
case "Gross Receipt Of Consultancy Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Receipt Of Consultancy Fees",debitItem.get(4).toString());  
 break;		
case "Ledger Fee":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Ledger Fee",debitItem.get(4).toString()); 
 break;		
case "Savings Withdraw Charges":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Savings Withdraw Charges",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Interest Recovered":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Interest Recovered",debitItem.get(4).toString()); 
 break;		
case "Admin Costs":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Admin Costs",debitItem.get(4).toString()); 
 break;		
case "Charges":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Charges",debitItem.get(4).toString());  
 break;		
case "Membership Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Membership Fees",debitItem.get(4).toString()); 
 break;		
case "Loan Insurance Charges":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Insurance Charges",debitItem.get(4).toString()); 
 break;		
case "Accumulated Interest Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Interest Income",debitItem.get(4).toString()); 
 
 break;		
case "Loan Surcharge":
    
    end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
//    updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Surcharge",debitItem.get(4).toString()); 
 break;		
case "Commission And Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Commission And Fees",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Principal RecoveredX":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",debitItem.get(4).toString()); 
 break;	
 
 case "Bad Debts Principal Recovered":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Principal Recovered",debitItem.get(4).toString()); 
 break;	
 
case "Loan Processing Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Loan Processing Fees",debitItem.get(4).toString()); 
 break;		
case "Annual Subscription Fees":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Annual Subscription Fees",debitItem.get(4).toString()); 
 break;		
case "Provision For Bad And Doubtful Debts":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts",debitItem.get(4).toString()); 
 break;		
case "Bad Debts Recovered":
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Recovered",debitItem.get(4).toString()); 
 break;	
 case "Savings Penalties":
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Recovered",debitItem.get(4).toString()); 
 break;	
 case "Other Incomes":
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Recovered",debitItem.get(4).toString()); 
 break;	
case "Gross Amount Received":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Gross Amount Received",debitItem.get(4).toString()); 
 break;		
case "Amount Recovered":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Amount Recovered",debitItem.get(4).toString()); 
 break;		
case "Reserve For Unexpired Risk Brought From Previous Year Of Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Reserve For Unexpired Risk Brought From Previous Year Of Income",debitItem.get(4).toString()); 
 break;		
case "Other Purely Short Term Insurance Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Other Purely Short Term Insurance Income",debitItem.get(4).toString()); 
 break;		
case "Any Other Income":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Any Other Income",debitItem.get(4).toString());  
 break;		
case "Issued, Subscribed And Paid Up Capital":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Issued, Subscribed And Paid Up Capital",debitItem.get(4).toString()); 
 break;		
case "Additional Issued Share Capital":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Additional Issued Share Capital",debitItem.get(4).toString()); 
 break;		
case "Education Fund 1%":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber, "Education Fund 1%",debitItem.get(4).toString()); 
 break;		
case "Capital Reserve":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Capital Reserve",debitItem.get(4).toString()); 
 break;		
case "Education Fund":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Education Fund",debitItem.get(4).toString()); 
 break;		
case "Statutory Reserve Fund 10%":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);   
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Statutory Reserve Fund 10%",debitItem.get(4).toString()); 
 break;		
case "Revaluation Reserve":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber); 
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Revaluation Reserve",debitItem.get(4).toString()); 
 break;		
case "Co-Operative Development Fund":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Co-Operative Development Fund",debitItem.get(4).toString()); 
 break;		
case "Retained Earnings":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Retained Earnings",debitItem.get(4).toString());   
    break;		
case "Accumulated Profit Or Loss Or Surplus Or Deficit":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);    
//  updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"Accumulated Profit Or Loss Or Surplus Or Deficit",debitItem.get(4).toString()); 
 break;		
case "General Reserve":
    
 end= updateAccountDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber,"debitLiabiil",c);
// updateGeneralLedgerDebit(debitItem, debitLiability(balance, debitItem.get(5).toString()),accountNumber);
// updateStore1(debitLiability(balance, debitItem.get(5).toString()),accountNumber);  
// updateMasterDebit(debitLiability(balance, debitItem.get(5).toString()),accountNumber,"General Reserve",debitItem.get(4).toString()); 
 break;		
                case "Opening Stock Of Raw Materials":
                    
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                    
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Raw Materials",debitItem.get(4).toString());                 
   
   break;		
              case "Opening Stock Of Work In Progress":
                  
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);              
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Work In Progress",debitItem.get(4).toString());  
   break;		
           case "Opening Stock Of Trading Goods":
               
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);           
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Trading Goods",debitItem.get(4).toString());  
   break;		
         case "Opening Stock Of Manufactured Goods":
             
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Opening Stock Of Manufactured Goods",debitItem.get(4).toString());  
   break;		
       case "Local Purchases Net Of Duties And Taxes":
           
    end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//    updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Local Purchases Net Of Duties And Taxes",debitItem.get(4).toString());        
   break;		
        case "Imports CIF Value And Taxes":
            
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);            
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Imports CIF Value And Taxes",debitItem.get(4).toString());        
   break;		
       case "Direct Wages":
           
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);       
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Direct Wages",debitItem.get(4).toString());  
   break;		
        case "Interest Expenses":
            
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Expenses",debitItem.get(4).toString());  
   break;		
      case "Direct Expenses":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Direct Expenses",debitItem.get(4).toString());  
   break;		
       case "Factory Rent":
           
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Factory Rent",debitItem.get(4).toString());  
   break;		
      case "Factory Rates":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber, "Factory Rates",debitItem.get(4).toString());  
   break;		
     case "Fuel And Power":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fuel And Power",debitItem.get(4).toString());    
   break;		
               case "Indirect Wages":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Indirect Wages",debitItem.get(4).toString());               
   break;		
               case "Consumables":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Consumables",debitItem.get(4).toString());  
   break;		
               case "Depreciation":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Depreciation",debitItem.get(4).toString());                
   break;		
               case "Other Factory Overheads":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Factory Overheads",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Raw Materials":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Raw Materials",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Work In Progress":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Work In Progress",debitItem.get(4).toString());  
   break;		
               case "Closing Stock Of Manufactured Goods":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//   updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);                   
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Manufactured Goods",debitItem.get(4).toString());                
   break;		
               case "Closing Stock Of Trading Goods":
                   
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Closing Stock Of Trading Goods",debitItem.get(4).toString());  
   break;		
     case "Advertisement Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Advertisement Expense",debitItem.get(4).toString());  
   break;		
     case "Audit Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Audit Expenses",debitItem.get(4).toString());  
   break;		
     case "Bad Debts Written Off":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Written Off",debitItem.get(4).toString());  
   break;		
     case "Commission":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Commission",debitItem.get(4).toString());    
   break;		
     case "Computer Soft And Hardware Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Computer Soft And Hardware Expenses",debitItem.get(4).toString());      
   break;		
     case "Maintainance of Office Equipment":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Maintainance of Office Equipment",debitItem.get(4).toString());    
   break;		
     case "News Papers And Periodicals":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"News Papers And Periodicals",debitItem.get(4).toString());  
   break;		
     case "Donations":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Donations",debitItem.get(4).toString());     
   break;	
     case "Entertainment And Refreshments":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Entertainment And Refreshments",debitItem.get(4).toString());  
   break;		
     case "Freight And Transport":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Freight And Transport",debitItem.get(4).toString());  
   break;		
     case "Air Time Allowance":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Air Time Allowance",debitItem.get(4).toString());    
   break;		
     case "Hotel, Boarding And Lodging Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Hotel, Boarding And Lodging Expenses",debitItem.get(4).toString());    
   break;		
     case "Legal Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);     
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Legal Expenses",debitItem.get(4).toString());  
   break;		
     case "Fuel":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Fuel",debitItem.get(4).toString());       
   break;		
     case "Utilities Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Utilities Expenses",debitItem.get(4).toString());     
   break;		
     case "Provision For Bad And Doubtful Debts Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts Expense",debitItem.get(4).toString());      
   break;		
     case "Rent Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Rent Expense",debitItem.get(4).toString());  
   break;		
     case "Bad Debts Expense":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bad Debts Expense",debitItem.get(4).toString());      
   break;		
     case "Car Maintainance And Repairs":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Car Maintainance And Repairs",debitItem.get(4).toString());      
   break;		
     case "Provision for Depreciation":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Provision for Depreciation",debitItem.get(4).toString());   
   break;		
     case "Office Maintainance Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Office Maintainance Expense",debitItem.get(4).toString());      
   break;		
     case "Consultancy":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Consultancy",debitItem.get(4).toString());       
         break;		
     case "Loan Recovery Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loan Recovery Expenses",debitItem.get(4).toString());      
   break;		
     case "Lunch Allowance":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lunch Allowance",debitItem.get(4).toString());     
   break;	
     case "Subsistence Allowance":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Subsistence Allowance",debitItem.get(4).toString());  
   break;		
     case "Telephone And Internet":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Telephone And Internet",debitItem.get(4).toString());     
   break;		
     case "Training Expenditure":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Training Expenditure",debitItem.get(4).toString());        
         break;		
     case "Lincenses And Permits":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lincenses And Permits",debitItem.get(4).toString());     
   break;		
     case "Parking And Security":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Parking And Security",debitItem.get(4).toString());  
         break;		
            case   "Caveat Charges":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Parking And Security",debitItem.get(4).toString());  
         break;	
        
     case "Depreciation Expense":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Depreciation Expense",debitItem.get(4).toString());  
   break;		
     case "Loss On Disposal Of Assets":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);         
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loss On Disposal Of Assets",debitItem.get(4).toString());       
   break;		
     case "Management Fees":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Management Fees",debitItem.get(4).toString());  
   break;		
     case "AGM Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"AGM Expenses",debitItem.get(4).toString());  
   break;
      case "Loans Committee Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Loans Committee Expenses",debitItem.get(4).toString());  
   break;
      case "Admin Expenses":
         
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Admin Expenses",debitItem.get(4).toString());  
   break;
   
   
    
      case "Salaries And Wages":
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Salaries And Wages",debitItem.get(4).toString());       
          break;
          
      case "Bonus":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bonus",debitItem.get(4).toString());  
   break;		
      case "PAYEE":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"PAYEE",debitItem.get(4).toString());        
   break;		
      case "Board Sitting Allowances":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Board Sitting Allowances",debitItem.get(4).toString());        
   break;		
      case "Employee Allowances":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Employee Allowances",debitItem.get(4).toString());      
   
   break;		
      case "Directors Allowances":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Directors Allowances",debitItem.get(4).toString());       
   break;		
      case "Contribution To Retirement Fund":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Contribution To Retirement Fund",debitItem.get(4).toString());       
   break;
          
      case "Medical Allowance":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);          
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Medical Allowance",debitItem.get(4).toString());      
   break;
   
   
      case "NSSF Contributions":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"NSSF Contributions",debitItem.get(4).toString());  
   break;
   
        case "Festive Allowance":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"NSSF Contributions",debitItem.get(4).toString());  
   break;
      case "Employee Welfare":
          
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"NSSF Contributions",debitItem.get(4).toString());  
   break;
   
    case "Interest Expense":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Interest Expense",debitItem.get(4).toString());    
   break;		
    case "Bank Charges":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Bank Charges",debitItem.get(4).toString());     
   break;		
    case "Start Up Expenses":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Start Up Expenses",debitItem.get(4).toString());    
   break;		
    case "Lending License":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);  
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Lending License",debitItem.get(4).toString()); 
   break;		
    case "Company Stamps":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);    
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Company Stamps",debitItem.get(4).toString()); 
   break;		
    case "Unrealized Exchange Loss":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",debitItem.get(4).toString());     
   break;
     case "Return On Investment Expense":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Return On Investment Expense",debitItem.get(4).toString());     
   break;
    case "Claims Admitted During The Year":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Claims Admitted During The Year",debitItem.get(4).toString());    
   break;		
    case "Premiums Returned To Insured":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Premiums Returned To Insured",debitItem.get(4).toString());     
        break;		
    case "Reserves For Unexpired Risk Carried Forward":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber); 
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Reserves For Unexpired Risk Carried Forward",debitItem.get(4).toString()); 
   break;		
    case "Agency Expenses":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Agency Expenses",debitItem.get(4).toString());    
   break;		
    case "Other Expenses Related To Short Term Business":
        
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);        
//     updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Other Expenses Related To Short Term Business",debitItem.get(4).toString());   
   break;
    
  case "Income Tax Expense":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);   
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Income Tax Expense",debitItem.get(4).toString()); 
   break;		
  case "Dividends paid during the Operating period":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//   updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Dividends paid during the Operating period",debitItem.get(4).toString());  
   break;		
  case "Retained earnings at start of Operating period":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Retained earnings at start of Operating period",debitItem.get(4).toString());  
   break;
    case "Restatement of retained earnings for corrections of previous period errors":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Restatement of retained earnings for corrections of previous period errors",debitItem.get(4).toString());  
   break;
    case "Restatement of retained earnings for changes in accounting policies":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"Restatement of retained earnings for changes in accounting policies",debitItem.get(4).toString());  
   break;
  case "General expense":
      
  end=updateAccountDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber,"debitAseet",c);
//  updateGeneralLedgerDebit(debitItem, debitAsset(balance, debitItem.get(5).toString()),accountNumber);
//   updateStore1(debitAsset(balance, debitItem.get(5).toString()),accountNumber);      
//    updateMasterDebit(debitAsset(balance, debitItem.get(5).toString()),accountNumber,"General expense",debitItem.get(4).toString());  
   break;
 

 }
 
    
    
  return end;
  
 }
 
  public boolean creditSave(List CreditItem,Component c) {
//   JOptionPane.showMessageDialog(c, CreditItem.get(0).toString()+";\n"+CreditItem.get(1).toString()+";\n"+CreditItem.get(2).toString()+";\n"+CreditItem.get(3).toString()+";\n"+CreditItem.get(4).toString()+";\n"+CreditItem.get(5).toString()+";\n"+CreditItem.get(6).toString()+";\n"+CreditItem.get(7).toString()+";\n"+CreditItem.get(8).toString()+";\n"+CreditItem.get(9).toString()+";\n"+CreditItem.get(10).toString()+";\n"+CreditItem.get(11).toString());
             
      boolean end=false;
 
      String accountNumber=fmt.formatAccountWithSeperators(CreditItem.get(0).toString());
      
      if("01128000110".equalsIgnoreCase(accountNumber)){
          
      this.updateDailyReportPrincimpal(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      }
      
      
       if("03301000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportInterest(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      }
       
       if("03311000110".equalsIgnoreCase(accountNumber)){
           
      this.updateDailyReportAccumulatedInterest(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      } 
      
          if("03312000110".equalsIgnoreCase(accountNumber)){
              
      this.updateDailyReportLoanPenalty(fmt.formatAccountWithSeperators(CreditItem.get(6).toString()), CreditItem.get(5).toString());
      
      } 
      
//      JOptionPane.showMessageDialog(c, accountNumber);
      
      
    String selection3=accountCategory(accountNumber);
//    fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test3"+accountNumber+".txt"), CreditItem.get(4).toString());
  String balance= accountBalance(accountNumber,CreditItem.get(4).toString());
//fios.stringFileWriter(fios.createFileName("accountManagement","masterAccounts","test"+accountNumber+".txt"), balance);
// fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),selection3);
  switch(selection3){
    
        case "Land & Building":
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Land & Building",CreditItem.get(4).toString());         
            break;
            
case "Office Equipment":
  
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Office Equipment",CreditItem.get(4).toString()); 
     break;		
case "Motor Vehicles":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Motor Vehicles",CreditItem.get(4).toString()); 
     break;		
case "Furniture, Fixtures & Fittings":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Furniture, Fixtures & Fittings",CreditItem.get(4).toString()); 
    break;		
case "Computers And Accessories":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computers And Accessories",CreditItem.get(4).toString()); 
    
    break;		
case "Other Fixed Assets":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Fixed Assets",CreditItem.get(4).toString()); 
    break;		
case "Intangible Assets":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Intangible Assets",CreditItem.get(4).toString()); 
    break;		
case "Accumulated Depreciation/Amortization":
     end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",CreditItem.get(4).toString());     
    
    
//end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet"); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Depreciation/Amortization",CreditItem.get(4).toString()); 
     break;		
case "Shares":
    
  end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Shares",CreditItem.get(4).toString()); 
    break;		
case "Debentures":
updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Debentures",CreditItem.get(4).toString()); 
    break;		
case "Fixed Deposits": 
    
   end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fixed Deposits",CreditItem.get(4).toString()); 
     break;		
case "Government Securities":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Government Securities",CreditItem.get(4).toString()); 
    break;		
case "Other Investments":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Investments",CreditItem.get(4).toString()); 
     break;		
case "Stores/Consumables Including Packing Materials":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Stores/Consumables Including Packing Materials",CreditItem.get(4).toString()); 
     break;		
case "Raw Materials":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Raw Materials",CreditItem.get(4).toString()); 
    break;		
case "Work-In-Progress":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Work-In-Progress",CreditItem.get(4).toString()); 
     break;		
case "Finished Goods Or Trade Goods":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Finished Goods Or Trade Goods",CreditItem.get(4).toString()); 
     break;		
case "Trade Receivables":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Trade Receivables",CreditItem.get(4).toString()); 
    break;	
 case "Debtors":
     
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Debtors",CreditItem.get(4).toString()); 
     break;
      case "Computer Software And Hardware":
     
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computer Software And Hardware",CreditItem.get(4).toString()); 
     break;
     
case "Interest Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Receivable",CreditItem.get(4).toString()); 
     break;	
     case "Accounts Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accounts Receivable",CreditItem.get(4).toString()); 
     break;
      case "Accumulated Interest Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Interest Receivable",CreditItem.get(4).toString()); 
     break;
      case "Loan Penalty Receivable":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loan Penalty Receivable",CreditItem.get(4).toString()); 
     break;
     case "Allowance for Doubtful Accounts":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Allowance for Doubtful Accounts",CreditItem.get(4).toString());     
     break;
     case "Allowance for Doubtful Interest":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Allowance for Doubtful Interest",CreditItem.get(4).toString());     
     break;
case "Prepayments":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Prepayments",CreditItem.get(4).toString());  
    break;		
case "Mobile Money":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Mobile Money",CreditItem.get(4).toString()); 
    break;		
case "Bank Balance":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bank Balance",CreditItem.get(4).toString()); 
    break;		
case "Cash At Hand":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Cash At Hand",CreditItem.get(4).toString()); 
    break;		
case "Cash Equivalents":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Cash Equivalents",CreditItem.get(4).toString()); 
     break;		
 case "Loans To Related Parties":
     
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans To Related Parties",CreditItem.get(4).toString()); 
     break;		
case "Advances To Staff":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Advances To Staff",CreditItem.get(4).toString()); 
     break;	
case "Deposits (Other Than Fixed Deposit)":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Deposits (Other Than Fixed Deposit)",CreditItem.get(4).toString()); 
     break;		
case "Loans To Customers":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loans To Customers",CreditItem.get(4).toString());  
    break;		
case "Balances With Tax Authority":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Balances With Tax Authority",CreditItem.get(4).toString()); 
    break;		
case "Deferred Tax Assets":
    
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Deferred Tax Assets",CreditItem.get(4).toString()); 
     break;
    
case "Accounts Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accounts Payable",CreditItem.get(4).toString()); 
   break;		
case "Uknown Mobile Money":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Uknown Mobile Money",CreditItem.get(4).toString());   
   break;		
case "Customer Deposits":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Customer Deposits",CreditItem.get(4).toString());  
   break;		
case "Liability For Leased Assets":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Liability For Leased Assets",CreditItem.get(4).toString());   
   break;		
case "Accrued Interest":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accrued Interest",CreditItem.get(4).toString());  
    break;		
case "Amounts Due To Others":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Amounts Due To Others",CreditItem.get(4).toString());   
   break;		
case "Unpaid Matured Debts":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unpaid Matured Debts",CreditItem.get(4).toString());   
    break;		
case "Other Current Liabilities":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Current Liabilities",CreditItem.get(4).toString());   
   break;	
   case "Return On Investment Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
    case "Insurance Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
    case "Interest Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
    case "Tax Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
    case "PAYE Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
    case "NSSF Payable":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Return On Investment Payable",CreditItem.get(4).toString());   
   break;
   
    
  

 
 
    case "Unclassified Amounts":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unclassified Amounts",CreditItem.get(4).toString());   
   break;
   
case "Provision For Income Tax":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Income Tax",CreditItem.get(4).toString());   
   break;		
case "Provision For Bad Debts":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad Debts",CreditItem.get(4).toString());   
   break;		
case "Proposed Dividends":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Proposed Dividends",CreditItem.get(4).toString());     
    break;		
case "Other Provisions":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);      
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Provisions",CreditItem.get(4).toString()); 
   break;		
case "Secured Loan From Financial Institutions":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Loan From Financial Institutions",CreditItem.get(4).toString());   
   break;		
case "Secured Other Loans":
    
  end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//   updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Other Loans",CreditItem.get(4).toString());    
    break;		
case "Debt Securities Issued":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Debt Securities Issued",CreditItem.get(4).toString());    
    break;		
case "Secured Due To Related Parties":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
// updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Secured Due To Related Parties",CreditItem.get(4).toString());  
   break;		
case "Unsecured Loan From Financial Institutions":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Loan From Financial Institutions",CreditItem.get(4).toString());  
   break;		
case "Unsecured Other Loans":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Other Loans",CreditItem.get(4).toString());  
   break;		
case "Payables For More Than One Operating Cycle":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Payables For More Than One Operating Cycle",CreditItem.get(4).toString());   
    break;		
case "Creditors For More Than One Operating Cycle":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Creditors For More Than One Operating Cycle",CreditItem.get(4).toString());   
   break;		
case "Unsecured Due To Related Parties":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Unsecured Due To Related Parties",CreditItem.get(4).toString()); 
    break;		
case "Deferred Tax Liability":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Deferred Tax Liability",CreditItem.get(4).toString()); 
    break;	
case "Sales":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Sales",CreditItem.get(4).toString()); 
   break;		
case "Gross Interest Income":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Interest Income",CreditItem.get(4).toString()); 
   break;		
case "Gross Receipt Of Profession Fees":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Receipt Of Profession Fees",CreditItem.get(4).toString());  
    break;		
case "Gross Receipt Of Consultancy Fees":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Receipt Of Consultancy Fees",CreditItem.get(4).toString()); 
    break;		
case "Ledger Fee":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Ledger Fee",CreditItem.get(4).toString()); 
   break;		
case "Savings Withdraw Charges":
    
end=  updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Savings Withdraw Charges",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Interest Recovered":
    
 end=  updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Interest Recovered",CreditItem.get(4).toString()); 
   break;		
case "Admin Costs":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Admin Costs",CreditItem.get(4).toString()); 
   break;		
case "Charges":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Charges",CreditItem.get(4).toString()); 
    break;		
case "Membership Fees":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Membership Fees",CreditItem.get(4).toString()); 
   break;		
case "Loan Insurance Charges":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Insurance Charges",CreditItem.get(4).toString()); 
   break;		
case "Accumulated Interest Income":
    
  end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//   updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//     updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Interest Income",CreditItem.get(4).toString()); 
    break;		
case "Loan Surcharge":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Surcharge",CreditItem.get(4).toString()); 
   break;		
case "Commission And Fees":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Commission And Fees",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Principal RecoveredX":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",CreditItem.get(4).toString()); 
   break;
   
   
   
   case "Bad Debts Principal Recovered":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//  updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Principal RecoveredX",CreditItem.get(4).toString()); 
   break;
   
case "Loan Processing Fees":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Loan Processing Fees",CreditItem.get(4).toString()); 
   break;		
case "Annual Subscription Fees":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Annual Subscription Fees",CreditItem.get(4).toString()); 
    break;		
case "Provision For Bad And Doubtful Debts":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts",CreditItem.get(4).toString()); 
   break;		
case "Bad Debts Recovered":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Recovered",CreditItem.get(4).toString()); 
   break;
   case "Savings Penalties":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Recovered",CreditItem.get(4).toString()); 
   break;
   
   case "Other Incomes":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Recovered",CreditItem.get(4).toString()); 
   break;
case "Gross Amount Received":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);     
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Gross Amount Received",CreditItem.get(4).toString()); 
    break;		
case "Amount Recovered":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Amount Recovered",CreditItem.get(4).toString()); 
    break;		
case "Reserve For Unexpired Risk Brought From Previous Year Of Income":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Reserve For Unexpired Risk Brought From Previous Year Of Income",CreditItem.get(4).toString()); 
   break;		
case "Other Purely Short Term Insurance Income":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Other Purely Short Term Insurance Income",CreditItem.get(4).toString()); 
   break;		
case "Any Other Income":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Any Other Income",CreditItem.get(4).toString()); 
    break;		
case "Issued, Subscribed And Paid Up Capital":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Issued, Subscribed And Paid Up Capital",CreditItem.get(4).toString()); 
   break;		
case "Additional Issued Share Capital":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Additional Issued Share Capital",CreditItem.get(4).toString()); 
   break;		
case "Education Fund 1%":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Education Fund 1%",CreditItem.get(4).toString()); 
    break;		
case "Capital Reserve":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Capital Reserve",CreditItem.get(4).toString()); 
   break;		
case "Education Fund":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Education Fund",CreditItem.get(4).toString()); 
   break;		
case "Statutory Reserve Fund 10%":
    
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Statutory Reserve Fund 10%",CreditItem.get(4).toString()); 
   break;		
case "Revaluation Reserve":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber); 
//   updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Revaluation Reserve",CreditItem.get(4).toString()); 
   break;		
case "Co-Operative Development Fund":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Co-Operative Development Fund",CreditItem.get(4).toString()); 
    break;		
case "Retained Earnings":
 end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);    
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Retained Earnings",CreditItem.get(4).toString()); 
    
    break;		
case "Accumulated Profit Or Loss Or Surplus Or Deficit":
    
 end=updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
//  updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);  
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"Accumulated Profit Or Loss Or Surplus Or Deficit",CreditItem.get(4).toString()); 
    break;		
case "General Reserve":
    
end= updateAccountCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"creditLiabiil",c);
// updateGeneralLedgerCredit(CreditItem, creditLiability(balance, CreditItem.get(5).toString()),accountNumber);
//   updateStore1(creditLiability(balance, CreditItem.get(5).toString()),accountNumber);   
//    updateMasterCredit(creditLiability(balance, CreditItem.get(5).toString()),accountNumber,"General Reserve",CreditItem.get(4).toString()); 
   break;		
                case "Opening Stock Of Raw Materials":
                    
end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                 
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Raw Materials",CreditItem.get(4).toString());           
                    break;		
              case "Opening Stock Of Work In Progress":
                  
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);    
//     updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);       
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Work In Progress",CreditItem.get(4).toString());             
     break;		
           case "Opening Stock Of Trading Goods":
               
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Trading Goods",CreditItem.get(4).toString());         
     break;		
         case "Opening Stock Of Manufactured Goods":
             
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Opening Stock Of Manufactured Goods",CreditItem.get(4).toString());         
     break;		
       case "Local Purchases Net Of Duties And Taxes":
           
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//     updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Local Purchases Net Of Duties And Taxes",CreditItem.get(4).toString());    
     break;		
        case "Imports CIF Value And Taxes":
            
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);          
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Imports CIF Value And Taxes",CreditItem.get(4).toString());       
            break;		
       case "Direct Wages":
           
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Direct Wages",CreditItem.get(4).toString());     
     break;		
        case "Interest Expenses":
            
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);          
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Expenses",CreditItem.get(4).toString());       
     break;		
      case "Direct Expenses":
          
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);       
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber, "Direct Expenses",CreditItem.get(4).toString());  
     break;		
       case "Factory Rent":
           
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);           
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Factory Rent",CreditItem.get(4).toString());     
     break;		
      case "Factory Rates":
          
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);        
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Factory Rates",CreditItem.get(4).toString());    
     break;		
     case "Fuel And Power":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fuel And Power",CreditItem.get(4).toString());    
         break;		
               case "Indirect Wages":
                   
 end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);              
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Indirect Wages",CreditItem.get(4).toString());              
                   break;		
               case "Consumables":
                   
 end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);               
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Consumables",CreditItem.get(4).toString());            
     break;		
               case "Depreciation":
                   
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Depreciation",CreditItem.get(4).toString());              
                   break;		
               case "Other Factory Overheads":
                   
  end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Factory Overheads",CreditItem.get(4).toString());               
     break;		
               case "Closing Stock Of Raw Materials":
                   
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);             
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Raw Materials",CreditItem.get(4).toString());             
     break;		
               case "Closing Stock Of Work In Progress":
                   
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Work In Progress",CreditItem.get(4).toString());             
     break;		
               case "Closing Stock Of Manufactured Goods":
                   
end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);                 
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Manufactured Goods",CreditItem.get(4).toString());             
                   break;		
               case "Closing Stock Of Trading Goods":
                   
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);            
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Closing Stock Of Trading Goods",CreditItem.get(4).toString());           
     break;		
     case "Advertisement Expense":
         
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Advertisement Expense",CreditItem.get(4).toString());  
     break;		
     case "Audit Expenses":
         
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Audit Expenses",CreditItem.get(4).toString());
     break;		
     case "Bad Debts Written Off":
         
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);         
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Written Off",CreditItem.get(4).toString()); 
     break;		
     case "Commission":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Commission",CreditItem.get(4).toString());  
         break;		
     case "Computer Soft And Hardware Expenses":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Computer Soft And Hardware Expenses",CreditItem.get(4).toString());  
         break;		
     case "Maintainance of Office Equipment":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Maintainance of Office Equipment",CreditItem.get(4).toString());
         break;		
     case "News Papers And Periodicals":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//    
//  updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"News Papers And Periodicals",CreditItem.get(4).toString());  
     break;		
     case "Donations":
         
    end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Donations",CreditItem.get(4).toString()); 
         break;	
     case "Entertainment And Refreshments":
         
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Entertainment And Refreshments",CreditItem.get(4).toString());  
     break;		
     case "Freight And Transport":
         
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Freight And Transport",CreditItem.get(4).toString());   
     break;		
     case "Air Time Allowance":
         
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Air Time Allowance",CreditItem.get(4).toString());
         break;		
     case "Hotel, Boarding And Lodging Expenses":
         
 end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Hotel, Boarding And Lodging Expenses",CreditItem.get(4).toString());  
         break;		
     case "Legal Expenses":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Legal Expenses",CreditItem.get(4).toString());
     break;		
     case "Fuel":
         
 end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c);
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Fuel",CreditItem.get(4).toString());
         break;		
     case "Utilities Expenses":
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Utilities Expenses",CreditItem.get(4).toString());
         break;		
     case "Provision For Bad And Doubtful Debts Expense":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Provision For Bad And Doubtful Debts Expense",CreditItem.get(4).toString()); 
         break;		
     case "Rent Expense":
         
end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Rent Expense",CreditItem.get(4).toString()); 
     break;		
     case "Bad Debts Expense":
         
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bad Debts Expense",CreditItem.get(4).toString());  
         break;		
     case "Car Maintainance And Repairs":
         
 end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Car Maintainance And Repairs",CreditItem.get(4).toString());   
         break;		
     case "Provision for Depreciation":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Provision for Depreciation",CreditItem.get(4).toString()); 
         break;		
     case "Office Maintainance Expense":
         
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Office Maintainance Expense",CreditItem.get(4).toString());   
         break;		
     case "Consultancy":
         
  end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Consultancy",CreditItem.get(4).toString());   
         
         break;		
     case "Loan Recovery Expenses":
         
    end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loan Recovery Expenses",CreditItem.get(4).toString());
         break;		
     case "Stationery And Printing":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Stationery And Printing",CreditItem.get(4).toString()); 
         break;	
          case "Compliance And Regulatory Expenses":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Compliance And Regulatory Expenses",CreditItem.get(4).toString()); 
         break;	
         
         
     case "Lunch Allowance":
         
    end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lunch Allowance",CreditItem.get(4).toString()); 
     break;		
     case "Telephone And Internet":
         
   end=     updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Telephone And Internet",CreditItem.get(4).toString()); 
         break;		
     case "Training Expenditure":
         
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Training Expenditure",CreditItem.get(4).toString()); 
         
         break;		
     case "Lincenses And Permits":
         
 end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lincenses And Permits",CreditItem.get(4).toString());
         break;		
     case "Parking And Security":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Parking And Security",CreditItem.get(4).toString());
         break;	
           case "Caveat Charges":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Parking And Security",CreditItem.get(4).toString());
         break;
         
     case "Depreciation Expense":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Depreciation Expense",CreditItem.get(4).toString());
     break;		
     case "Loss On Disposal Of Assets":
         
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Loss On Disposal Of Assets",CreditItem.get(4).toString()); 
         break;		
     case "Management Fees":
         
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Management Fees",CreditItem.get(4).toString());
     break;		
     case "AGM Expenses":
         
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"AGM Expenses",CreditItem.get(4).toString());
     break;
     
     
      
        case    "Loans Committee Expenses":
         
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,   "Loans Committee Expenses",CreditItem.get(4).toString());
     break;
        case "Admin Expenses":
         
  end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Admin Expenses",CreditItem.get(4).toString());
     break;
     
     
      
      case "Salaries And Wages":
          
   end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Salaries And Wages",CreditItem.get(4).toString());
          
          break;		
      case "Bonus":
          
     end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//     updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bonus",CreditItem.get(4).toString());
     break;		
      case "PAYEE":
          
    end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);     
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"PAYEE",CreditItem.get(4).toString()); 
          break;		
      case "Board Sitting Allowances":
          
  end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Board Sitting Allowances",CreditItem.get(4).toString());
          break;		
      case "Employee Allowances":
          
      end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//      updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Employee Allowances",CreditItem.get(4).toString()); 
          break;		
      case "Directors Allowances":
          
   end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//         updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Directors Allowances",CreditItem.get(4).toString()); 
          break;		
      case "Contribution To Retirement Fund":
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Contribution To Retirement Fund",CreditItem.get(4).toString());
          break;
          
      case "Medical Allowance":
   end=    updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//          updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Medical Allowance",CreditItem.get(4).toString());
          break;		
      case "NSSF Contributions":
          
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;
          
              case "Festive Allowance":
          
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;
          
              case "Employee Welfare":
          
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//       updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"NSSF Contributions",CreditItem.get(4).toString());
          break;
          
    case "Interest Expense":
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Interest Expense",CreditItem.get(4).toString());
        break;		
    case "Bank Charges":
        
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Bank Charges",CreditItem.get(4).toString());
        break;		
    case "Start Up Expenses":
        
  end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);  
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Start Up Expenses",CreditItem.get(4).toString());
        break;		
    case "Lending License":
        
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Lending License",CreditItem.get(4).toString());
     break;		
    case "Company Stamps":
        
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Company Stamps",CreditItem.get(4).toString());
     break;		
    case "Unrealized Exchange Loss":
        
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",CreditItem.get(4).toString());
        break;
          case "Return On Investment Expense":
        
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Unrealized Exchange Loss",CreditItem.get(4).toString());
        break;
        

    case "Claims Admitted During The Year":
        
   end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);    
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Claims Admitted During The Year",CreditItem.get(4).toString());
        break;		
    case "Premiums Returned To Insured":
        
   end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//   updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);        
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Premiums Returned To Insured",CreditItem.get(4).toString());
        
        break;		
    case "Reserves For Unexpired Risk Carried Forward":
        
    end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Reserves For Unexpired Risk Carried Forward",CreditItem.get(4).toString());
     break;		
    case "Agency Expenses":
        
  end=  updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//  updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//        updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Agency Expenses",CreditItem.get(4).toString());
        break;		
    case "Other Expenses Related To Short Term Business":
        
    end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Other Expenses Related To Short Term Business",CreditItem.get(4).toString()); 
        break;
         
    
    
       
        
  case "Income Tax Expense":
      
    end=   updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//    updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);   
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Income Tax Expense",CreditItem.get(4).toString());
     break;		
  case "Dividends paid during the Operating period":
      
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Dividends paid during the Operating period",CreditItem.get(4).toString());
      break;		
  case "Retained earnings at start of Operating period" :
      
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Retained earnings at start of Operating period" ,CreditItem.get(4).toString()); 
      break;
     case "Restatement of retained earnings for corrections of previous period errors":
      
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Restatement of retained earnings for corrections of previous period errors" ,CreditItem.get(4).toString()); 
      break; 
       case "Restatement of retained earnings for changes in accounting policies":
      
 end= updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
// updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber); 
//     updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"Restatement of retained earnings for changes in accounting policies" ,CreditItem.get(4).toString()); 
      break;
  case "General expense":
      
end=updateAccountCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"creditAseet",c); 
//updateGeneralLedgerCredit(CreditItem, creditAsset(balance, CreditItem.get(5).toString()),accountNumber);
//     updateStore1(creditAsset(balance, CreditItem.get(5).toString()),accountNumber);      
//      updateMasterCredit(creditAsset(balance, CreditItem.get(5).toString()),accountNumber,"General expense",CreditItem.get(4).toString());
      break;
 
    }

   return end;
  
 }	
// public boolean updateGeneralLedgerDebit(List DebitItm, String newBalance,String accountNumber){
//  
//        boolean recordInserted=true;
//       try {
//             Connection cq=quaryObj.createConnection(); 
//cq.setAutoCommit(false);
//            PreparedStatement ps = cq.prepareStatement("INSERT INTO general_ledger VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            ps.setObject(1, null);//Transaction ID
//            ps.setObject(2, fmt.forDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString()));//Transaction date
//            ps.setObject(3, DebitItm.get(2).toString()+"."+"  "+DebitItm.get(3).toString());//Narration
//            ps.setObject(4, fmt.forDatabaseWithFullYearBeginningWithDate(DebitItm.get(4).toString()));//Value date
//            ps.setObject(5,DebitItm.get(5).toString());//Debit
//            ps.setObject(6, "-");//Credit
//            ps.setObject(7, accountNumber);//Debit account Number
//             ps.setObject(8, fmt.formatAccountWithSeperators(DebitItm.get(6).toString()));//Credit account number
//            ps.setObject(9, DebitItm.get(7).toString());//Credit account name
//            ps.setObject(10,DebitItm.get(8).toString());//Transaction reference number
//            ps.setObject(11,DebitItm.get(9).toString());//Cheque number for trn id
//            ps.setObject(12,DebitItm.get(10).toString());//Transaction type
//            ps.setObject(13, getLoggedInUserId());//User id
//            ps.setObject(14,getDBCurrentTime());//Trn time
//            ps.setObject(15,DebitItm.get(11).toString());//Trnd sequance number
//            if(ps.execute()){
//            recordInserted=false; 
//            } else{
//                    
//                  recordInserted=true;  
//                    } 
//            
//            ps.close();
//           cq.setAutoCommit(true);
//            
//            quaryObj.closeConnection(cq);
//          
//        } catch (SQLException ex) {
//            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//        }  
//         fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt")); 
//         
//       fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
//          
//       return recordInserted;
//      
//  }
 public boolean updateGeneralLedgerCredit(List CreditItm, String newBalance,String accountNumber){
  
   
 
      
   boolean recordInserted=true;
     try {
             Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
           
            PreparedStatement ps = cq.prepareStatement("INSERT INTO general_ledger VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);
            ps.setObject(2, fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString()));
            ps.setObject(3, CreditItm.get(2).toString()+"."+"  "+CreditItm.get(3).toString());
            ps.setObject(4, fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(4).toString()));
            ps.setObject(5,"-");
            ps.setObject(6, CreditItm.get(5).toString());
            ps.setObject(7, accountNumber);
            ps.setObject(8, fmt.formatAccountWithSeperators(CreditItm.get(6).toString()));
            ps.setObject(9, CreditItm.get(7).toString());
            ps.setObject(10,CreditItm.get(8).toString());
            ps.setObject(11,CreditItm.get(9).toString());
            ps.setObject(12,CreditItm.get(10).toString());
            ps.setObject(13, getLoggedInUserId());
            ps.setObject(14,getDBCurrentTime());
            ps.setObject(15,CreditItm.get(11).toString());
            if(ps.execute()){
            recordInserted=false; 
            } else{
                    
                  recordInserted=true;  
                    } 
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
           
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        } 
     fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"));
     fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
   
            return recordInserted;    
  
  }
 
 
  public String debitAsset(String ledgerBalance, String debitAmount){
      String balance="";
      
   Double bal=formulas.add(parseDouble(ledgerBalance.replaceAll(",", "")), parseDouble(debitAmount.replaceAll(",", "")));
  if(Math.abs(bal)<0.001){
  balance="0";
  }else{
  balance=Double.toString(bal);
  }
  return balance;
 
  }
  public String debitLiability(String ledgerBalance, String debitAmount){
       String balance="";
  Double bal=formulas.subtract(parseDouble(ledgerBalance.replaceAll(",", "")), parseDouble(debitAmount.replaceAll(",", "")));
 if(Math.abs(bal)<0.001){
  balance="0";
  }else{
  balance=Double.toString(bal);
  }
  return balance;
  }
  
  
  
  public String creditAsset(String ledgerBalance, String creditAmount ){
      
      String balance="";
  Double bal=formulas.subtract(parseDouble(ledgerBalance.replaceAll(",", "")), parseDouble(creditAmount.replaceAll(",", "")));
 if(Math.abs(bal)<0.001){
  balance="0";
  }else{
  balance=Double.toString(bal);
  }
  return balance;
  }
  public String creditLiability(String ledgerBalance, String creditAmount ){
       String balance="";
  Double bal=formulas.add(parseDouble(ledgerBalance.replaceAll(",", "")), parseDouble(creditAmount.replaceAll(",", "")));
 if(Math.abs(bal)<0.001){
  balance="0";
  }else{
  balance=Double.toString(bal);
  }
  return balance;
  }
 
  
  
  
 public String getTransactionSequenceNumber() {
             
    String sequenceNumber="";
             
    sequenceNumber=transactionSequenceNumberDB();
    
     return   sequenceNumber;      
    }
 
 public String accountBalance(String AccountNumber,String valueDate){
     
     String bal="";
    Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT ledger_balance FROM  "+"BSANCA"+AccountNumber+" "+"WHERE  trn_date<="+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(valueDate)+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
            
             
              if (rs.last()) {
                       
                bal =rs.getString("ledger_balance");
                    
     
          
              }
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 if(bal.isEmpty()){
 
 bal="0.0";
 }
 
          
          return bal;
 
 }  
 
  public String ledgerBal(String AccountNumber){
     
     String bal="";
    Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT ledger_balance FROM  "+"BSANCA"+AccountNumber;
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
            
             
              if (rs.last()) {
                       
                bal =rs.getString("ledger_balance");
                    
     
          
              }
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 if(bal.isEmpty()){
 
 bal="0.0";
 }
 
          
          return bal;
 
 }  
 
 public String accountCategory(String AccountNumber){
     String masterName="";
     
      try {
           Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT DISTINCT account_l5 from account_created_store WHERE account_number="+AccountNumber;

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   masterName=rsxmt.getString("account_l5");
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
     return masterName;

    }
 public String retriveMasterAccountFAN(String AccountNumber){
 
 
 return AccountNumber.substring(0, 5)+"0000"+AccountNumber.substring(9, 11);
 }
 
 
 
 
  public boolean updateAccountCredit(List CreditItm, String newBalance,String accountNumber,String liabassSta,Component c){
      
      
      
   boolean recordInserted=true;
   
//   Date today=fmt.convertTdate(sdf.format(new Date(System.currentTimeMillis())));
//   
//   Date valueDate=fmt.convertTdate(CreditItm.get(4).toString());
//   
//      if((valueDate.after(today)||valueDate.equals(today))){

if(!this.testTable("bsanca"+accountNumber)){

JOptionPane.showMessageDialog(c, this.AccountName(accountNumber)+" Ledger is missing");
return false;

}else{
String masterAccountNumber=fmt.getMasterAccountNumber(accountNumber);
  
     try {
             Connection cq=quaryObj.createConnection(); 
              
//             cq.setAutoCommit(false);
//          
//            PreparedStatement ps2 = cq.prepareStatement("SET @SEVariable=NULL");
//           
//           ps2.execute();
//            
//            ps2.close();
//            
//           cq.setAutoCommit(true);
             
            cq.setAutoCommit(false);
        

   String theProcedure ="CALL postingTxnsX("+"33000"+","+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString())+"',"+"'"+CreditItm.get(2).toString().replace("'", "")+"\n"+"  "+CreditItm.get(3).toString().replace("'", "")+"',"+ "'"+fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString())+"',"+"'"+"-"+"',"+
                    "'"+CreditItm.get(5).toString()+"',"+"'"+newBalance+"',"+"'"+fmt.formatAccountWithSeperators(CreditItm.get(6).toString())+"',"+"'"+CreditItm.get(7).toString()+"',"+
                    "'"+CreditItm.get(8).toString()+"',"+"'"+CreditItm.get(9).toString()+"',"+"'"+CreditItm.get(10).toString()+"',"+"'"+getLoggedInUserId()+"',"+
                    "'"+getDBCurrentTime()+"',"+ "'"+CreditItm.get(11).toString()+"',"+ "'"+accountNumber+"',"+ "'"+masterAccountNumber+"',"+ "'"+"Cr"+"',"+
                     "'"+"Main"+"',"+ "'"+"NA"+"'"+")";
              
              PreparedStatement ps =cq.prepareStatement(theProcedure);
         int exc=     ps.executeUpdate();
//                     JOptionPane.showMessageDialog(c, theProcedure);  
//            PreparedStatement ps = cq.prepareStatement("INSERT INTO"+" "+"BSANCA"+accountNumber+" "+"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            ps.setObject(1, null);//trn_id
//            ps.setObject(2, fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString()));//trn_date
//            ps.setObject(3, CreditItm.get(2).toString()+"\n"+"  "+CreditItm.get(3).toString());//narration
//            ps.setObject(4, fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(4).toString()));//value_date
//            ps.setObject(5,"-");//debit
//            ps.setObject(6, CreditItm.get(5).toString());//credit
//            ps.setObject(7, newBalance);//ledger_balance
//            ps.setObject(8, fmt.formatAccountWithSeperators(CreditItm.get(6).toString()));//credit_account_no
//            ps.setObject(9, CreditItm.get(7).toString());//credit_account_name
//            ps.setObject(10,CreditItm.get(8).toString());//tra_ref_number
//            ps.setObject(11,CreditItm.get(9).toString());//chq_number
//            ps.setObject(12,CreditItm.get(10).toString());//trn_type
//            ps.setObject(13, getLoggedInUserId());//staff_id
//            ps.setObject(14,getDBCurrentTime());//trn_time
//            ps.setObject(15,CreditItm.get(11).toString());//trn_sq_no
//            ps.setObject(16,accountNumber);//Account Number
//             ps.setObject(17,masterAccountNumber);//Master Number
//              ps.setObject(18,"Cr");//Account Number
//             ps.setObject(19,"NA");//Master Number
//              ps.setObject(20,"NA");//Account Number
            if(exc==0){
            recordInserted=false; 
            } else{
                    
                  recordInserted=true;  
                    } 
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
           
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(c, ex.toString());
        } 
     fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"));
     fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
   
            
//      }else if(valueDate.before(today)){
//             updateOtherBalancesCredit(CreditItm.get(4).toString(),accountNumber,CreditItm.get(5).toString(), liabassSta);
//        try {
//             Connection cq=quaryObj.createConnection(); 
//            cq.setAutoCommit(false);
//           
//            PreparedStatement ps = cq.prepareStatement("INSERT INTO"+" "+"BSANCA"+accountNumber+" "+"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            ps.setObject(1, null);
//            ps.setObject(2, fmt.dateForDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString()));
//            ps.setObject(3, CreditItm.get(2).toString()+"\n"+"  "+CreditItm.get(3).toString());
//            ps.setObject(4, fmt.dateForDatabaseWithFullYearBeginningWithDate(CreditItm.get(4).toString()));
//            ps.setObject(5,"-");
//            ps.setObject(6, CreditItm.get(5).toString());
//            ps.setObject(7, newBalance);
//            ps.setObject(8, fmt.formatAccountWithSeperators(fmt.putSeparatorsOnNormaAccount(CreditItm.get(6).toString())));
//            ps.setObject(9, CreditItm.get(7).toString());
//            ps.setObject(10,CreditItm.get(8).toString());
//            ps.setObject(11,CreditItm.get(9).toString());
//            ps.setObject(12,CreditItm.get(10).toString());
//            ps.setObject(13, getLoggedInUserId());
//            ps.setObject(14,getDBCurrentTime());
//            ps.setObject(15,CreditItm.get(11).toString());
//            if(ps.execute()){
//            recordInserted=false; 
//            } else{
//                    
//                  recordInserted=true;  
//                    } 
//            ps.close();
//           cq.setAutoCommit(true);
//            
//            quaryObj.closeConnection(cq);
//           
//        } catch (SQLException ex) {
//            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//        } 
//      
     
     fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"));
     fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
//   
     
      
//      }
  return recordInserted;  
}
      
      
      
  }
  public boolean updateAccountCredit1(List CreditItm, String newBalance,String accountNumber,String liabassSta,Component c){
      
      
      
   boolean recordInserted=true;
   

if(!this.testTable("bsanca"+accountNumber)){

JOptionPane.showMessageDialog(c, this.AccountName(accountNumber)+" Ledger is missing");

return false;

}else{
String masterAccountNumber=fmt.getMasterAccountNumber(accountNumber);
  
     try {
             Connection cq=quaryObj.createConnection(); 
             
             
             
//  cq.setAutoCommit(false);
//          
//            PreparedStatement ps1 = cq.prepareStatement("SET @SEVariable=1");
//           
//           ps1.execute();
//            
//            ps1.close();
//           cq.setAutoCommit(true);
            cq.setAutoCommit(false);
       
      String theProcedure ="CALL postingTxnsX("+"33000"+","+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString())+"',"+"'"+CreditItm.get(2).toString().replace("'", "")+"\n"+"  "+CreditItm.get(3).toString().replace("'", "")+"',"+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString())+"',"+"'"+"-"+"',"+
                    "'"+CreditItm.get(5).toString()+"',"+"'"+newBalance+"',"+"'"+fmt.formatAccountWithSeperators(CreditItm.get(6).toString())+"',"+"'"+CreditItm.get(7).toString()+"',"+
                    "'"+CreditItm.get(8).toString()+"',"+"'"+CreditItm.get(9).toString()+"',"+"'"+CreditItm.get(10).toString()+"',"+"'"+getLoggedInUserId()+"',"+
                    "'"+getDBCurrentTime()+"',"+ "'"+CreditItm.get(11).toString()+"',"+ "'"+accountNumber+"',"+ "'"+masterAccountNumber+"',"+ "'"+"Cr"+"',"+
                     "'"+"Main"+"',"+ "'"+"NA"+"'"+")";
              tx.setText(theProcedure);
              PreparedStatement ps =cq.prepareStatement(theProcedure);
            int exc=  ps.executeUpdate();
//                        JOptionPane.showMessageDialog(c, theProcedure);  
//
//            PreparedStatement ps = cq.prepareStatement("INSERT INTO"+" "+"BSANCA"+accountNumber+" "+"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            ps.setObject(1, null);//trn_id
//            ps.setObject(2, fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(1).toString()));//trn_date
//            ps.setObject(3, CreditItm.get(2).toString()+"\n"+"  "+CreditItm.get(3).toString());//narration
//            ps.setObject(4, fmt.forDatabaseWithFullYearBeginningWithDate(CreditItm.get(4).toString()));//value_date
//            ps.setObject(5,"-");//debit
//            ps.setObject(6, CreditItm.get(5).toString());//credit
//            ps.setObject(7, newBalance);//ledger_balance
//            ps.setObject(8, fmt.formatAccountWithSeperators(CreditItm.get(6).toString()));//credit_account_no
//            ps.setObject(9, CreditItm.get(7).toString());//credit_account_name
//            ps.setObject(10,CreditItm.get(8).toString());//tra_ref_number
//            ps.setObject(11,CreditItm.get(9).toString());//chq_number
//            ps.setObject(12,CreditItm.get(10).toString());//trn_type
//            ps.setObject(13, getLoggedInUserId());//staff_id
//            ps.setObject(14,getDBCurrentTime());//trn_time
//            ps.setObject(15,CreditItm.get(11).toString());//trn_sq_no
//            ps.setObject(16,accountNumber);//Account Number
//             ps.setObject(17,masterAccountNumber);//Master Number
//              ps.setObject(18,"Cr");//Account Number
//             ps.setObject(19,"Main");//Master Number
//              ps.setObject(20,"NA");//Account Number
            if(exc==0){
            recordInserted=false; 
            } else{
                    
                  recordInserted=true;  
                    } 
            ps.close();
           cq.setAutoCommit(true);
            
//             cq.setAutoCommit(false);
//          
//            PreparedStatement ps2 = cq.prepareStatement("SET @SEVariable=NULL");
//           
//           ps2.execute();
//            
//            ps2.close();
//            
           cq.setAutoCommit(true);
           
           
            quaryObj.closeConnection(cq);
           
        } catch (SQLException ex) {
        JOptionPane.showMessageDialog(c, ex.toString());
        } 
     fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"));
     fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
   

     
     fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"));
     fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);

  return recordInserted;  
}
      
      
      
  }
  
  public boolean updateAccountDebit(List DebitItm, String newBalance,String accountNumber,String liabassSta,Component c){
  
        boolean recordInserted=true;
          String masterAccountNumber=fmt.getMasterAccountNumber(accountNumber);   
//JOptionPane.showMessageDialog(c, "NULL"+"\n"+fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString())+"\n"+ DebitItm.get(2).toString()+""+"  "+DebitItm.get(3).toString()+"\n"+fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(4).toString())+"\n"+DebitItm.get(5).toString()+"\n"+"-"+"\n"+newBalance+"\n"+fmt.formatAccountWithSeperators(DebitItm.get(6).toString())+"\n"+DebitItm.get(7).toString()+"\n"+DebitItm.get(8).toString()+"\n"+DebitItm.get(9).toString()+"\n"+DebitItm.get(10).toString()+"\n"+getLoggedInUserId()+"\n"+getDBCurrentTime()+"\n"+DebitItm.get(11).toString()+"\n"+accountNumber+"\n"+masterAccountNumber+"\n"+"Dr"+"\n"+"NA"+"\n"+"NA");

     
//         Date today=fmt.convertTdate(sdf.format(new Date(System.currentTimeMillis())));
//         
//   Date valueDate=fmt.convertTdate(DebitItm.get(4).toString());
//   
//      if((valueDate.after(today)||valueDate.equals(today))){
     if(!this.testTable("bsanca"+accountNumber)){

JOptionPane.showMessageDialog(c, this.AccountName(accountNumber)+" Ledger is missing");
return false;

}else{
       try {
             Connection cq=quaryObj.createConnection(); 
             
             
            cq.setAutoCommit(false);
            
            
            
            String theProcedure ="CALL postingTxnsX("+"33000"+","+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString())+"',"+"'"+DebitItm.get(2).toString().replace("'", "")+"\n"+"  "+DebitItm.get(3).toString().replace("'", "")+"',"+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString())+"',"+"'"+DebitItm.get(5).toString()+"',"+
                    "'"+"-"+"',"+"'"+newBalance+"',"+"'"+fmt.formatAccountWithSeperators(DebitItm.get(6).toString())+"',"+"'"+DebitItm.get(7).toString()+"',"+
                    "'"+DebitItm.get(8).toString()+"',"+"'"+DebitItm.get(9).toString()+"',"+"'"+DebitItm.get(10).toString()+"',"+"'"+getLoggedInUserId()+"',"+
                    "'"+getDBCurrentTime()+"',"+ "'"+DebitItm.get(11).toString()+"',"+ "'"+accountNumber+"',"+ "'"+masterAccountNumber+"',"+ "'"+"Dr"+"',"+
                     "'"+"Main"+"',"+ "'"+"NA"+"'"+")";
          
              PreparedStatement ps =cq.prepareStatement(theProcedure);
             int exce= ps.executeUpdate();
            
            
//              JOptionPane.showMessageDialog(c, theProcedure);  
            
            
          
            if(exce==0){
            recordInserted=false; 
            } else{
                    
                  recordInserted=true;  
                    } 
            
            ps.close();
           cq.setAutoCommit(true);
           
           
           
            
           
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
         JOptionPane.showMessageDialog(c, ex.toString());
        }  
//         fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt")); 
//       fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
          
//       }else if(valueDate.before(today)){
//           
//   updateOtherBalancesDebit(DebitItm.get(4).toString(),accountNumber,DebitItm.get(5).toString(),liabassSta);  
//   
//         try {
//             Connection cq=quaryObj.createConnection(); 
//            cq.setAutoCommit(false);
//          
//            PreparedStatement ps = cq.prepareStatement("INSERT INTO"+" "+"BSANCA"+accountNumber+" "+"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            ps.setObject(1, null);
//            ps.setObject(2, fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString()));
//            ps.setObject(3, DebitItm.get(2).toString()+"\n"+"  "+DebitItm.get(3).toString());
//            ps.setObject(4, fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(4).toString()));
//            ps.setObject(5,DebitItm.get(5).toString());
//            ps.setObject(6, "-");
//            ps.setObject(7, newBalance);
//             ps.setObject(8, fmt.formatAccountWithSeperators(fmt.putSeparatorsOnNormaAccount(DebitItm.get(6).toString())));
//            ps.setObject(9, DebitItm.get(7).toString());
//            ps.setObject(10,DebitItm.get(8).toString());
//            ps.setObject(11,DebitItm.get(9).toString());
//            ps.setObject(12,DebitItm.get(10).toString());
//            ps.setObject(13, getLoggedInUserId());
//            ps.setObject(14,getDBCurrentTime());
//            ps.setObject(15,DebitItm.get(11).toString());
//            if(ps.execute()){
//                
//            recordInserted=false; 
//            
//            } else{
//                    
//                  recordInserted=true;  
//                    } 
//            
//            ps.close();
//           cq.setAutoCommit(true);
//            
//            quaryObj.closeConnection(cq);
//          
//        } catch (SQLException ex) {
//            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//        }  
         fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt")); 
       fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
//   
//      
//      
//      }
//      
        return recordInserted;
     }
     
  }
  
  
public boolean updateAccountDebit1(List DebitItm, String newBalance,String accountNumber,String liabassSta,Component c){
  
        boolean recordInserted=true;
        
          String masterAccountNumber=fmt.getMasterAccountNumber(accountNumber);   
          
//JOptionPane.showMessageDialog(c, "NULL"+"\n"+fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString())+"\n"+ DebitItm.get(2).toString()+""+"  "+DebitItm.get(3).toString()+"\n"+fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(4).toString())+"\n"+DebitItm.get(5).toString()+"\n"+"-"+"\n"+newBalance+"\n"+fmt.formatAccountWithSeperators(DebitItm.get(6).toString())+"\n"+DebitItm.get(7).toString()+"\n"+DebitItm.get(8).toString()+"\n"+DebitItm.get(9).toString()+"\n"+DebitItm.get(10).toString()+"\n"+getLoggedInUserId()+"\n"+getDBCurrentTime()+"\n"+DebitItm.get(11).toString()+"\n"+accountNumber+"\n"+masterAccountNumber+"\n"+"Dr"+"\n"+"NA"+"\n"+"NA");

     
//         Date today=fmt.convertTdate(sdf.format(new Date(System.currentTimeMillis())));
//         
//   Date valueDate=fmt.convertTdate(DebitItm.get(4).toString());
//   
//      if((valueDate.after(today)||valueDate.equals(today))){
     if(!this.testTable("bsanca"+accountNumber)){

JOptionPane.showMessageDialog(c, this.AccountName(accountNumber)+" Ledger is missing");
return false;

}else{
         
       try {
           
             Connection cq=quaryObj.createConnection(); 
             
//       
             
            cq.setAutoCommit(false);
          
            
              String theProcedure ="CALL postingTxnsX("+"33000"+","+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString())+"',"+"'"+DebitItm.get(2).toString().replace("'", "")+"\n"+"  "+DebitItm.get(3).toString().replace("'", "")+"',"+ "'"+fmt.forDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString())+"',"+"'"+DebitItm.get(5).toString()+"',"+
                    "'"+"-"+"',"+"'"+newBalance+"',"+"'"+fmt.formatAccountWithSeperators(DebitItm.get(6).toString())+"',"+"'"+DebitItm.get(7).toString()+"',"+
                    "'"+DebitItm.get(8).toString()+"',"+"'"+DebitItm.get(9).toString()+"',"+"'"+DebitItm.get(10).toString()+"',"+"'"+getLoggedInUserId()+"',"+
                    "'"+getDBCurrentTime()+"',"+ "'"+DebitItm.get(11).toString()+"',"+ "'"+accountNumber+"',"+ "'"+masterAccountNumber+"',"+ "'"+"Dr"+"',"+
                     "'"+"Main"+"',"+ "'"+"NA"+"'"+")";
              
              PreparedStatement ps =cq.prepareStatement(theProcedure);
            int excute=  ps.executeUpdate();
            
//                     JOptionPane.showMessageDialog(c, theProcedure);  
            if(excute==0){
            recordInserted=false; 
            } else{
                    
                  recordInserted=true;  
                    } 
            
            ps.close();
           cq.setAutoCommit(true);
            
             
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
              JOptionPane.showMessageDialog(c, ex.toString());
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }  
//         fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt")); 
//       fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
          
//       }else if(valueDate.before(today)){
//           
//   updateOtherBalancesDebit(DebitItm.get(4).toString(),accountNumber,DebitItm.get(5).toString(),liabassSta);  
//   
//         try {
//             Connection cq=quaryObj.createConnection(); 
//            cq.setAutoCommit(false);
//          
//            PreparedStatement ps = cq.prepareStatement("INSERT INTO"+" "+"BSANCA"+accountNumber+" "+"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            ps.setObject(1, null);
//            ps.setObject(2, fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(1).toString()));
//            ps.setObject(3, DebitItm.get(2).toString()+"\n"+"  "+DebitItm.get(3).toString());
//            ps.setObject(4, fmt.dateForDatabaseWithFullYearBeginningWithDate(DebitItm.get(4).toString()));
//            ps.setObject(5,DebitItm.get(5).toString());
//            ps.setObject(6, "-");
//            ps.setObject(7, newBalance);
//             ps.setObject(8, fmt.formatAccountWithSeperators(fmt.putSeparatorsOnNormaAccount(DebitItm.get(6).toString())));
//            ps.setObject(9, DebitItm.get(7).toString());
//            ps.setObject(10,DebitItm.get(8).toString());
//            ps.setObject(11,DebitItm.get(9).toString());
//            ps.setObject(12,DebitItm.get(10).toString());
//            ps.setObject(13, getLoggedInUserId());
//            ps.setObject(14,getDBCurrentTime());
//            ps.setObject(15,DebitItm.get(11).toString());
//            if(ps.execute()){
//                
//            recordInserted=false; 
//            
//            } else{
//                    
//                  recordInserted=true;  
//                    } 
//            
//            ps.close();
//           cq.setAutoCommit(true);
//            
//            quaryObj.closeConnection(cq);
//          
//        } catch (SQLException ex) {
//            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//        }  
         fios.forceFileExistanceZero(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt")); 
       fios.stringFileWriter(fios.createFileName("accountManagement", "accountBalances","accountRunningBalance"+accountNumber+".txt"), newBalance);
//   
//      
//      
//      }
//      
        return recordInserted;
     }
     
  }

//  private void updateOtherBalancesCredit(String valueDate,String accountNumber,String theItem,String liabAssStatus){
//
//
//
//  if(liabAssStatus.equalsIgnoreCase("creditAseet")){
//  
//      List<List> updateItems1=itemsToUpdate(valueDate,accountNumber);
//      updatemasterCreditDetails(valueDate,accountNumber);
//  int n=0;
//  
//  while(n<updateItems1.size()){
//      
// 
//   
//  updatethefinalItem(updateItems1.get(n).get(0).toString(),creditAsset(updateItems1.get(n).get(1).toString(), theItem),accountNumber);
//
//  n++;
// } }else if(liabAssStatus.equalsIgnoreCase("creditLiabiil")){
//  
//  List<List> updateItemsk=itemsToUpdate(valueDate,accountNumber);
//  updatemasterCreditDetails(valueDate,accountNumber);
//  int m=0;
//  
//  while(m<updateItemsk.size()){
//      
//     
//  
//  updatethefinalItem(updateItemsk.get(m).get(0).toString(),creditLiability(updateItemsk.get(m).get(1).toString(), theItem),accountNumber);
//  
//  m++; } }}
//  
//  private void updateOtherBalancesDebit(String valueDate,String accountNumber,String theItem,String liabAssStatus){
//
//
//
//  if(liabAssStatus.equalsIgnoreCase("debitAseet")){
//  
//      List<List> updateItems1=itemsToUpdate(valueDate,accountNumber);
//        updatemasterDebitDetails(valueDate,accountNumber);
//  int n=0;
//  
//  while(n<updateItems1.size()){
//       
//  updatethefinalItem(updateItems1.get(n).get(0).toString(),debitAsset(updateItems1.get(n).get(1).toString(), theItem),accountNumber);
//   
//  
// 
//  n++;
//  
//          }
//  
//  	
//
//  }else if(liabAssStatus.equalsIgnoreCase("debitLiabiil")){
//  
//  List<List> updateItems=itemsToUpdate(valueDate,accountNumber);
//   updatemasterDebitDetails(valueDate,accountNumber);
//  int m=0;
//  
//  while(m<updateItems.size()){
//   
//  updatethefinalItem(updateItems.get(m).get(0).toString(),debitLiability(updateItems.get(m).get(1).toString(), theItem),accountNumber);
// 
//    
//     
//  m++;
//          }
//  
//  }
//  
//
//  }
  
//  private void    updatemasterDebitDetails(String valueDate,String accountNumber){
//  masterDebitDetails=new ArrayList();
//      Connection cq=quaryObj.createConnection(); 
// 
//          try {
//              
//             cq.setAutoCommit(false);
//              String query = "SELECT trn_id,ledger_balance FROM bsanca"+accountNumber+"  WHERE trn_date>"+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(valueDate)+"'";
//              PreparedStatement ps =  cq.prepareStatement(query);
//             
//              ResultSet rs = ps.executeQuery();
//              int k=0;
//             
//              while (rs.next()) {
//                    List   datav = new ArrayList<>();     
//                        datav.add(rs.getString("trn_id"));
//                        datav.add(rs.getString("ledger_balance"));
//                         masterDebitDetails.add(k, datav);
//                       k++;      
//                    }
//             cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//          } catch (SQLException ex) {
//              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
//          }
// 
//  
//  
//  
//  }
  
//  private void    updatemasterCreditDetails(String valueDate,String accountNumber){
//  masterCreditDetails=new ArrayList();
//      Connection cq=quaryObj.createConnection(); 
// 
//          try {
//              
//             cq.setAutoCommit(false);
//              String query = "SELECT trn_id,ledger_balance FROM bsanca"+accountNumber+"  WHERE trn_date>"+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(valueDate)+"'";
//              PreparedStatement ps =  cq.prepareStatement(query);
//             
//              ResultSet rs = ps.executeQuery();
//              int k=0;
//             
//              while (rs.next()) {
//                    List   datav = new ArrayList<>();     
//                        datav.add(rs.getString("trn_id"));
//                        datav.add(rs.getString("ledger_balance"));
//                         masterCreditDetails.add(k, datav);
//                       k++;      
//                    }
//             cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//          } catch (SQLException ex) {
//              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
//          }
// 
//  
//  
//  
//  }
//  private void  updatethefinalItem(String trnId,String newBal,String accountn){
//
//      
//   Connection cq=quaryObj.createConnection(); 
//        try {
//           cq.setAutoCommit(false);
//           String UpdateQuary = "UPDATE bsanca"+accountn+" SET ledger_balance=?  WHERE trn_id=?";
//           
//            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
//        ps.setObject(1, newBal);
//        ps.setObject(2, trnId);
//         ps.execute();
//           
//           cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//       } catch (SQLException ex) {
//           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//       }
//   
//  
//      
//  }
  
//  private List<List>itemsToUpdate(String valueDate,String accountNumber){
//      
//  List<List> mainItems= new ArrayList();
//  
//  Connection cq=quaryObj.createConnection(); 
//         
//          try {
//             cq.setAutoCommit(false);
//              String query = "SELECT trn_id,ledger_balance FROM bsanca"+accountNumber+"  WHERE trn_date>"+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(valueDate)+"'";
//              PreparedStatement ps =  cq.prepareStatement(query);
//             
//              ResultSet rs = ps.executeQuery();
//              int k=0;
//             
//              while (rs.next()) {
//                    List   datav = new ArrayList<>();     
//                        datav.add(rs.getString("trn_id"));
//                          datav.add(rs.getString("ledger_balance"));
//                       mainItems.add(k, datav);
//                       k++;      
//                    }
//             cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//          } catch (SQLException ex) {
//              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
//          }
// 
//  
//  
//  return mainItems;
//  
//  }
//  
//  
  
  
  
 public void updateStore(String newbal,String accountNumber){
 String newBalanceNow=getNewBalanceNow(accountNumber);
     Connection cq=quaryObj.createConnection(); 
        try {
           cq.setAutoCommit(false);
           String UpdateQuary = "UPDATE account_created_store SET running_balance=?  WHERE account_number=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
        ps.setObject(1, newBalanceNow);
        ps.setObject(2, accountNumber);
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
   
 
     
 }
 
 public void updateStore1(String newbal,String accountNumber){
     
String newBalanceNow=getNewBalanceNow(accountNumber);
      
 Connection cq=quaryObj.createConnection(); 
        try {
           cq.setAutoCommit(false);
           String UpdateQuary = "UPDATE account_created_store SET running_balance=?,trn_date=?  WHERE account_number=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
        ps.setObject(1, newBalanceNow);
        ps.setObject(2, getDBCurrentDate());
        ps.setObject(3, accountNumber);
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
   
 
    
 }
 String getNewBalanceNow(String accountN){
 String newBal="";
 if(!testTable("bsanca"+accountN)){
 Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT ledger_balance FROM  "+"BSANCA"+accountN+" "+"WHERE  trn_date<="+"'"+this.getDBCurrentDate()+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
            
             
              if (rs.last()) {
                       
                newBal =rs.getString("ledger_balance");
                    
     
          
              }
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 if(newBal.isEmpty()){
 
 newBal="0.0";
 }
 }else{ 
     
     newBal="0.0";
 
 }
 return newBal;
 }
 String getNewBalance(String accountN){
 String newBal="";
 if(!testTable("bsanca"+accountN)){
 Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT ledger_balance FROM  "+"BSANCA"+accountN+" "+"WHERE  trn_date<="+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "valueDate.txt")))+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
            
             
              if (rs.last()) {
                       
                newBal =rs.getString("ledger_balance");
                    
     
          
              }
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 if(newBal.isEmpty()){
 
 newBal="0.0";
 }
 }else{ 
     
     newBal="0.0";
 
 }

  
 return newBal;
 }
 
 
  public synchronized void   fillWithBiodataSexIfExists(JComboBox userBox,String accountNu,Component cax){
       
          String accountName="";

        ArrayList <String> useNames=new ArrayList();

//        JOptionPane.showMessageDialog(cax, sexThere(accountNu,cax)+"");
        
          if(sexThere(accountNu,cax)){ 
   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT DISTINCT  Sex FROM master WHERE account_number="+"'"+accountNu+"' AND NOT Sex="+"'"+"Select"+"'";
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("Sex");
           
            useNames.add(accountName);
            
             }
       
  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
          }else{
              
          useNames.add("Male"); 
          useNames.add("Female"); 
          
          }
          
    modelcombo = new MyComboBoxModel(useNames);      
    userBox.setModel(modelcombo); 
   userBox.setSelectedIndex(0);
       userBox.setEditable(false);    
       }  
      
  public synchronized void   fillWithBiodataMaritalStatusIfExists(JComboBox userBox,String accountNu){
       
          String accountName="";

        ArrayList <String> useNames=new ArrayList();

        
          if(maritalStatusThere(accountNu)){ 
   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT DISTINCT  marital_status FROM master WHERE account_number="+"'"+accountNu+"' AND NOT marital_status="+"'"+"Select"+"'";
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("marital_status");
           
            useNames.add(accountName);
            
             }
       modelcombo = new MyComboBoxModel(useNames);
                    userBox.setModel(modelcombo); 
   userBox.setSelectedIndex(0);
       userBox.setEditable(false);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
          }
             
       }  
  
  public synchronized void   fillWithBiodataContactNumberIfExists(JTextField userBox,String accountNu){
       
          String accountName="";

        ArrayList <String> useNames=new ArrayList();

        
          if(emailThere(accountNu)){ 
   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT DISTINCT  email FROM master WHERE account_number="+"'"+accountNu+"' AND NOT email="+"'"+"Select"+"'";
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("email");
           
            useNames.add(accountName);
            
             }
       userBox.setText(accountName);
//       userBox.setEditable(false);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
          }
             
       }
   public synchronized void   fillWithBiodataContactMobileIfExists(JTextField userBox,String accountNu){
       
          String accountName="";

        ArrayList <String> useNames=new ArrayList();

        
          if(mobileThere(accountNu)){ 
   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT DISTINCT  mobile1 FROM master WHERE account_number="+"'"+accountNu+"' AND NOT mobile1="+"'"+"Select"+"'";
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("mobile1");
           
            useNames.add(accountName);
            
             }
       userBox.setText(accountName);
//       userBox.setEditable(false);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
          }
             
       }  
  
  
   public synchronized void   fillWithBiodataEducatioLevelIfExists(JComboBox userBox,String accountNu){
       
          String accountName="";

        ArrayList <String> useNames=new ArrayList();

        
          if(educationLevelThere(accountNu)){ 
   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT DISTINCT  highest_educ_level FROM master WHERE account_number="+"'"+accountNu+"' AND NOT highest_educ_level="+"'"+"Select"+"'";
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("highest_educ_level");
           
            useNames.add(accountName);
            
             }
       modelcombo = new MyComboBoxModel(useNames);
                    userBox.setModel(modelcombo); 
   userBox.setSelectedIndex(0);
       userBox.setEditable(false);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
          }
             
       }  
  
  public boolean sexThere(String accountNu,Component cc){

//      JOptionPane.showMessageDialog(cc, accountNu);
        boolean theIds=false; int conf=0;

   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT  COUNT(Sex) AS GNames FROM master WHERE account_number="+"'"+accountNu+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            if(rst3.next()){
               
           conf=rst3.getInt("GNames");
   
            
             }
//         JOptionPane.showMessageDialog(cc, conf);  
       if(conf>0){
       theIds=true;
       } 
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 return theIds;
 
 
 }      
                
  public boolean educationLevelThere(String accountNu){

        boolean theIds=false; int conf=0;

   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT  COUNT(highest_educ_level) AS GNames FROM master WHERE account_number="+"'"+accountNu+"' AND NOT highest_educ_level="+"'"+"Select"+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           conf=rst3.getInt("GNames");
   
            
             }
          
       if(conf>0){
       theIds=true;
       } 
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 return theIds;
 
 
 }   
  
   public boolean emailThere(String accountNu){

        boolean theIds=false; int conf=0;

   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT  COUNT(email) AS GNames FROM master WHERE account_number="+"'"+accountNu+"' AND NOT email="+"'"+"Select"+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           conf=rst3.getInt("GNames");
   
            
             }
          
       if(conf>0){
       theIds=true;
       } 
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 return theIds;
 
 
 }      
  public boolean mobileThere(String accountNu){

        boolean theIds=false; int conf=0;

   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT  COUNT(mobile1) AS GNames FROM master WHERE account_number="+"'"+accountNu+"' AND NOT mobile1="+"'"+"Select"+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           conf=rst3.getInt("GNames");
   
            
             }
          
       if(conf>0){
       theIds=true;
       } 
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 return theIds;
 
 
 }      
  public boolean maritalStatusThere(String accountNu){

        boolean theIds=false; int conf=0;

   try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "SELECT  COUNT(marital_status) AS GNames FROM master WHERE account_number="+"'"+accountNu+"' AND NOT marital_status="+"'"+"Select"+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           conf=rst3.getInt("GNames");
   
            
             }
          
       if(conf>0){
       theIds=true;
       } 
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 return theIds;
 
 
 }      
  
 public List feelTextAreaWithCustomerEmails(Component c){
     
    List theEmails =new ArrayList();
    
Connection cq=quaryObj.createConnection();

              
          try {
             cq.setAutoCommit(false);
             
              String query = "SELECT email FROM master";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
             
              while (rs.next()) {
                
//                  JOptionPane.showMessageDialog(c, rs.getString("email"));
                   theEmails.add(rs.getString("email"));
                   
                 
                       
                    }
              
                     
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 return theEmails;
 }
 
 public List feelTextAreaWithCustomerPhones(Component c){
     
    List theEmails =new ArrayList();
    
Connection cq=quaryObj.createConnection();

              
          try {
             cq.setAutoCommit(false);
             
              String query = "SELECT  mobile1 FROM master";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
             
              while (rs.next()) {
                
//                  JOptionPane.showMessageDialog(c, rs.getString("email"));
                   theEmails.add(rs.getString("mobile1"));
                   
                 
                       
                    }
              
                     
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 return theEmails;
 }
 
 
 public List feelTextAreaWithCustomerPhonesBorrowing(Component c){
     
    List theEmails =new ArrayList();
    
Connection cq=quaryObj.createConnection();

              
          try {
             cq.setAutoCommit(false);
             
              String query = "select master.mobile1 from pmms.master INNER JOIN  pmms_loans.new_loan_appstore ON master. account_number=new_loan_appstore. applicant_account_number WHERE  (new_loan_appstore.loan_cycle_status="+"'"+"Disbursed"+"'"+" OR new_loan_appstore.loan_cycle_status="+"'"+"Renewed"+"')";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
             
              while (rs.next()) {
                
//                  JOptionPane.showMessageDialog(c, rs.getString("email"));
                   theEmails.add(rs.getString("mobile1"));
                   
                 
                       
                    }
              
                     
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 return theEmails;
 }
 
 
 
 
 
 public List feelTextAreaWithBoardStaffD(Component c){
     
    List staff=this.boardMembersAndStaff();
    
    List theEmails =new ArrayList();
    for(Object accSt:staff){
Connection cq=quaryObj.createConnection();

              
          try {
             cq.setAutoCommit(false);
             
              String query = "SELECT email FROM master where account_number="+accSt.toString();
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
             
              if (rs.first()) {
                
//                  JOptionPane.showMessageDialog(c, rs.getString("email"));
                   theEmails.add(rs.getString("email"));
                   
                 
                       
                    }
              
                     
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
    }
 
 return theEmails;
 }
 
 
 public List feelTextAreaWithBoardStaffDPhone(Component c){
     
    List staff=this.boardMembersAndStaff();
    
    List theEmails =new ArrayList();
    for(Object accSt:staff){
Connection cq=quaryObj.createConnection();

              
          try {
             cq.setAutoCommit(false);
             
              String query = "SELECT mobile1 FROM master where account_number="+accSt.toString();
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
             
              if (rs.first()) {
                
//                  JOptionPane.showMessageDialog(c, rs.getString("email"));
                   theEmails.add(rs.getString("mobile1"));
                   
                 
                       
                    }
              
                     
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
    }
 
 return theEmails;
 }
 
 
 
 
 public String feelTextAreaWithCustomerEmailsA(Component c,String a){
     
    String theEmails ="augbazi@gmail.com";
    
Connection cq=quaryObj.createConnection();

              
          try {
             cq.setAutoCommit(false);
             
              String query = "SELECT email FROM master where account_number="+"'"+a+"'";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
             
              if (rs.first()) {
                
//                  JOptionPane.showMessageDialog(c, rs.getString("email"));
                   theEmails=rs.getString("email");
                   
                 
                       
                    }
              
                     
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 return theEmails;
 }
 
 
 
 
 public void feelWithAccountNamesCurrentLiabilitesCustomers(JComboBox box){
Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT DISTINCT account_name FROM account_created_store WHERE account_master>='5020000' AND account_master<='5029999'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 
 }
  public void feelWithAccountNamesCurrentLiabilitesCustomerssu(JComboBox box,String criteria){
Connection cq=quaryObj.createConnection(); 
              data8 = new ArrayList<>();
          try {
             cq.setAutoCommit(false);
              String query = "SELECT DISTINCT account_name FROM account_created_store WHERE (account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setEditable(false);
                     box.setSelectedItem(data8.get(0));
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 
 }
  
//  public void feelWithAccountNamesCurrentLiabilitesCustomerssu(JComboBox box,String criteria){
//Connection cq=quaryObj.createConnection(); 
//              data8 = new ArrayList<>();
//          try {
//             cq.setAutoCommit(false);
//              String query = "SELECT DISTINCT account_name FROM account_created_store WHERE (account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
//              PreparedStatement ps =  cq.prepareStatement(query);
//             
//              ResultSet rs = ps.executeQuery();
//              int k=0;
//             
//              while (rs.next()) {
//                       
//                        data8.add(k, rs.getString("account_name"));
//                       k++;  
//                      
//                    }
//               if(k==0){data8.add(k, "Empty Record");} 
//                    modelcombo = new MyComboBoxModel(data8);
//                     box.setModel(modelcombo);
//                     box.setEditable(false);
//                     box.setSelectedItem(data8.get(0));
//             cq.setAutoCommit(true);
//           quaryObj.closeConnection(cq);
//          } catch (SQLException ex) {
//              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
//          }
// 
// 
// 
// }
  
  
  
  
  
 public void getAccountName(String accountNumber, JTextField tf){

     tf.setText(this.AccountName(accountNumber));
 
 }
  public void getAccountNumber(String accountNumber, JTextField tf){

     tf.setText(accountNumber);
 
 }
 public String getShares(String accountNo){
 String Shares="";
 fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountNo+".txt"));
          
       Shares= fios.stringFileReader(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountNo+".txt")).replace(",", "");

 return Shares;
 
 
 }
 
 
  public String getSharesF(String accountNo){
 String Shares="";
 fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountNo+".txt"));
          
       Shares= fios.stringFileReader(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountNo+".txt")).replace(",", "");

 return Shares;
 
 
 }
 
 
 public void feelWithCharges( JComboBox box){
  	
        data8 = new ArrayList<>();
          try {
              Connection cq=quaryObj.createConnection(); 
              cq.setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='3000000' AND account_master<='3239999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
                      cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 

 }
 
 
 public void setChargesAccount( JComboBox box){
  	
        data8 = new ArrayList<>();
          
                     
                        data8.add(0, fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setChargesAc1.txt")).split("[,]", 2)[0]);
                     
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
                      
 }
 
  public void setInsurancceAccount( JComboBox box){
  	
        data8 = new ArrayList<>();
          
                       
                        data8.add(0, fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setInsuranceAc1.txt")).split("[,]", 2)[0]);
                     
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
                      
 }
 
 
 public void feelWithInsurance(JComboBox box){
	
     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='3000000' AND account_master<='3239999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 
 public void feelWithInterest(JComboBox box){

     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='3000000' AND account_master<='3039999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
  public void feelWithLoansAndSaccoLiabilities(JComboBox box){
  
     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);

              String query = "SELECT account_number FROM account_created_store WHERE (account_master>='1280000' AND account_master<='1289999') OR (account_master>='5050000' AND account_master<='5059999')";

              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
  }
 public void feelWithLoans(JComboBox box){


     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='1280000' AND account_master<='1289999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 	
 public void feelWithBank(JComboBox box){

     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='1220000' AND account_master<='1249999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 
 public void feelWithCash(JComboBox box){

     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='1220000' AND account_master<='1249999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 
 
//   feelWithCashAndBankLoans
 public void feelWithCashAndBank(JComboBox box){
//feelWithCashAndBank
     data8 = new ArrayList<>();
     data8.add("Select DR A/C");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE (account_number LIKE '01122%' OR account_number LIKE '01123%')" ;
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=1;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k<=1){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 
 
 
  public void feelWithROIExpense(JComboBox box){
//feelWithCashAndBank
     data8 = new ArrayList<>();
     data8.add("Select DR A/C");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE account_number LIKE '0440800%'" ;
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=1;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k<=1){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
  
  
  public void feelWithDirLoanDisbuse(JComboBox box){
//feelWithCashAndBank
     data8 = new ArrayList<>();
     data8.add("Select DR A/C");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE account_number LIKE '01128%'" ;
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=1;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k<=1){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
  
  
  
 public void feelWithCashAndBankLoans(JComboBox box){

     data8 = new ArrayList<>();
     
    data8.add("Select CR A/C");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE (account_number LIKE '01128%' OR account_number LIKE '01128%')" ;
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=1;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
//                    feelWithCapitalNames    
                    }
               if(k<=1){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 
public void  feelWithCapital(JComboBox box){

	

     data8 = new ArrayList<>();
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM account_created_store WHERE account_master>='4000000' AND account_master<='4109999'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_number"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }



}
 
public void  feelWithCapitalNames(JComboBox box){

	
 data8 = new ArrayList<>();
 data8.add("Select CR A/C");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE account_number LIKE '044%'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=1;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k<=1){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                     box.setModel(modelcombo);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
}

public void  feelWithAssetNames(JComboBox box){

	
 List data8k = new ArrayList<>();
 data8k.add("Select The Asset");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE ((account_master>=1010001&&account_master<=1060001)||(account_master>=1360001&&account_master<=1390001))";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8k.add(rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k==0){data8k.add("Empty Record");} 
                    modelcombon = new myComboBoxObject1(data8k);
                     box.setModel(modelcombon);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
}
public void  feelWithAccumulatedDepNames(JComboBox box){

	
 List data8k = new ArrayList<>();
 data8k.add("Select Accum Depreciation");
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT  account_name FROM account_created_store WHERE account_master=1070001";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8k.add(rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k==0){data8k.add("Empty Record");} 
                    modelcombon = new myComboBoxObject1(data8k);
                     box.setModel(modelcombon);
                     box.setSelectedIndex(0);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
}






 public void  updateMasterDebit(String newBal,String accountNumber,String masterName,String valueDate){
 
   masterName=masterName.replace(" ", "&");
    
    masterName=masterName.replace("/", "&");
    masterName=masterName.replace("-", "&");
    masterName=masterName.replace("\\", "&");
    masterName=masterName.replace("(", "&");
    masterName=masterName.replace(")", "&");
     masterName=masterName.replace("&&&&", "&");  
     masterName=masterName.replace("&&&", "&"); 
     masterName=masterName.replace("&&", "&");
      masterName=masterName.replace("&", "_");
     
      String masterAccount=retriveMasterAccount(masterName);
//         Date today=fmt.convertTdate(sdf.format(new Date(System.currentTimeMillis())));
//   Date valueDated=fmt.convertTdate(valueDate);
//      if((valueDated.after(today)||valueDated.equals(today))){
          
 String previouslyAdded=previousBalance(masterAccount,accountNumber);

 String masterBalance=masterBalances(masterAccount);

 double first=parseDouble(getNewBalance(accountNumber));

 double second=(parseDouble(masterBalance)-parseDouble(previouslyAdded));

 double last=first+second;

 String newBalances=Double.toString(last);
 
 insertIntoMaster(masterAccount,accountNumber,getNewBalance(accountNumber),newBalances);
 
 updateRelatedBoss(masterAccount,newBalances);
 
//      }else if(valueDated.before(today)){
//          
// int k=0;  String masterBalance=masterBalances(masterAccount,valueDate);
// 
// List<List> oldMasterDetails=getOldMasterDetails(masterAccount,valueDate);  
// 
//      List<List> finalUpdate=new ArrayList();
//      
// while(k<oldMasterDetails.size()){
//     
//     
// if(currentOldBalanceExistsDebit(oldMasterDetails.get(k).get(1).toString())){
//     
//     if(currentOldBalanceMoreThanOneDebit(oldMasterDetails.get(k).get(1).toString())){
//     
//         String trnid= getFirstTrnIdDebit(oldMasterDetails.get(k).get(1).toString());
//         List finalUpdate1=new ArrayList();
//     finalUpdate1.add(oldMasterDetails.get(k).get(0));//trn id
//     finalUpdate1.add(oldMasterDetails.get(k).get(1)); //old balance  
//     finalUpdate1.add(getNewBalaceAmount(trnid,accountNumber)); //new balance 
//     finalUpdate.add(finalUpdate1);
//     }else{
//       String trnida= getTheTrnIdDebit(oldMasterDetails.get(k).get(1).toString()); 
//          List finalUpdate2=new ArrayList();
//     finalUpdate2.add(oldMasterDetails.get(k).get(0));//trn id
//     finalUpdate2.add(oldMasterDetails.get(k).get(1));   //old balance  
//     finalUpdate2.add(getNewBalaceAmount(trnida,accountNumber)); //new balance  
//  finalUpdate.add(finalUpdate2);
//     }
// 
// 
// }else{
//       List finalUpdate3=new ArrayList();
//   finalUpdate3.add(oldMasterDetails.get(k).get(0));//trn id
//     finalUpdate3.add("0.0");    //old balance  
//     finalUpdate3.add(oldMasterDetails.get(k).get(1));  //new balance 
// 
//  finalUpdate.add(finalUpdate3);
// }
// 
// k++;
// }
      
//     updateOldMast(finalUpdate,masterBalance,masterAccount); 
//     
//      }
 }
 
 
 public void  updateMasterCredit(String newBal,String accountNumber,String masterName,String valueDate){
 
   masterName=masterName.replace(" ", "&");
    
    masterName=masterName.replace("/", "&");
    masterName=masterName.replace("-", "&");
    masterName=masterName.replace("\\", "&");
    masterName=masterName.replace("(", "&");
    masterName=masterName.replace(")", "&");
     masterName=masterName.replace("&&&&", "&");  
     masterName=masterName.replace("&&&", "&"); 
     masterName=masterName.replace("&&", "&");
      masterName=masterName.replace("&", "_");
     
      String masterAccount=retriveMasterAccount(masterName);
//         Date today=fmt.convertTdate(sdf.format(new Date(System.currentTimeMillis())));
//   Date valueDated=fmt.convertTdate(valueDate);
//      if((valueDated.after(today)||valueDated.equals(today))){
          
 String previouslyAdded=previousBalance(masterAccount,accountNumber);

 String masterBalance=masterBalances(masterAccount);

 double first=parseDouble(getNewBalance(accountNumber));

 double second=(parseDouble(masterBalance)-parseDouble(previouslyAdded));

 double last=first+second;

 String newBalances=Double.toString(last);
 
 insertIntoMaster(masterAccount,accountNumber,getNewBalance(accountNumber),newBalances);
 
 updateRelatedBoss(masterAccount,newBalances);
 
//      }else if(valueDated.before(today)){
          
// int k=0;  String masterBalance=masterBalances(masterAccount,valueDate);
// 
// List<List> oldMasterDetails=getOldMasterDetails(masterAccount,valueDate);  
// 
//      List<List> finalUpdate=new ArrayList();
//      
// while(k<oldMasterDetails.size()){
//     
//     
// if(currentOldBalanceExistsCredit(oldMasterDetails.get(k).get(1).toString())){
//     
//     if(currentOldBalanceMoreThanOneCredit(oldMasterDetails.get(k).get(1).toString())){
//     
//         String trnid= getFirstTrnIdCredit(oldMasterDetails.get(k).get(1).toString());
//         List finalUpdate1=new ArrayList();
//     finalUpdate1.add(oldMasterDetails.get(k).get(0));//trn id
//     finalUpdate1.add(oldMasterDetails.get(k).get(1)); //old balance  
//     finalUpdate1.add(getNewBalaceAmount(trnid,accountNumber)); //new balance 
//     finalUpdate.add(finalUpdate1);
//     }else{
//       String trnida= getTheTrnIdCredit(oldMasterDetails.get(k).get(1).toString()); 
//          List finalUpdate2=new ArrayList();
//     finalUpdate2.add(oldMasterDetails.get(k).get(0));//trn id
//     finalUpdate2.add(oldMasterDetails.get(k).get(1));   //old balance  
//     finalUpdate2.add(getNewBalaceAmount(trnida,accountNumber)); //new balance  
//  finalUpdate.add(finalUpdate2);
//     }
// 
// 
// }else{
//       List finalUpdate3=new ArrayList();
//   finalUpdate3.add(oldMasterDetails.get(k).get(0));//trn id
//     finalUpdate3.add("0.0");    //old balance  
//     finalUpdate3.add(oldMasterDetails.get(k).get(1));  //new balance 
// 
//  finalUpdate.add(finalUpdate3);
// }
// 
// k++;
// }
//      
//     updateOldMast(finalUpdate,masterBalance,masterAccount); 
     
//      }
 }
 private String getNewBalaceAmount(String trnId,String accountNumber){
 String newBalance="";
 
      Connection cq=quaryObj.createConnection(); 
 
          try {
             cq.setAutoCommit(false);
              String query = "SELECT ledger_balance FROM bsanca"+accountNumber+"  WHERE trn_id="+"'"+trnId+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
    
              while (rs.next()) {
             
               newBalance=rs.getString("ledger_balance");
              
              }
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 return newBalance;
 }
 private boolean currentOldBalanceExistsDebit(String amount){
 boolean exists=false;int u=0;
 
 while(u<masterDebitDetails.size()){
 if(parseDouble(masterDebitDetails.get(u).get(1).toString())==parseDouble(amount)){
 
 exists=true;
 break;
 
 }
 u++;
 }

 return exists;
 }
//  private boolean currentOldBalanceExistsCredit(String amount){
// boolean exists=false;int u=0;
// 
// while(u<masterCreditDetails.size()){
// if(parseDouble(masterCreditDetails.get(u).get(1).toString())==parseDouble(amount)){
// 
// exists=true;
// break;
// 
// }
// u++;
// }
//
// return exists;
// }
//private boolean currentOldBalanceMoreThanOneDebit(String amount2){
//boolean moreThanOnce=false; int y=0,counter=1;
//while(y<masterDebitDetails.size()){
// if(parseDouble(masterDebitDetails.get(y).get(1).toString())==parseDouble(amount2)){
//counter++;
// 
// }
// y++;
// }
//if(counter>1){
//moreThanOnce=true;
//}
//return moreThanOnce;
//} 
//private boolean currentOldBalanceMoreThanOneCredit(String amount2){
//boolean moreThanOnce=false; int y=0,counter=1;
//while(y<masterCreditDetails.size()){
// if(parseDouble(masterCreditDetails.get(y).get(1).toString())==parseDouble(amount2)){
//counter++;
// 
// }
// y++;
// }
//if(counter>1){
//moreThanOnce=true;
//}
//return moreThanOnce;
//} 
//private String getTheTrnIdDebit(String amount){
//String id="";int y=0;
//
//while(y<masterDebitDetails.size()){
// if(parseDouble(masterDebitDetails.get(y).get(1).toString())==parseDouble(amount)){
//
//     id=masterDebitDetails.get(y).get(0).toString();
//     int xc=masterDebitDetails.indexOf(masterDebitDetails.get(y));
//     masterDebitDetails.remove(xc);
//     break;
//     
// }
// y++;
//}
//
//   
// 
//
//    
//return id;
//}
//private String getTheTrnIdCredit(String amount){
//String id="";int y=0;
//
//while(y<masterCreditDetails.size()){
// if(parseDouble(masterCreditDetails.get(y).get(1).toString())==parseDouble(amount)){
//
//     id=masterCreditDetails.get(y).get(0).toString();
//     int xc=masterCreditDetails.indexOf(masterCreditDetails.get(y));
//     masterCreditDetails.remove(xc);
//     break;
//     
// }
// y++;
//}
//
//   
// 
//
//    
//return id;
//}
//private String getFirstTrnIdDebit(String amount3){
// List<Integer>  datah = new ArrayList<>();  
//    String min=""; int y=0; int kd=0;
//while(y<masterDebitDetails.size()){
//    
// if(parseDouble(masterDebitDetails.get(y).get(1).toString())==parseDouble(amount3)){
//
//     datah.add(parseInt(masterDebitDetails.get(y).get(0).toString()));
//     
// }
// y++;
//}
//
//    int minIndex = datah.indexOf(Collections.min(datah));
//    min=datah.get(minIndex)+"";
//    
//    while(kd<masterDebitDetails.size()){
//    
// if(parseInt(masterDebitDetails.get(kd).get(0).toString())==parseInt(min)){
//
//  int indx=masterDebitDetails.indexOf(masterDebitDetails.get(kd));
//     masterDebitDetails.remove(indx);
//     break;
// }
// kd++;
////}
//    
//return min;
//
//}
//private String getFirstTrnIdCredit(String amount3){
// List<Integer>  datah = new ArrayList<>();  
//    String min=""; int y=0; int kd=0;
//while(y<masterCreditDetails.size()){
//    
// if(parseDouble(masterCreditDetails.get(y).get(1).toString())==parseDouble(amount3)){
//
//     datah.add(parseInt(masterCreditDetails.get(y).get(0).toString()));
//     
// }
// y++;
//}
//
//    int minIndex = datah.indexOf(Collections.min(datah));
//    min=datah.get(minIndex)+"";
//    
//    while(kd<masterCreditDetails.size()){
//    
// if(parseInt(masterCreditDetails.get(kd).get(0).toString())==parseInt(min)){
//
//  int indx=masterCreditDetails.indexOf(masterCreditDetails.get(kd));
//     masterCreditDetails.remove(indx);
//     break;
// }
// kd++;
//}
//    
//return min;
//
//}
//private void updateOldMast(List<List> finalUpdate,String masterBalance,String masterAccount){
//    
//double initialBal=parseDouble(masterBalance);
//
//int k=0;
//
//double actualValue=0.0;
//
//while(k<finalUpdate.size()){
//    
//double oldValue=parseDouble(finalUpdate.get(k).get(1).toString());
//
//double newValue=parseDouble(finalUpdate.get(k).get(2).toString());
//
//if(oldValue==0.0){
//   
//actualValue=initialBal;
//fios.stringFileWriter(fios.createFileName("PMMS_Statements", "reports", "accountName"+k+masterAccount+".txt"), actualValue+""); 
//}else{
//    
//actualValue=((initialBal-oldValue)+newValue);
//fios.stringFileWriter(fios.createFileName("PMMS_Statements", "reports", "accountName"+k+masterAccount+".txt"), actualValue+""); 
//
//}
//  try {
//
//          Connection cq=quaryObj.createConnection(); 
//            cq.setAutoCommit(false);
//            String UpdateQuary = "UPDATE bsanca"+masterAccount+" SET account_balance=?,master_balance=? WHERE trn_id=?";
//            try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
//                pstool.setObject(1, newValue);
//                pstool.setObject(2, actualValue);
//                pstool.setObject(3, finalUpdate.get(k).get(0).toString());
//                 pstool.executeUpdate();
//           pstool.close();
//            } 
//           cq.setAutoCommit(true);
//            quaryObj.closeConnection(cq);
//        } catch (SQLException ex) {
//            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//initialBal=actualValue;
//k++;
//}
//
//
//}
//private List getOldMasterDetails(String masterAccount,String valueDate){
// 
//List<List> masterDetails2=new ArrayList(); int k=0;
// 
//     try {
//           Connection cq=quaryObj.createConnection(); 
//           
//                cq.setAutoCommit(false);
//                
//               String query = "SELECT trn_id,account_balance, master_balance FROM"+" "+"bsanca"+masterAccount+"  WHERE trn_date>"+"'"+fmt.forDatabaseWithFullYearBeginningWithDate(valueDate)+"'";
//               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
//             
//               ResultSet rs = ps.executeQuery();
//            
//            while(rs.next()) {
//                   List theItems=new ArrayList();
//                   theItems.add(rs.getInt("trn_id"));
//                     theItems.add(rs.getDouble("account_balance"));
//                      theItems.add(rs.getDouble("master_balance"));
//                     masterDetails2.add(k, theItems);
//                   k++;
//               }
//             
//           cq.setAutoCommit(true);
//            quaryObj.closeConnection(cq);
//          } catch (SQLException ex) {
//              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
//          }
// return masterDetails2;
// 
// }
 
 public String retriveMasterAccount(String accountName){

//     String masterAccount=fios.stringFileReader(fios.createFileName("accountManagement", "masterAccounts", accountName+".txt"));


 String masterAccount=""; 
  
     try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
               String query = "SELECT account_number FROM account_master_store WHERE account_name="+"'"+accountName+"'";
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
               ResultSet rs = ps.executeQuery();
            
            if(rs.last()) {
                   
                   masterAccount= rs.getString("account_number");
              
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
    
return  masterAccount;
 
 }
 
public String previousBalance(String masterAccount,String accountNumber){

          
   String previousBalance=""; int k=0;
   if(testTable("bsanca"+accountNumber)){
     try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
               String query = "SELECT account_balance FROM"+" "+"bsanca"+masterAccount+"  WHERE account_number="+accountNumber;
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
               ResultSet rs = ps.executeQuery();
            
            if(rs.last()) {
                   
                   previousBalance= rs.getString("account_balance");
                 
                   k++;
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
   if(k==0){
   previousBalance="0.0";
   }
   }else{
   
   previousBalance="0.0";
   
   }
  
 return previousBalance;

        }

    public String masterBalances(String masterAccount){

  String masterBalance=""; int k=0;
  if(!testTable("bsanca"+masterAccount)){

     try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
               String query = "SELECT master_balance FROM"+" "+"bsanca"+masterAccount;
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
               ResultSet rs = ps.executeQuery();
            
            if(rs.last()) {
                   
                   masterBalance= rs.getString("master_balance");
                 
                   k++;
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
   if(k==0){
   masterBalance="0.0";
   }
  }else{
   masterBalance="0.0";
  
  }
   
 return masterBalance;


    }
    
 public void insertIntoMaster(String masterAccount, String accountNumber, String newBal,String newBals){

     String accountName=AccountName(accountNumber);

      try {
            Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =quaryObj.createConnection().prepareStatement("INSERT INTO BSANCA"+masterAccount+" "+"VALUES(?,?,?,?,?,?,?,?)");
         ps1.setObject(1, null);
         ps1.setObject(2, getDBCurrentDate());
          ps1.setObject(3,   fmt.forDatabaseWithFullYearBeginningWithDate(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "valueDate.txt"))));
         ps1.setObject(4,accountName);
         ps1.setObject(5,accountNumber);
         ps1.setObject(6,newBal);
         ps1.setObject(7,newBals);
         ps1.setObject(8,fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "activeUserId.txt")));
         ps1.executeUpdate();
         cq.setAutoCommit(false);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }
 
 
 
 }
 
 public void deleteAccumStore(String theId){

     
          try {
           Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
                            PreparedStatement psxmts =  cq.prepareStatement("DELETE FROM depreciationstore WHERE TrnId="+theId);

            psxmts.execute();
               cq.setAutoCommit(true);
              
//               }
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }


 }
 
 public int getDpriStartId(String accountNumber,Component c){
     
//     JOptionPane.showConfirmDialog(c, accountNumber);
 int trnId=0;
   try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
                
               String query = "SELECT  TrnId FROM depreciationschedule WHERE AssetAccountNumber="+"'"+accountNumber+"' AND NOT DepreciationStatus='D'";
               
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
           if(rs.first()) {
                   
trnId =rs.getInt("TrnId");
//     JOptionPane.showConfirmDialog(c, trnId);               
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
//  JOptionPane.showConfirmDialog(c, trnId);       
  
 return trnId;   
     
     
     
 }
 
 
 public double depriAmount(String accountNumber,int numberInstalments,Component c){

 
 int theStartingId=getDpriStartId(accountNumber,c);
 int theEndId=theStartingId+numberInstalments;
// JOptionPane.showMessageDialog(c, theStartingId+" "+theEndId);
 double Instalments=0;
   try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
                
               String query = "SELECT  SUM(Depreciation) AS theInstalmens FROM depreciationschedule WHERE ((AssetAccountNumber="+"'"+accountNumber+"' AND  TrnId<"+theEndId+") AND NOT DepreciationStatus='D')";
               
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
           if(rs.first()) {
                   
Instalments =rs.getDouble("theInstalmens");
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
  
 return Instalments;   
     
     
 
 
 }
 
 public double depriAmountRemaining(String accountNumber){

 
// int theStartingId=getDpriStartId(accountNumber,c);
// int theEndId=theStartingId+numberInstalments;
// JOptionPane.showMessageDialog(c, theStartingId+" "+theEndId);
 double Instalments=0;
   try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
                
               String query = "SELECT  SUM(Depreciation) AS theInstalmens FROM depreciationschedule WHERE (AssetAccountNumber="+"'"+accountNumber+"' AND NOT DepreciationStatus='D')";
               
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
          if(rs.first()) {
                   
Instalments =rs.getDouble("theInstalmens");
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
  
 return Instalments;   
     
     
 
 
 }
 
 
 
 
 
  public boolean accumulationNotStarted(String theId){

     
         String lastItem=""; boolean depreciati=false;

     try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
                
               String query = "SELECT  DepreciationStatus FROM depreciationstore WHERE TrnId="+theId;
               
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
           while(rs.next()) {
                   
                   lastItem= rs.getString("DepreciationStatus");
                 
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
    if(lastItem.equalsIgnoreCase("NotStarted")){
    depreciati=true;
    } 
 return depreciati;   
 }
 
 
 
 public void deleteAccumSchedule(String theId){

     
          try {
           Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
                            PreparedStatement psxmts =  cq.prepareStatement("DELETE FROM depreciationschedule WHERE AssetId="+theId);

            psxmts.execute();
               cq.setAutoCommit(true);
              
//               }
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 
 
 }
 
 
 
 public void createAmortisableDepreciation(List depreciationItem,int salvage){


     switch(salvage){
         case 20:
      try {
            Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =quaryObj.createConnection().prepareStatement("INSERT INTO depreciationstore VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
         ps1.setObject(1, null);
         ps1.setObject(2, getDBCurrentDate());
          ps1.setObject(3,   fmt.forDatabaseWithFullYearBeginningWithDate(depreciationItem.get(6).toString()));
         ps1.setObject(4, fmt.forDatabaseWithFullYearBeginningWithDate(depreciationItem.get(5).toString()));
         ps1.setObject(5,depreciationItem.get(0).toString());
         ps1.setObject(6,this.getAccountNumber(depreciationItem.get(1).toString()));
         ps1.setObject(7,this.getAccountNumber(depreciationItem.get(2).toString()));
          ps1.setObject(8,depreciationItem.get(3).toString());
         ps1.setObject(9,"0.0");
         ps1.setObject(10,depreciationItem.get(3).toString());
          ps1.setObject(11,depreciationItem.get(4).toString());
          ps1.setObject(12,"NotStarted");
             ps1.setObject(13,"NA");
                ps1.setObject(14,"NA");
                   ps1.setObject(15,"NA");
         ps1.executeUpdate();
         cq.setAutoCommit(false);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }
     
      break;
         case 30: 
       try {
            Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =quaryObj.createConnection().prepareStatement("INSERT INTO depreciationstore VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
         ps1.setObject(1, null);
         ps1.setObject(2, getDBCurrentDate());
          ps1.setObject(3,   fmt.forDatabaseWithFullYearBeginningWithDate(depreciationItem.get(6).toString()));
         ps1.setObject(4, fmt.forDatabaseWithFullYearBeginningWithDate(depreciationItem.get(5).toString()));
         ps1.setObject(5,depreciationItem.get(0).toString());
         ps1.setObject(6,this.getAccountNumber(depreciationItem.get(1).toString()));
         ps1.setObject(7,this.getAccountNumber(depreciationItem.get(2).toString()));
         ps1.setObject(8,depreciationItem.get(3).toString());
         ps1.setObject(9,"0.0");
          ps1.setObject(10,depreciationItem.get(3).toString());
          ps1.setObject(11,depreciationItem.get(4).toString());
          ps1.setObject(12,"NotStarted");
             ps1.setObject(13,"NA");
                ps1.setObject(14,"NA");
                   ps1.setObject(15,"NA");
         ps1.executeUpdate();
         cq.setAutoCommit(false);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }       
             
             
             
             
             
             break;
 }
 
 
 }
 
 public boolean createAmortionDepreciationSchedule(List<List> depreciationItem){
int returned=2;boolean success=false;
//Depreciation//
//ClosingAssetValue//
//DepreciationStatus//
//OtherThree//
//OtherFour//
//OtherFive//
         
      // data4v.add(count);//Periods 0
       // data4v.add(depreciationDate);//Depreciation Date 1
        // data4v.add(theStraightDetails.get(0).toString());//Asset Id 2
         //  data4v.add(dbq.getAccountNumber(theStraightDetails.get(0).toString()));//Asset Account 3
     //  data4v.add(Math.abs(parseDouble(df2.format(openingAssetValaue))));//Opening Asset Value 4
      // data4v.add( Math.abs(parseDouble(df2.format(depreciation))));//Depreciation 5
     //  data4v.add(Math.abs(parseDouble(df2.format(closingAssetValue))));//Closing Asset Value 6
     
for(List theItem:depreciationItem){
      try {
            Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =quaryObj.createConnection().prepareStatement("INSERT INTO depreciationschedule VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
         ps1.setObject(1, null);// TrnId
         ps1.setObject(2, theItem.get(0));//Period
          ps1.setObject(3,   fmt.forDatabaseWithFullYearBeginningWithDate(theItem.get(1).toString()));//DepriDate
          ps1.setObject(4, theItem.get(7));//DepMonth
         ps1.setObject(5,theItem.get(8));//DepYear         
         ps1.setObject(6, theItem.get(2));//AssetId
         ps1.setObject(7,theItem.get(3));//AssetAccountNumber
         ps1.setObject(8,theItem.get(4));//OpeningAssetValue
         ps1.setObject(9,"0.0");//Depreciation
         ps1.setObject(10,theItem.get(5));//AcccumulatedDepreciation
         ps1.setObject(11,theItem.get(6));
         ps1.setObject(12,"ND");
             ps1.setObject(13,"NA");
                ps1.setObject(14,"NA");
                   ps1.setObject(15,"NA");
   returned=      ps1.executeUpdate();
         cq.setAutoCommit(false);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }
      
}
 if(returned==1){
 
 success=true;
 }
 return success;
 }
 
 
 
 
 public int getThelatestValueDepreciation(){
 
  int lastItem=0;

     try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
                
               String query = "SELECT  TrnId FROM depreciationstore";
               
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
            if(rs.last()) {
                   
                   lastItem= rs.getInt("TrnId");
                 
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
    
 
 return lastItem;
 }
 
 
 public void updateRelatedBoss(String accountNumber,String newBals){
 
      try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            String UpdateQuary = "UPDATE account_master_store SET trn_date=?,value_date=?,running_balance=?"
                    +"WHERE account_number=?";
            try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
                pstool.setObject(1, getDBCurrentDate());
                pstool.setObject(2, fmt.forDatabaseWithFullYearBeginningWithDate(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "valueDate.txt"))));
                pstool.setObject(3, newBals);
                pstool.setObject(4, accountNumber);
                 pstool.executeUpdate();
           pstool.close();
            } 
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
             }         
 
 
 

 
 
 
 
 public boolean hasAccountBalance(String accNu){
 boolean balance=false;
 
  String accountName=""; 
     try {
           Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
               String query = "SELECT ledger_balance FROM"+" "+"bsanca"+accNu;
               PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
               
               ResultSet rs = ps.executeQuery();
            
            if(rs.last()) {
                   
                   accountName= rs.getString("ledger_balance");
                 
                   
               }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
     
     if(parseDouble(accountName)==0.0){
     balance=false;
     }else{
     balance=true;
     }
 
 return balance;

 }
 
 public boolean txnCodeExistsBulk(String txnCode){
     
 boolean codeExist=false;
 
 int theCodeCount=0;
 
          try {
              
              Connection cq=quaryObj.createConnection(); 
              
             cq.setAutoCommit(false);
             
              String query = "SELECT COUNT(TrnCode) AS codeNo FROM bulkuploads WHERE TrnCode="+"'"+txnCode+"'";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
    
              while (rs.next()) {
             
               theCodeCount=rs.getInt("codeNo");
              
              }
              
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 
 if(theCodeCount>0){
 
 codeExist=true;
 }
     
     
 return codeExist;
 }
 
 public String debitAccountBulk(String txnCode){
 
    String accountNumber="";
 

 
          try {
              
              Connection cq=quaryObj.createConnection(); 
              
             cq.setAutoCommit(false);
             
              String query = "SELECT  debitAccount FROM bulkuploads WHERE TrnCode="+"'"+txnCode+"'";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
    
           if(rs.first()) {
             
               accountNumber=rs.getString("debitAccount");
              
              }
              
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 

     
     
 return accountNumber; 
 
 
 
 }
 public void addItemBulkUpload(List theTheItems){
 
 

 try {
     
    Connection cq=quaryObj.createConnection(); 
    
    cq.setAutoCommit(false);
    
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO bulkuploads VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    ps.setObject(1, null);
    ps.setObject(2, theTheItems.get(0));//TrnDate
    ps.setObject(3, theTheItems.get(1));//Narration
    ps.setObject(4, theTheItems.get(2));//TrnType
    ps.setObject(5, theTheItems.get(3));//TrnCode
    ps.setObject(6, theTheItems.get(4));//Debit
    ps.setObject(7, theTheItems.get(5));//Credit
    ps.setObject(8, theTheItems.get(6));//InterestRate
    ps.setObject(9, theTheItems.get(7));//Tenure
    ps.setObject(10, theTheItems.get(8));//interestRegime
    ps.setObject(11, theTheItems.get(9));//PeriodType
    ps.setObject(12, theTheItems.get(10));//RunningBalance
    ps.setObject(13, theTheItems.get(11));//PeriodType
    ps.setObject(14, theTheItems.get(12));//RunningBalance
    ps.setObject(15, "Added");//StatusOfAction
    ps.setObject(16, theTheItems.get(13));//interestRegime
    ps.setObject(17, theTheItems.get(14));//PeriodType
    ps.setObject(18, theTheItems.get(15));//interestRegime
    ps.setObject(19, theTheItems.get(16));//PeriodType
    ps.setObject(20, theTheItems.get(17));//interestRegime
    ps.setObject(21, theTheItems.get(18));//PeriodType
    ps.setObject(22, theTheItems.get(19));//interestRegime
    ps.setObject(23, theTheItems.get(20));//PeriodType
    ps.setObject(24, theTheItems.get(21));//PeriodType

    
    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     
     
     } 
 
 
 }
 
public void removeBulkItem(String id){
try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);  
    String query = "DELETE FROM BulkUploads WHERE  TrnId="+id;
    PreparedStatement ps = cq.prepareStatement(query);
    ps.execute();
    cq.setAutoCommit(true);
    
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }


}

private String getBulkLandId(String id){

 String theId="";
 

 
          try {
              
              Connection cq=quaryObj.createConnection(); 
              
             cq.setAutoCommit(false);
             
              String query = "SELECT   OtherThree2 FROM bulkuploads WHERE TrnId="+id;
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
    
          while(rs.next()){
             
               theId=rs.getString("OtherThree2");
              
              }
              
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 

     
     
 return theId; 
 
}

public void updateBulkItemland(String bulkId){
    
    
    String idB=getBulkLandId(bulkId);
try {
             Connection cq=quaryObj.createConnection();
 cq.setAutoCommit(false); 
  String UpdateQuary = "UPDATE"+" "+"bulkuploadsland"+" "+"SET  StatusOfAction=? WHERE  TrnId=?";
       try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, "NotAdded");
         pstool.setObject(2, idB);
           pstool.executeUpdate();
    }
cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
 



}
 
 public void updateBulkIteM(String bulkId){
    
  
try {
             Connection cq=quaryObj.createConnection();
 cq.setAutoCommit(false); 
  String UpdateQuary = "UPDATE"+" "+"bulkuploads"+" "+"SET   OtherThree1=? WHERE  TrnId=?";
       try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, "Posted");
         pstool.setObject(2, bulkId);
           pstool.executeUpdate();
    }
cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
 



}
 public void updateTheId(String Id){
 
 try {
             Connection cq=quaryObj.createConnection();
 cq.setAutoCommit(false); 
  String UpdateQuary = "UPDATE"+" "+"bulkuploadsland"+" "+"SET  StatusOfAction=? WHERE  TrnId=?";
       try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, "Added");
         pstool.setObject(2, Id);
           pstool.executeUpdate();
    }
cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
 
 
 }
 
 public String creditAccountBulk(String txnCode){
 
    String accountNumber="";
 

 
          try {
              
              Connection cq=quaryObj.createConnection(); 
              
             cq.setAutoCommit(false);
             
              String query = "SELECT   creditAccount FROM bulkuploads WHERE TrnCode="+"'"+txnCode+"'";
              
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
    
           if(rs.first()) {
             
               accountNumber=rs.getString("creditAccount");
              
              }
              
             cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 

     
     
 return accountNumber; 
 
 
 
 }
 public void cleanBulkFirst(){
 
 try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);  
    String query = "DELETE FROM BulkUploadsLand";
    PreparedStatement ps = cq.prepareStatement(query);
    ps.execute();
    cq.setAutoCommit(true);
     cq.setAutoCommit(false);  
    String querya = "ALTER TABLE BulkUploadsLand auto_increment=1";
    PreparedStatement psa = cq.prepareStatement(querya);
    psa.execute();
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }
 
 }
 
       public void loadAllBulkUploads(JTable table){
       
       int l=0;
       
//       boolean inout=false;
    
    
  List  data5= new ArrayList<>();
    column1= new ArrayList<>();
     column1.add("S/n");
    column1.add("Date");
    column1.add("Narration");
    column1.add("TxnType");
    column1.add("TxnCode");
    column1.add("Debit");
    column1.add("Credit");
    column1.add("InterestRate");
    column1.add("Tenure");
    column1.add("RunningBal");
//    column1.add("Trigger");
     try {
 Connection cq=quaryObj.createConnection(); 
  cq.setAutoCommit(false);
            String query = "SELECT  TrnId,TrnDate, Narration,TrnType,TrnCode,Debit, Credit,InterestRate,Tenure,RunningBalance FROM BulkUploadsLand WHERE StatusOfAction='NotAdded'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
          data4.add(0,  rst3.getInt("TrnId"));
         data4.add(1, rst3.getString("TrnDate"));
         data4.add(2, rst3.getString("Narration"));
         data4.add(3, rst3.getString("TrnType"));  
         data4.add(4, rst3.getString("TrnCode"));  
         data4.add(5, rst3.getString("Debit")); 
           data4.add(6, rst3.getString("Credit"));
         data4.add(7, rst3.getString("InterestRate"));
         data4.add(8, rst3.getString("Tenure"));  
         data4.add(9, rst3.getString("RunningBalance"));  
//         data4.add(10, false); 
         
         data5.add(l, data4);
         l++;
            }
       
           
       
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

 if(0==data5.size()){
     
      data4=new ArrayList();
         data4.add(0, "0");
         data4.add(1, "0");
         data4.add(2, "0");  
         data4.add(3, "0");  
         data4.add(4, "0"); 
           data4.add(5, "0");
         data4.add(6, "0");
         data4.add(7, "0");  
         data4.add(8, "0"); 
          data4.add(9, "0");  
//         data4.add(10, false); 
         
         data5.add(l, data4);
     
     }   
           
            modelxx= new ListDataModel_12( data5, column1);
           table.setModel(modelxx);
           
       TableRowSorter<ListDataModel_12> sorter = new TableRowSorter<>(modelxx);
      table.setRowSorter(sorter);
       
       
       
       
       
       
       
       } 
       
     public void loadAllBulkUploadsSecond(JTable table){
       
       int l=0;boolean inout=false;
    
    
  List  data5= new ArrayList<>();
    column1= new ArrayList<>();
     column1.add("S/n");
    column1.add("Date");
    column1.add("Narration");
    column1.add("TxnType");
    column1.add("TxnCode");
    column1.add("Debit");
    column1.add("Credit");
    column1.add("Rate");
    column1.add("Tenure");
    column1.add("Regime");
     column1.add("DAccount");
    column1.add("CAccount");
    column1.add("Bal");
       
//    column1.add("Trigger");
     try {
 Connection cq=quaryObj.createConnection(); 
  cq.setAutoCommit(false);
            String query = "SELECT  TrnId,TrnDate, Narration,TrnType,TrnCode,Debit, Credit,InterestRate,Tenure,interestRegime,RunningBalance, debitAccount,creditAccount FROM BulkUploads WHERE OtherThree1='Added'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
          data4.add(0,  rst3.getInt("TrnId"));
         data4.add(1, rst3.getString("TrnDate"));
         data4.add(2, rst3.getString("Narration"));
         data4.add(3, rst3.getString("TrnType"));  
         data4.add(4, rst3.getString("TrnCode"));  
         data4.add(5, rst3.getString("Debit")); 
           data4.add(6, rst3.getString("Credit"));
         data4.add(7, rst3.getString("InterestRate"));
         data4.add(8, rst3.getString("Tenure"));  
         data4.add(9, rst3.getString("interestRegime"));  
         data4.add(10, rst3.getString("debitAccount")); 
         data4.add(11, rst3.getString("creditAccount"));  
         data4.add(12, rst3.getString("RunningBalance")); 
         
//         data4.add(10, false); 
         
         data5.add(l, data4);
         l++;
            }
       
           
       
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

 if(0==data5.size()){
     
        data4=new ArrayList();
        data4.add(0, "0");
        data4.add(1, "0");
        data4.add(2, "0");  
        data4.add(3, "0");  
        data4.add(4, "0"); 
        data4.add(5, "0");
        data4.add(6, "0");
        data4.add(7, "0");  
        data4.add(8, "0"); 
        data4.add(9, "0"); 
        data4.add(10, "0"); 
        data4.add(11, "0"); 
        data4.add(12, "0"); 
//         data4.add(10, false); 
         
         data5.add(l, data4);
     
     }   
           
            modelxx= new ListDataModel_12( data5, column1);
           table.setModel(modelxx);
           
       TableRowSorter<ListDataModel_12> sorter = new TableRowSorter<>(modelxx);
      table.setRowSorter(sorter);
       
       
       
       
       
       
       
       }      
       
       
       
       
       
       
  public boolean fillMeWithAllAccounts(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("A/C Type");
      column1.add("Ledger Name");
      column1.add("Ledger Number");
      column1.add("Account Name");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection(); 
  cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }  
  
  public String provisionForDepreciationExpenseAccount(){
  
String theAccountNumber="";

     try {
 Connection cq=quaryObj.createConnection(); 
  cq.setAutoCommit(false);
            String query = "SELECT account_number FROM account_created_store where account_number like '0223900%'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           if(rst3.first()){
       
       theAccountNumber= rst3.getString("account_number");  
      
            }
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return theAccountNumber;
  
  }     
  
  
  
  
  public boolean  fillMeWithAllAccountsc(JTable table,String searchCriteria){
  
   int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE (account_name LIKE"+"'"+searchCriteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+searchCriteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccounts(table);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }
    public boolean  fillMeWithAllAccountscReceivable(JTable table,String searchCriteria){
  
   int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE (account_name LIKE"+"'"+searchCriteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+searchCriteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccounts(table);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }
   public boolean fillMeWithAllLoanAmounts(JTable table){
  
        int l=0;boolean inout=false;


        data5= new ArrayList<>();
        column1= new ArrayList<>();
        column1.add("TXN ID");
        column1.add("A/C");
        column1.add("NAME");
        column1.add("INTEREST");
        column1.add("PENALTY");
        column1.add("ACCUM INTEREST");
        column1.add("PRINCIPAL");
        column1.add("TOTAL LOAN");
        column1.add("DUE DATE");
        try {
        Connection cq=loancon.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT trn_id, applicant_account_number,applicant_account_name,TotalPrincipalRemaining,TotalInterestRemaining,TotalLoanPenaltyRemaining,TotalAccumulatedInterestRemaining,balance_due,instalment_next_due_date FROM new_loan_appstore WHERE (loan_cycle_status="+"'"+"Disbursed"+"'"+" OR loan_cycle_status="+"'"+"Renewed"+"')";
        PreparedStatement ps = cq.prepareStatement(query);
        ResultSet rst3 = ps.executeQuery();
        while(rst3.next()){
        data4=new ArrayList();
        data4.add(0, rst3.getString("trn_id"));
        data4.add(1, rst3.getString("applicant_account_number"));
        data4.add(2, rst3.getString("applicant_account_name"));  
        data4.add(3, rst3.getString("TotalInterestRemaining"));  
        data4.add(4, rst3.getString("TotalLoanPenaltyRemaining")); 
         data4.add(5, rst3.getString("TotalAccumulatedInterestRemaining"));
          data4.add(6, rst3.getString("TotalPrincipalRemaining"));
        data4.add(7, rst3.getString("balance_due"));  
        data4.add(8, rst3.getString("instalment_next_due_date"));  
        data5.add(l, data4);
        l++;
        }

        model= new ObjectTableModel( data5, column1);
        table.setModel(model);

        TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        cq.setAutoCommit(true);
        loancon.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(0!=data5.size()){

        inout=true;

        }
        return inout;
  
  }     
  public boolean fillMeWithAllLoanAmountsWrittenOff(JTable table){
  
        int l=0;boolean inout=false;


        data5= new ArrayList<>();
        column1= new ArrayList<>();
        column1.add("TXN ID");
        column1.add("A/C");
        column1.add("NAME");
        column1.add("INTEREST");
        column1.add("PENALTY");
        column1.add("ACCUM INTEREST");
        column1.add("PRINCIPAL");
        column1.add("TOTAL LOAN");
        column1.add("DUE DATE");
        try {
        Connection cq=loancon.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT trn_id, applicant_account_number,applicant_account_name,TotalPrincipalRemaining,TotalInterestRemaining,TotalLoanPenaltyRemaining,TotalAccumulatedInterestRemaining,balance_due,instalment_next_due_date FROM new_loan_appstore WHERE loan_cycle_status="+"'"+"WrittenOff"+"'";
        PreparedStatement ps = cq.prepareStatement(query);
        ResultSet rst3 = ps.executeQuery();
        while(rst3.next()){
        data4=new ArrayList();
        data4.add(0, rst3.getString("trn_id"));
        data4.add(1, rst3.getString("applicant_account_number"));
        data4.add(2, rst3.getString("applicant_account_name"));  
        data4.add(3, rst3.getString("TotalInterestRemaining"));  
        data4.add(4, rst3.getString("TotalLoanPenaltyRemaining")); 
         data4.add(5, rst3.getString("TotalAccumulatedInterestRemaining"));
          data4.add(6, rst3.getString("TotalPrincipalRemaining"));
        data4.add(7, rst3.getString("balance_due"));  
        data4.add(8, rst3.getString("instalment_next_due_date"));  
        data5.add(l, data4);
        l++;
        }

        model= new ObjectTableModel( data5, column1);
        table.setModel(model);

        TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        cq.setAutoCommit(true);
        loancon.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(0!=data5.size()){

        inout=true;

        }
        return inout;
  
  } 
  public boolean fillMeWithGeneralLedger(JTable table,String accountNumber){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Trn Id");
      column1.add("Trn Date");
      column1.add("Narration");
      column1.add("Entity");
      column1.add("Dr Amount");
        column1.add("Cr Amount");
     try {
 Connection cq=quaryObj.createConnection(); 
  cq.setAutoCommit(false);
            String query = "SELECT  trn_id,trn_date,narration,debit_account_no,debit,credit FROM General_Ledger where ((debit_account_no="+"'"+accountNumber+"'"+" "+"or credit_account_no="+"'"+accountNumber+"'"+") and trn_date="+"'"+this.getDBCurrentDate()+"'"+")";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("trn_id"));
         data4.add(1, rst3.getString("trn_date"));
         data4.add(2, rst3.getString("narration"));  
         data4.add(3, this.AccountName(rst3.getString("debit_account_no")));  
         data4.add(4, rst3.getString("debit")); 
         data4.add(5, rst3.getString("credit")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }       
  
  
  public boolean fillMeWithAllAccountsC(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
        if(0!=data5.size()){
              model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     
     inout=true;
     
     }
          
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
    
return inout;
  
  } 
  
  
  
  public boolean fillMeWithAllAccountsCustomerReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
  
  public boolean fillMeWithAllAccountsAssetReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"1000000"+"'"+"AND account_master<"+"'"+"1999999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
   public boolean fillMeWithAllAccountsFixedAssetReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");
//jh
     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store  WHERE ((account_master>=1010001&&account_master<=1060001)||(account_master>=1360001&&account_master<=1390001))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  

  public boolean fillMeWithAllAccountsCurrentAssetReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE (account_master>"+"'"+"1130000"+"'"+"AND account_master<"+"'"+"1309999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
  public boolean fillMeWithAllAccountsReceivableReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number like '0113100%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
   public boolean fillMeWithAllAccountsBankReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number like '0112200%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
   
   
   public boolean fillMeWithAllAccountsAccumulatedDepreciation(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number like '0110700%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
   
    public boolean fillMeWithAllAccountsCashReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number like '0112300%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
    public boolean fillMeWithAllAccountsLoanReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number like '0112800%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  }
     
    
    public boolean fillMeWithAllAccountsLiabilitiesReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"5000000"+"'"+"AND account_master<"+"'"+"5019999"+"'"+") OR ((account_master>"+"'"+"5030000"+"'"+"AND account_master<"+"'"+"5299999"+"'"+")))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
    
    
   
     public boolean fillMeWithAllAccountsExpensesReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
              String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"2000000"+"'"+"AND account_master<"+"'"+"2999999"+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
     public boolean fillMeWithAllAccountsEquityReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
                String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"4000000"+"'"+"AND account_master<"+"'"+"4999999"+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  }
      public boolean fillMeWithAllAccountsRevenueReports(JTable table){
  
 boolean inout=false;
    
    
  List  data5R= new ArrayList<>();
     List column1R= new ArrayList<>();
      column1R.add("Account Type");
      column1R.add("Ledger Name");
      column1R.add("Ledger Id");
      column1R.add("Account Name");
      column1R.add("Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
                 String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"3000000"+"'"+"AND account_master<"+"'"+"3999999"+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         List data4R=new ArrayList();
         data4R.add(rst3.getString("account_l1"));
         data4R.add(rst3.getString("account_name"));
         data4R.add(rst3.getString("account_number"));  
         data4R.add(rst3.getString("account_l5"));  
         data4R.add(rst3.getString("running_balance")); 
         data5R.add(data4R);
            }
       
       ReportsModel     modelV= new ReportsModel( data5R, column1R);
       
           table.setModel(modelV);
           
       TableRowSorter<ReportsModel> sorter = new TableRowSorter<>(modelV);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5R.size()){
     
     inout=true;
     
     }
return inout;
  
  }
     
     
             
             
             
  public boolean fillMeWithAllAccountsMobileMoney(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"1210000"+"'"+"AND account_master<"+"'"+"1219999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
     
     
  public boolean fillMeWithAllAccountsBank(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"1220000"+"'"+"AND account_master<"+"'"+"1229999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
  
  
  
  
 public boolean fillMeWithAllExpenseAccounts(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number LIKE '02%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
 
 public boolean fillMeWithAllDeprAccumExpenseAccounts(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number LIKE '0223900%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
 
 public List accumDepreCanAccount(){
 List theAccounts=new ArrayList();
 
     
    try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT AssetAccountNumber FROM depreciationstore WHERE DepreciationStatus='NotStarted' OR  DepreciationStatus='Started'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
//     if(theAccountIsNotDepreciatable(rst3.getString("AssetAccountNumber"))){
        theAccounts.add(rst3.getString("AssetAccountNumber"));
//     }
            }
       
   

         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
//      if(theAccounts.isEmpty()){
//      theAccounts.add("EMPTY");
//      
//      }
 
 
 return theAccounts;
 
 }
 
  public List accumDepreCanAccountAuto(){
 List theAccounts=new ArrayList();
 
     
    try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT AssetAccountNumber FROM depreciationstore WHERE DepreciationStatus='NotStarted' OR  DepreciationStatus='Started'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
     if(theAccountIsNotDepreciatable(rst3.getString("AssetAccountNumber"))){
        theAccounts.add(rst3.getString("AssetAccountNumber"));
     }
            }
       
   

         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
      if(theAccounts.isEmpty()){
      theAccounts.add("EMPTY");
      
      }
 
 
 return theAccounts;
 
 }
 
 

  public synchronized int  deprecAccumDueDates(String accountNumber,Component c){

      String instalmentDate="";long numberOfDays=1L;int actualDays=0;
    
      
      if(deprecAccumDueDatesAval(accountNumber,c)){
    try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false); 



    String query = "SELECT  DepriDate FROM depreciationschedule WHERE ((DepriDate<"+"'"+getDBCurrentDate()+"'"+" AND AssetAccountNumber="+accountNumber+") "+"AND"+" "+"NOT DepreciationStatus="+"'"+"D"+"'"+")";
   
    PreparedStatement ps = cq.prepareStatement(query);
    
    ResultSet rst3 = ps.executeQuery();

    if(rst3.first()){

   instalmentDate=rst3.getString("DepriDate");
//   JOptionPane.showMessageDialog(c, "instalmentDate=rst3.getString(\"DepriDate\");"+instalmentDate);
    }
    cq.setAutoCommit(true);

    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
    
 numberOfDays=   Math.abs(fmt.diffDays(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(instalmentDate), fmt.fromDatabaseWithDashSeperatorBeginningWithYear(getDBCurrentDate())));
      
      actualDays=parseInt(df2.format(numberOfDays/30))+1;
      
      }
// JOptionPane.showMessageDialog(c, numberOfDays+"");
 return actualDays;
   
  }
 
  
  public synchronized boolean  deprecAccumDueDatesAval(String accountNumber,Component c){

      int instalmentDate=1;boolean numberOfDays=false;
      
    try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false); 



    String query = "SELECT  COUNT(TrnId) AS tN FROM depreciationschedule WHERE ((DepriDate<"+"'"+getDBCurrentDate()+"'"+" AND AssetAccountNumber="+accountNumber+") "+"AND"+" "+"NOT DepreciationStatus="+"'"+"D"+"'"+")";
   
    PreparedStatement ps = cq.prepareStatement(query);
    
    ResultSet rst3 = ps.executeQuery();

    if(rst3.first()){

   instalmentDate=rst3.getInt("tN");
//   JOptionPane.showMessageDialog(c, "instalmentDate=rst3.getString(\"DepriDate\");"+instalmentDate);
    }
    cq.setAutoCommit(true);

    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
if(instalmentDate>0){
numberOfDays=true;

}
 return numberOfDays;
   
  }
  
  
  
  
  
  public boolean  theAccountIsNotDepreciatable(String accountNumber){

      int instalmentDate=0;boolean numberOfDays=false;
      
    try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false); 



    String query = "SELECT  COUNT(TrnId) As NuDe FROM depreciationschedule WHERE (DepriDate<"+"'"+getDBCurrentDate()+"'"+" "+"AND"+" "+"NOT DepreciationStatus="+"'"+"D"+"'"+")";
   
    PreparedStatement ps = cq.prepareStatement(query);
    
    ResultSet rst3 = ps.executeQuery();

   while(rst3.next()){

   instalmentDate=rst3.getInt("NuDe");
   
    }
    cq.setAutoCommit(true);

    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 if(instalmentDate>0){
 numberOfDays=true;
 }
   return numberOfDays;
  }
  
  

 public void feelDepriciationStore(JTable table){
//`TrnId` int(11) NOT NULL AUTO_INCREMENT,
//  `TrnDate` date NOT NULL DEFAULT '1970-01-01',
//  `PurchaseDate` date NOT NULL DEFAULT '1970-01-01',
//  `NextDepriDate` date NOT NULL DEFAULT '1970-01-01',
//  `DepriMethod` varchar(45) DEFAULT '0',
//  `AssetAccountNumber` varchar(45) DEFAULT '055020000010',
//  `AccumDepriAccountNumber` varchar(45) DEFAULT '055020000010',
//  `PurchasePrice` varchar(45) DEFAULT '0.0',
//  `accumDep` varchar(45) NOT NULL DEFAULT '0.0',
//  `SalvageValue` varchar(45) DEFAULT '0.0',
//  `UsefulLife` varchar(45) DEFAULT '0.0',
//  `DepreciationStatus` varchar(45) DEFAULT 'Other',
//  `OtherThree` varchar(45) DEFAULT 'NCO',
//  `OtherFour` varchar(45) DEFAULT 'NCO',
//  `OtherFive` varchar(45) DEFAULT 'NCO',
 
     List theColumns= new ArrayList();
      List<List> therows= new ArrayList();
     theColumns.add("S/n");
      theColumns.add("AssetName");
     theColumns.add("PurchaseDate");
     theColumns.add("NextDepDate");

      theColumns.add("UsefulLife");
     theColumns.add("DepMethod");
     theColumns.add("PurchPrice");
      theColumns.add("AccumDepr");
     theColumns.add("SalvageValue");
     theColumns.add("DepreStatus");
     
    try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT TrnId, AssetAccountNumber,PurchaseDate,NextDepriDate,UsefulLife,DepriMethod,PurchasePrice,accumDep,SalvageValue,DepreciationStatus FROM depreciationstore WHERE DepreciationStatus='NotStarted' OR  DepreciationStatus='Started'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
        List vData=new ArrayList();
        vData.add(rst3.getString("TrnId"));
        vData.add(this.AccountName(rst3.getString("AssetAccountNumber")));
        vData.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rst3.getString("PurchaseDate")));  
        vData.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rst3.getString("NextDepriDate"))); 
        vData.add(rst3.getString("UsefulLife")); 
        vData.add(rst3.getString("DepriMethod")); 
        vData.add(rst3.getString("PurchasePrice")); 
         vData.add(rst3.getString("accumDep")); 
          vData.add(rst3.getString("SalvageValue")); 
         vData.add(rst3.getString("DepreciationStatus"));
         
         
         therows.add(vData);
            }
       
        DepreciatinStoreModel  modelthe= new DepreciatinStoreModel(therows, theColumns);
        table.setModel(modelthe);
        TableRowSorter<DepreciatinStoreModel> sorter = new TableRowSorter<>(modelthe);
        table.setRowSorter(sorter);

         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
      
 }
 
 public boolean fillMeWithAllRecievablesAccounts(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number LIKE '011310%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
             if(0!=data5.size()){
        model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
         
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
   
return inout;
  
  } 
 
 
 public boolean fillMeWithAllPayableAccounts(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number LIKE '0550000%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
          if(0!=data5.size()){
       model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
     inout=true;
     
     }
          
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  
return inout;
  
  } 
 
 
 
 public boolean fillMeWithAllPrepaidAccounts(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number LIKE '0112000%'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
         if(0!=data5.size()){
      model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
           
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
   
return inout;
  
  } 
 
 
 
 public boolean fillMeWithAllAccountsCSpecial(JTable table){
  
  int l=0,sn=1;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
       column1.add("S/n");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,running_balance FROM account_created_store WHERE(account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
          data4.add(0, sn);
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));    
         data4.add(3, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;sn++;
            }
         if(0!=data5.size()){
      model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
           
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
   
return inout;
  
  }
  
 public boolean fillMeWithAllAccountsSpec(JTable table){
  
  int l=0,sn=1;boolean inout=false;
    
//    this.accountBalance(userId, userId)
    data5= new ArrayList<>();
      column1= new ArrayList<>();
       column1.add("S/n");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,running_balance FROM account_created_store";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
          data4.add(0, sn);
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));    
         data4.add(3, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;sn++;
            }
       
              if(0!=data5.size()){
       model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
          
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  
return inout;
  
  }
  
 
 
 public boolean fillMeWithAllAccountsCE(JTable table){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6Y= staffMembers();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
       
   try {
   Connection cq=quaryObj.createConnection();
    cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE creation_time="+"'"+"NB"+"'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0,rst3.getObject("account_l1"));
        data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
        data4.add(3, rst3.getString("account_l5"));  
        data4.add(4, rst3.getString("running_balance")); 
       data5.add(data4);
            }
       
       
           cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
       if(0!=data5.size()){
       model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
          
       

return inout;
  
  }   
 
  public boolean fillMeWithAllAccountsAsset(JTable table){
  
  int l=0; boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
   


            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"1000000"+"'"+"AND account_master<"+"'"+"1999999"+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
        
       if(0!=data5.size()){
         model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  } 
  
  public boolean fillMeWithAllAccountsAssetsc(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"1000000"+"'"+"AND account_master<"+"'"+"1999999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsAsset(table);
       
       }else{
           
           if(0!=data5.size()){
         model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
        
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  }   
  
  
  	
 public boolean fillMeWithAllAccountsLiabilities(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
   
	


            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"5000000"+"'"+"AND account_master<"+"'"+"5019999"+"'"+") OR ((account_master>"+"'"+"5030000"+"'"+"AND account_master<"+"'"+"5299999"+"'"+")))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if(0!=data5.size()){
       model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
          
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  } 
 
  public boolean fillMeWithAllAccountsLiabilitiesc(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"5000000"+"'"+"AND account_master<"+"'"+"5019999"+"'"+") OR (account_master>"+"'"+"5030000"+"'"+"AND account_master<"+"'"+"5219999"+"'"+")) AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsLiabilities(table);
       
       }else{
           
           if(0!=data5.size()){
        model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
         
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  }   
  
  
  public boolean fillMeWithAllAccountsExpenses(JTable table){
  
  int l=0; boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
   	

	


            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"2000000"+"'"+"AND account_master<"+"'"+"2999999"+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
         if(0!=data5.size()){
      model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
           
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }


return inout;
  } 
  
  public boolean fillMeWithAllAccountsEquity(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
   	

		



            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"4000000"+"'"+"AND account_master<"+"'"+"4999999"+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
      if(0!=data5.size()){
       model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     } 
          
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  } 
  public boolean fillMeWithAllAccountsEquityc(JTable table,String criteria){
  
  int l=0; boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"4000000"+"'"+"AND account_master<"+"'"+"4999999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsEquity(table);
       
       }else{
           
       if(0!=data5.size()){
          model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }    
           
       
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  }   
  public boolean fillMeWithAllAccountsRevenue(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
   	

		



            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"3000000"+"'"+"AND account_master<"+"'"+"3999999"+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if(0!=data5.size()){
        model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
         
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  } 
  public boolean fillMeWithAllAccountsRevenuec(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"3000000"+"'"+"AND account_master<"+"'"+"3999999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsRevenue(table);
       
       }else{
           
           if(0!=data5.size()){
         model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
        
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  }   
   public boolean fillMeWithAllAccountsExpensesc(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"2000000"+"'"+"AND account_master<"+"'"+"2999999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsExpenses(table);
       
       }else{
           
           
           if(0!=data5.size()){
         model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     inout=true;
     
     }
        
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

return inout;
  
  }   
  public boolean fillMeWithAllAccountsCc(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+")";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsC(table);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }   
  
   public boolean fillMeWithAllAccountsdhlS(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE(((account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+") AND (trn_date<"+"'"+getDBCurrentDate()+"'"+")) AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsdhl(table);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
   public boolean fillMeWithAllAccountsCS(JTable table,String criteria){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+") AND (account_name LIKE"+"'"+criteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+criteria+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
         if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsC(table);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
         }
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }  
   
   public boolean fillMeWithAllAccountsBdhlS(JTable table,String criteria,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6= borrowingCustomersdhlS(criteria);
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6.size()){
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
         if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsBdhl(table,c);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  public boolean fillMeWithAllAccountsBS(JTable table,String criteria,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6= borrowingCustomersS(criteria);
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6.size()){
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
     if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsB(table,c);
       
       }else{  
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
     }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  }   
   public boolean fillMeWithAllStaffAccounts(JTable table,String criteria,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6Y= staffMembersS(criteria);
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6Y.size()){
             
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6Y.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
        if( data5.isEmpty()){
       
      this.fillMeWithAllAccountsCE(table);
       
       }else{
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
        }
  if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  }   
 
  public boolean fillMeWithAllAccountsdhl(JTable table){
  
  int l=0;boolean inout=false;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

     try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE((account_master>"+"'"+"5020000"+"'"+"AND account_master<"+"'"+"5029999"+"'"+") AND (trn_date<"+"'"+getDBCurrentDate()+"'"+"))";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("account_l1"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
         data4.add(3, rst3.getString("account_l5"));  
         data4.add(4, rst3.getString("running_balance")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
  
  
  
  
  public boolean fillMeWithAllAccountsB(JTable table,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6= borrowingCustomers();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6.size()){
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;

  
  }
  
  public boolean fillMeWithAllAccountsBx(JTable table,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

//  List  data6= borrowingCustomers();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
//           while(l<data6.size()){
//          data4=new ArrayList();      
//         data4=this.borrowingDetails(data6.get(l).toString(),c);
//         data5.add(l, data4);
//         l++;
//            }
        try {
   Connection cq=quaryObj.createConnection();
    cq.setAutoCommit(false);
            String query = "SELECT account_created_store.account_name, account_created_store.account_number,account_created_store.account_l5,account_created_store.account_l1,account_created_store.running_balance FROM pmms.account_created_store INNER JOIN pmms_loans.new_loan_appstore ON account_created_store.account_number=new_loan_appstore.applicant_account_number WHERE new_loan_appstore.loan_cycle_status='Disbursed' OR new_loan_appstore.loan_cycle_status='Renewed'";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         
//         JOptionPane.showMessageDialog(c, "account_l1= "+rst3.getObject("account_l1")+" account_name= "+rst3.getString("account_name")+"account_number= "+rst3.getObject("account_number")+" account_l5= "+rst3.getString("account_l5")+" running_balance= "+rst3.getString("running_balance"));
         data4.add(0,rst3.getObject("account_l1"));
        data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
        data4.add(3, rst3.getString("account_l5"));  
        data4.add(4, rst3.getString("running_balance")); 
      data5.add(l, data4);
      l++;
            }
       
       
           cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
  
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;

  
  }   
   public boolean fillMeWithAllAccountsBdhl(JTable table,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6= borrowingCustomersdhl();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6.size()){
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;

  
  } 
  
   public boolean fillMeWithNonBorrowingCustomers(JTable table){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();
data4=new ArrayList();
//  List  data6A= nonBorrowingCustomers();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

//  
//           while(l<data6A.size()){
//          data4=new ArrayList();      
//         data4=this.borrowingDetails(data6A.get(l).toString());
//         data5.add(l, data4);
//         l++;
//            }
        try {
           Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT   account_l1,account_name,account_number, account_l5,running_balance FROM account_created_store WHERE account_number LIKE '05502%'";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){  
            data4=new ArrayList();
   data4.add(rsxmt.getString("account_l1"));
   data4.add(rsxmt.getString("account_name"));
   data4.add(rsxmt.getString("account_number"));
   data4.add(rsxmt.getString("account_l5"));
   data4.add(rsxmt.getString("running_balance"));
  data5.add(data4);
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;


  
  } 
   
   
   public boolean fillMeWithAllAccountsBClosed(JTable table,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6= borrowingCustomersClosed();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6.size()){
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;

  
  }  
  public boolean  fillMeWithAllAccountsD(JTable table,Component c){
  
  int l=0;boolean inout=false;
    
data5=new ArrayList();

  List  data6= this.accountsInArrears();
  
      column1= new ArrayList<>();
      column1.add("Account Type");
      column1.add("Account Name");
      column1.add("Account Number");
      column1.add("The Account");
      column1.add("Running Balance");

  
           while(l<data6.size()){
          data4=new ArrayList();      
         data4=this.borrowingDetails(data6.get(l).toString(),c);
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
if(0!=data5.size()){
     
     inout=true;
     
     }
return inout;

  
  }   
  
  private List borrowingCustomers(){
   List borrowingAccounts=new ArrayList();
      try {
           Connection cq=loancon.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT  applicant_account_number FROM new_loan_appstore WHERE (loan_cycle_status="+"'"+"Disbursed"+"'"+" OR "+"loan_cycle_status="+"'"+"Renewed"+"'"+")";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   borrowingAccounts.add(rsxmt.getString("applicant_account_number"));
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  borrowingAccounts;
  
  
  
  }
  private List borrowingCustomersS(String searchCriteria){
   List borrowingAccounts=new ArrayList();
      try {
           Connection cq=loancon.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT  applicant_account_number FROM new_loan_appstore WHERE ((NOT loan_cycle_status="+"'"+"Completed"+"'"+") AND (applicant_account_name LIKE"+"'"+searchCriteria+"%"+"'"+"or applicant_account_name LIKE"+"'"+"%"+searchCriteria+"'"+"))";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   borrowingAccounts.add(rsxmt.getString("applicant_account_number"));
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  borrowingAccounts;
  
  
  
  }
  private List staffMembers(){
   List staffMembers=new ArrayList();int l=0;
      try {
           Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
 
          String query = "select DISTINCT account_number from log_in";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
            
   staffMembers.add(rsxmt.getString("account_number"));
     fios.stringFileWriter(fios.createFileName("PMMS_Statements", "reports", l+"trnType.txt"),"Pay Employees Salary"+rsxmt.getString("account_number"));     
          l++;
        }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  staffMembers;
  
  
  
  }
  
   private List staffMembersS(String SearchCriteria){
   List staffMembers=new ArrayList();int l=0;
      try {
           Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
 
          String query = "select DISTINCT account_number from log_in WHERE  (account_name LIKE"+"'"+SearchCriteria+"%"+"'"+"or account_name LIKE"+"'"+"%"+SearchCriteria+"'"+")";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
            
   staffMembers.add(rsxmt.getString("account_number"));
     fios.stringFileWriter(fios.createFileName("PMMS_Statements", "reports", l+"trnType.txt"),"Pay Employees Salary"+rsxmt.getString("account_number"));     
          l++;
        }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  staffMembers;
  
  
  
  }
  private List borrowingCustomersdhl(){
   List borrowingAccounts=new ArrayList();
      try {
           Connection cq=loancon.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT  applicant_account_number FROM new_loan_appstore WHERE (( (loan_cycle_status="+"'"+"Disbursed"+"'"+" OR loan_cycle_status="+"'"+"Renewed"+"')) AND (trn_date<="+"'"+getDBCurrentDate()+"'"+"))";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   borrowingAccounts.add(rsxmt.getString("applicant_account_number"));
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  borrowingAccounts;
  
  
  
  }
  public void createRecordBulkUpload(List detailsData){

 try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO bulkuploadsland VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    ps.setObject(1, null);
    ps.setObject(2, detailsData.get(0));//TrnDate
    ps.setObject(3, detailsData.get(1));//Narration
    ps.setObject(4, detailsData.get(2));//TrnType
    ps.setObject(5, detailsData.get(3));//TrnCode
    ps.setObject(6, detailsData.get(4));//Debit
    ps.setObject(7, detailsData.get(5));//Credit
    ps.setObject(8, detailsData.get(6));//InterestRate
    ps.setObject(9, detailsData.get(7));//Tenure
    ps.setObject(10, detailsData.get(8));//interestRegime
    ps.setObject(11, detailsData.get(9));//PeriodType
    
    ps.setObject(12, detailsData.get(10));//RunningBalance
    ps.setObject(13, "NotAdded");//StatusOfAction
    
    ps.setObject(14, "N/A");//interestRegime
    ps.setObject(15, "N/A");//PeriodType
   
    
    
    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     
     
     }
 
 }
 
 
          
           private List nonBorrowingCustomers(){

       
       
       List nonBorrowingAccounts=new ArrayList();
      try {
           Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT   account_number FROM account_created_store WHERE ((creation_time="+"'"+"NB"+"'"+") AND (account_number LIKE '055%'))";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   nonBorrowingAccounts.add(rsxmt.getString("account_number"));
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  nonBorrowingAccounts;
  
  
  
  }
  
   private List borrowingCustomersdhlS(String searchCriteria){

       
       
       List borrowingAccounts=new ArrayList();
      try {
           Connection cq=loancon.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT  applicant_account_number FROM new_loan_appstore WHERE ((( (loan_cycle_status="+"'"+"Disbursed"+"'"+" OR loan_cycle_status="+"'"+"Renewed"+"')"+") AND (trn_date<"+"'"+getDBCurrentDate()+"'"+"))AND (applicant_account_name LIKE"+"'"+searchCriteria+"%"+"'"+"or applicant_account_name LIKE"+"'"+"%"+searchCriteria+"'"+"))";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   borrowingAccounts.add(rsxmt.getString("applicant_account_number"));
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  borrowingAccounts;
  
  
  
  }
  private List borrowingCustomersClosed(){
   List borrowingAccounts=new ArrayList();
      try {
           Connection cq=loancon.createConnection();
          cq.setAutoCommit(false);
 
          String query = "SELECT  applicant_account_number FROM new_loan_appstore WHERE (loan_cycle_status="+"'"+"Completed"+"'"+")";

          PreparedStatement psxmt =  cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){    
   borrowingAccounts.add(rsxmt.getString("applicant_account_number"));
          }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return  borrowingAccounts;
  
  
  
  }
  private ArrayList borrowingDetails(String accountNumbers,Component c){
 
    

   try {
   Connection cq=quaryObj.createConnection();
    cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store WHERE account_number="+accountNumbers;
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         
//         JOptionPane.showMessageDialog(c, "account_l1= "+rst3.getObject("account_l1")+" account_name= "+rst3.getString("account_name")+"account_number= "+rst3.getObject("account_number")+" account_l5= "+rst3.getString("account_l5")+" running_balance= "+rst3.getString("running_balance"));
         data4.add(0,rst3.getObject("account_l1"));
        data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("account_number"));  
        data4.add(3, rst3.getString("account_l5"));  
        data4.add(4, rst3.getString("running_balance")); 
      
            }
       
       
           cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
  
  return data4;
  
  }
public void feelWithCustomersNames(JComboBox ComboBox,String accountNumber){
 
 

     data8 = new ArrayList<>();
          try {
              Connection cq=quaryObj.createConnection();
              cq.setAutoCommit(false);
              String query = "SELECT account_name FROM master WHERE (NOT account_number ="+"'"+accountNumber+"'"+")";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                        data8.add(k, rs.getString("account_name"));
                       k++;  
                      
                    }
               if(k==0){data8.add(k, "Empty Record");} 
                    modelcombo = new MyComboBoxModel(data8);
                    ComboBox.setModel(modelcombo);
                     cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 
 }
 
 public void feelWithCustomersAccounts(String name,JTextField txtf){
 
 
String account="";
          try {
              quaryObj.createConnection().setAutoCommit(false);
              String query = "SELECT account_number FROM master WHERE account_name="+"'"+name+"'";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              int k=0;
             
              while (rs.next()) {
                       
                    account= rs.getString("account_number");
                       k++;  
                      
                    }
              txtf.setText(account);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 
 }
 
 
 
 public boolean ReduceShares(String accountNumber,String amountShares,String narration){
     
 Double diffVumShares=0.0,diffNumShares=0.0, availableVShares=0.0,availableNShares=0.0, valueOfShares=0.0, numberOfShares=0.0,sharePrice=0.0;boolean success=false;int status=0;
 
 sharePrice= parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))); 

 availableVShares=parseDouble(getSharesDetails(accountNumber).get(0).toString());
 
 availableNShares=availableVShares/sharePrice;
 
    valueOfShares=parseDouble(amountShares);  
   
   
    
     numberOfShares=valueOfShares/sharePrice;
   
     diffVumShares=(availableVShares-valueOfShares);
     
       diffNumShares=(availableNShares-numberOfShares);
       
if(fios.intFileReader(fios.createFileName("sharesAvailable","shareValues", "usedWindow"+accountNumber+".txt"))==365){ 
         
  Double diffVumShares2=0.0,diffNumShares2=0.0, availableVShares2=0.0,availableNShares2=0.0, valueOfShares2=0.0, numberOfShares2=0.0,sharePrice2=0.0;boolean success2=false;int status2=0;
 
  sharePrice2= parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))); 
     
  
  availableVShares2=parseDouble(getSharesDetailsF(accountNumber).get(0).toString());
  
  
  availableNShares2=availableVShares2/ sharePrice2;
 
  
    valueOfShares2=parseDouble(amountShares);  
   
  
    
     numberOfShares2=valueOfShares2/sharePrice2;
   
     
     diffVumShares2=(availableVShares2-valueOfShares2);
     
     
       diffNumShares2=(availableNShares2-numberOfShares2);
         
         
         
     updateShareOriginalD(accountNumber, amountShares,numberOfShares2.toString(),diffVumShares2.toString(),diffNumShares2.toString(),narration);
     
     
     Integer ps=3;
 
 fios.intFileWriterReplace(fios.createFileName("sharesAvailable","shareValues", "usedWindow"+accountNumber+".txt"),ps.toString());
 
   fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountNumber+".txt"), NumberFormat.format(parseDouble((Math.abs(parseDouble(diffVumShares2.toString()))+"").replace(",", ""))));
   
    fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesNumberF"+accountNumber+".txt"), NumberFormatS.format(parseDouble((Math.abs(parseDouble(diffNumShares2.toString()))+"").replace(",", "")))); 
    
     } 

      updateSharesBoGa(accountNumber,NumberFormatS.format(parseDouble((Math.abs(parseDouble(diffNumShares.toString()))+"").replace(",", ""))), NumberFormat.format(parseDouble((Math.abs(parseDouble(diffVumShares.toString()))+"").replace(",", ""))));
      
      
  fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountNumber+".txt"), NumberFormat.format(parseDouble((Math.abs(parseDouble(diffVumShares.toString()))+"").replace(",", ""))));
   
  
    fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesNumber"+accountNumber+".txt"), NumberFormatS.format(parseDouble((Math.abs(parseDouble(diffNumShares.toString()))+"").replace(",", ""))));
   
    
    try {
          Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
            String UpdateQuary = "UPDATE master SET value_of_shares=?,number_of_shares=? WHERE account_number=?";
            try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
                pstool.setObject(1, NumberFormat.format(parseDouble((Math.abs(parseDouble(diffVumShares.toString()))+"").replace(",", ""))));
                
                pstool.setObject(2, NumberFormatS.format(parseDouble((Math.abs(parseDouble(diffNumShares.toString()))+"").replace(",", ""))));
                pstool.setObject(3, accountNumber);
              status=  pstool.executeUpdate();
           pstool.close();
            }
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
   if(!(status==0)){
success=true;
        }
 return success;
 
 
 }
 

         public Map getSharesDetails(String accountN){
        Map <Integer,Object>shareVN=new HashMap();


        String value="",number="";
           fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountN+".txt"));
           fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesNumber"+accountN+".txt"));
        value= fios.stringFileReader(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountN+".txt")).replace(",", "");;
        number= fios.stringFileReader(fios.createFileName("sharesAvailable","shareValues", "sharesNumber"+accountN+".txt")).replace(",", "");;

        if(value.equalsIgnoreCase("")||number.equalsIgnoreCase("")){
        shareVN.put(0, 0.0);
        shareVN.put(1, 0.0);  
        }else{
        shareVN.put(0, value);
        shareVN.put(1, number);
        }

        return  shareVN;
         }
         
          public Map getSharesDetailsF(String accountN){
        Map <Integer,Object>shareVN=new HashMap();


        String value="",number="";
           fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountN+".txt"));
           fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesNumberF"+accountN+".txt"));
           
        value= fios.stringFileReader(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountN+".txt")).replace(",", "");;
        number= fios.stringFileReader(fios.createFileName("sharesAvailable","shareValues", "sharesNumberF"+accountN+".txt")).replace(",", "");;

        if(value.equalsIgnoreCase("")||number.equalsIgnoreCase("")){
        shareVN.put(0, 0.0);
        shareVN.put(1, 0.0);  
        }else{
        shareVN.put(0, value);
        shareVN.put(1, number);
        }

        return  shareVN;
         }
 
 public boolean testReducebilityOfShares(String accountNumber,String amountShares){
 boolean confirm=false;
 

             
 Double diffVumShares=0.0,diffNumShares=0.0, availableVShares=0.0,availableNShares=0.0, valueOfShares=0.0, numberOfShares=0.0,sharePrice=0.0;int status=0;boolean success=false;
 availableVShares=parseDouble(getSharesDetails(accountNumber).get(0).toString());
  availableNShares=parseDouble(getSharesDetails(accountNumber).get(1).toString());
 
    valueOfShares=parseDouble(amountShares);  
   
    sharePrice= parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))); 
    
     numberOfShares=valueOfShares/sharePrice;
   
     diffVumShares=(availableVShares-valueOfShares);
       diffNumShares=(availableNShares-numberOfShares);
 if(diffVumShares<0.0|| diffNumShares<0.0){
 confirm=false;
 
 } else if(diffVumShares>=0.0&&diffNumShares>=0.0){
 
 confirm=true;
 
 }
 return confirm;
 }
 
 public boolean capitaliseShare(String accountNumber, String capital,String narration){
     
 
    
 Double sumVumShares=0.0,sumNumShares=0.0, availableVShares=0.0,availableNShares=0.0, valueOfShares=0.0, numberOfShares=0.0,sharePrice=0.0;boolean success=false;int status=0;
 fios.forceFileExistanceZero(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"));
    sharePrice= parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))); 
 
    availableVShares=parseDouble(getSharesDetails(accountNumber).get(0).toString());
 
  availableNShares=availableVShares/sharePrice;
 
    valueOfShares=parseDouble(capital);  
   
    
     numberOfShares=valueOfShares/sharePrice;
   
     sumVumShares=(availableVShares+valueOfShares);
       sumNumShares=(availableNShares+numberOfShares);

     updateSharesBoGa(accountNumber,NumberFormatS.format(parseDouble((Math.abs(parseDouble(sumNumShares.toString()))+"").replace(",", ""))), NumberFormat.format(parseDouble((Math.abs(parseDouble(sumVumShares.toString()))+"").replace(",", ""))));
     
     if(fios.intFileReader(fios.createFileName("sharesAvailable","shareValues", "usedWindow"+accountNumber+".txt"))==365){ 
         
  Double sumVumShares2,sumNumShares2, availableVShares2,availableNShares2, valueOfShares2, numberOfShares2,sharePrice2; boolean success2=false;int status2=0;   
  sharePrice2= parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))); 
      availableVShares2=parseDouble(getSharesDetailsF(accountNumber).get(0).toString());
 
  availableNShares2=availableVShares2/sharePrice2;
 
    valueOfShares2=parseDouble(capital);  
   
    
    
     numberOfShares2=valueOfShares2/sharePrice2;
   
     sumVumShares2=(availableVShares2+valueOfShares2);
       sumNumShares2=(availableNShares2+numberOfShares2);
         
         
         
     updateShareOriginalC(accountNumber, capital,numberOfShares2.toString(),sumVumShares2.toString(),sumNumShares2.toString(),narration);
     
     fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountNumber+".txt"));
     fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountNumber+".txt"));
    fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesNumberF"+accountNumber+".txt"));
     fios.forceFileExistanceZero(fios.createFileName("sharesAvailable","shareValues", "sharesNumber"+accountNumber+".txt"));
     
     Integer ps=3;
 
 fios.intFileWriterReplace(fios.createFileName("sharesAvailable","shareValues", "usedWindow"+accountNumber+".txt"),ps.toString());
 
   fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesValueF"+accountNumber+".txt"), NumberFormat.format(parseDouble((Math.abs(parseDouble(sumVumShares2.toString()))+"").replace(",", ""))));
   
    fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesNumberF"+accountNumber+".txt"), NumberFormatS.format(parseDouble((Math.abs(parseDouble(sumNumShares2.toString()))+"").replace(",", "")))); 
    
     }
     
   fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesValue"+accountNumber+".txt"), NumberFormat.format(parseDouble((Math.abs(parseDouble(sumVumShares.toString()))+"").replace(",", ""))));
   
    fios.stringFileWriter(fios.createFileName("sharesAvailable","shareValues", "sharesNumber"+accountNumber+".txt"), NumberFormatS.format(parseDouble((Math.abs(parseDouble(sumNumShares.toString()))+"").replace(",", ""))));
    
     try {
           Connection cq=quaryObj.createConnection();
         cq.setAutoCommit(false);
            String UpdateQuary = "UPDATE master SET value_of_shares=?,number_of_shares=? WHERE account_number=?";
            try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
                
                pstool.setObject(1, NumberFormat.format(parseDouble((Math.abs(parseDouble(sumVumShares.toString()))+"").replace(",", ""))));
                
                pstool.setObject(2, NumberFormatS.format(parseDouble((Math.abs(parseDouble(sumNumShares.toString()))+"").replace(",", ""))));
                pstool.setObject(3, accountNumber);
              status=  pstool.executeUpdate();
           pstool.close();
            }
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
    
   if(!(status==0)){
success=true;
        }
 return success;
 
 
 
 }
 
public void loanBoGa(List ga){
 
 
       try {
           quaryObj.createConnection().setAutoCommit(false);
           PreparedStatement ps =  quaryObj.createConnection().prepareStatement("INSERT INTO borrow_guarantee VALUES(?,?,?,?,?,?,?,?,?)");
         ps.setObject(1, null);
        ps.setObject(2, this.getDBCurrentDate());
         ps.setObject(3, ga.get(0));
         
         ps.setObject(4, ga.get(1));
         
         ps.setObject(5,ga.get(2));
         
         ps.setObject(6, ga.get(3));
         
         ps.setObject(7, ga.get(4));
         
          ps.setObject(8, ga.get(5));
         
         ps.setObject(9, ga.get(6));

           ps.execute();
           
           quaryObj.createConnection().setAutoCommit(true);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
 
 }
public void updateShareOriginalC(String accountNumber, String capital,String numberOfShares2,String sumVumShares2,String sumNumShares2,String narration){

      try {
           quaryObj.createConnection().setAutoCommit(false);
           PreparedStatement ps =  quaryObj.createConnection().prepareStatement("INSERT INTO shares_Run_bal VALUES(?,?,?,?,?,?,?,?,?,?,?,?)");
         ps.setObject(1, null);//trn_id
        ps.setObject(2, this.getDBCurrentDate());//trn_date
         ps.setObject(3, this.AccountName(accountNumber));//account_name
         ps.setObject(4, accountNumber);//account_number
         ps.setObject(5,narration);//narrations
         
         ps.setObject(6, numberOfShares2);//number_shares_contributed
         
         ps.setObject(7, "-");//number_shares_removed
         
          ps.setObject(8, capital);//value_shares_contributed
         
         ps.setObject(9, "-");//value_shares_removed
          ps.setObject(10, sumNumShares2);//running_balance_n_shares
 ps.setObject(11, sumVumShares2);//running_balance_v_shares
  ps.setObject(12, this.getDBCurrentTime());//trn_time
           ps.execute();
           
           quaryObj.createConnection().setAutoCommit(true);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }


}

  public void  updateShareOriginalD (String accountNumber, String amountShares, String numberOfShares2, String diffVumShares2, String diffNumShares2,String narration){
  
  try {
           quaryObj.createConnection().setAutoCommit(false);
           PreparedStatement ps =  quaryObj.createConnection().prepareStatement("INSERT INTO shares_Run_bal VALUES(?,?,?,?,?,?,?,?,?,?,?,?)");
         ps.setObject(1, null);
        ps.setObject(2, this.getDBCurrentDate());
         ps.setObject(3, this.AccountName(accountNumber));
         ps.setObject(4, accountNumber);
         ps.setObject(5,narration);
         
         ps.setObject(6, "");
         
         ps.setObject(7, numberOfShares2);
         
          ps.setObject(8, "-");
         
         ps.setObject(9, amountShares);
          ps.setObject(10, diffNumShares2);
 ps.setObject(11, diffVumShares2);
  ps.setObject(12, this.getDBCurrentTime());
           ps.execute();
           
           quaryObj.createConnection().setAutoCommit(true);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }

  }
  public void updateSharesBoGa(String account,String numberShares, String ShareValue){
      try {
             Connection cq=quaryObj.createConnection();
 cq.setAutoCommit(false); 
  String UpdateQuary = "UPDATE"+" "+"borrow_guarantee"+" "+"SET trn_date=?,number_shares=?,value_shares=? WHERE account_number=?";
       try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
       pstool.setObject(1,this.getDBCurrentDate());
        pstool.setObject(2, numberShares);
         pstool.setObject(3, ShareValue);
        pstool.setObject(4, account);
           pstool.executeUpdate();
    }
cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
      
      
      
  
  
  }
  
  
  public void updateBorrowing(String account,String BS){
      try {
            Connection cq=quaryObj.createConnection();
 cq.setAutoCommit(false); 
  String UpdateQuary = "UPDATE"+" "+"borrow_guarantee"+" "+"SET trn_date=?,borrowing_status=? WHERE account_number=?";
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
       pstool.setObject(1,this.getDBCurrentDate());
        pstool.setObject(2, BS);
            pstool.setObject(3, account);
           pstool.executeUpdate();
    }
cq.setAutoCommit(true);     
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }}
 
 public void updateBoGa(String account,String amountBorrow,String amountGuarantee){
     
      try {
         Connection cq=quaryObj.createConnection(); 
 cq.setAutoCommit(false); 
  
  String UpdateQuary = "UPDATE"+" "+"borrow_guarantee"+" "+"SET borrow_qalified=?,guarantee_qalified=? WHERE account_number=?";
  
       try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1, amountBorrow);
           
         pstool.setObject(2, amountGuarantee);
         
        pstool.setObject(3, account);
        
           pstool.executeUpdate();
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
      
      
      
  
  
  }
 
 
 public List<String> getAllAccountNumbers(){
 List<String>theAccountNumbers= new ArrayList();
 String account;
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "SELECT account_number FROM  account_created_store";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    account= rs.getString("account_number");
                      
                    theAccountNumbers.add(account);
                    }
             cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return theAccountNumbers;
 }
 
 
 
  public String getSharesBalance(String accountNumber){
      
 String sharesBalance="";
 
 
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "Select running_balance_v_shares from shares_run_bal where  account_number="+"'"+accountNumber+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
             if (rs.last()) {
                       
                    sharesBalance= rs.getString("running_balance_v_shares");
                      
             
                    }
             cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return sharesBalance;
 }
 
 
 
 
  public List<String>getCustomerAccountNumbers(){
   List<String>theAccountNumbers= new ArrayList();
 String account;
          try {
             Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "SELECT account_number FROM  account_created_store where account_master>'5020000' and account_master<='5029999';";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    account= rs.getString("account_number");
                      
                    theAccountNumbers.add(account);
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return theAccountNumbers;
  
  
  }
 
//  public String runningBalanceDB(String accountNumber){
//
// String bal = "";
//          try {
//              quaryObj.createConnection().setAutoCommit(false);
//              String query = "SELECT  running_balance FROM  account_created_store WHERE account_number="+accountNumber;
//              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
//             
//              ResultSet rs = ps.executeQuery();
//              
//             
//              while (rs.next()) {
//                       
//                    bal= rs.getString("running_balance");
//                      
//                  
//                    }
//             
//                    
//          } catch (SQLException ex) {
//              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
//          }
//
//return bal;
// }
 
  public String lastSavings(String accountNumber){

 List bal = new ArrayList();
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "SELECT  credit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT credit="+"'"+"-"+"'"+") AND ( narration LIKE 'Savings DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("credit"));
                      
                  
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
 
  public String lastElectricPay(String accountNumber){

 List bal = new ArrayList();
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Electricty Payment DD%'))";
              PreparedStatement ps =cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
  
   public String lastAirTimePay(String accountNumber){

 List bal = new ArrayList();
          try {
       Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Air Time Allowance Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
  
  
  
  public String lastLunchAllPay(String accountNumber){

 List bal = new ArrayList();
          try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Lunch Allowance Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
  
  public String lastWaterPay(String accountNumber){

 List bal = new ArrayList();
          try {
             Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Electricty Payment DD%'))";
              PreparedStatement ps =   cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq); 
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
  
  
  public String lastNewsPapersPay(String accountNumber){

 List bal = new ArrayList();
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'News Papers Payment DD%'))";
              PreparedStatement ps =   cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);         
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
 
   public String lastTeleAndNetPay(String accountNumber){

 List bal = new ArrayList();
          try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Telphone and Internet Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
   
 public String lastLicenseAndPermitPay(String accountNumber){

 List bal = new ArrayList();
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Licenses and Permits Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
               cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }  
    public String lastStationaryPay(String accountNumber){

 List bal = new ArrayList();
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Stationary Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);     
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }  
   
  public String lastLegalExpePay(String accountNumber){

 List bal = new ArrayList();
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Legal Expenses Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq); 
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }  
  
   public String lastBankChargesPay(String accountNumber){

 List bal = new ArrayList();
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Bank Charges Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                  cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);     
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }  
   public String lastFinancingExpensePay(String accountNumber){

 List bal = new ArrayList();
          try {
         Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Financing Expense Payment DD%'))";
              PreparedStatement ps =   cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);   
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }  
   
         public String lastCommissionPayablePay(String accountNumber){

 List bal = new ArrayList();
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Commission Payable Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
    public String lastInterestPayablePay(String accountNumber){

 List bal = new ArrayList();
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Interest Payable Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);       
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
   public String lastProvisionForBadDebtsPay(String accountNumber){

 List bal = new ArrayList();
          try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Provision for Bad Debts Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
            
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
   public String lastProvisionForDepreciationPay(String accountNumber){

 List bal = new ArrayList();
          try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Provision for Depreciation Payment DD%'))";
              PreparedStatement ps =cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
   
    public String lastEntertainAndRefreshPay(String accountNumber){

 List bal = new ArrayList();
          try {
               Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Entertainment and Refreshment Payment DD%'))";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
               cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq); 
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
    
    public String lastSalaryPay(String accountNumber){

 List bal = new ArrayList();
          try {
              Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  credit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT  credit="+"'"+"-"+"'"+") AND ( narration LIKE 'Salary Payment For%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("credit"));
                      
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
      public String lastTxn(String accountNumber){

 List bal = new ArrayList();
          try {
              Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  credit,debit FROM  bsanca"+accountNumber;
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      bal.add(rs.getString("credit"));  
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(!bal.get(0).equals("-")){
    
return bal.get(0).toString();

}else if(!bal.get(1).equals("-")){

return bal.get(1).toString();
}else{
return "0.0";
}

 } 
      
      
      public String getCashBal(){
      String theCash="", returnedString="";
      
      try {
              Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  ledger_balance FROM  bsanca01123000110";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                 theCash=rs.getString("ledger_balance");
                 
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
      
      if(parseDouble(theCash)<0){
      
      returnedString= "("+fmt.formatForStatementNumbers(theCash)+")";
      
      }else{
      
      returnedString=fmt.formatForStatementNumbers(theCash);
      }
      
      
      
     
      
      return returnedString;
      }
    public String lastAllowancePay(String accountNumber){

 List bal = new ArrayList();
          try {
             Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Employees Allowancies Payment DD%'))";
              PreparedStatement ps =cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
               cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);       
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
    
    public String lastRentPay(String accountNumber){

 List bal = new ArrayList();
          try {
              Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Rent Payment DD%'))";
              PreparedStatement ps =cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);         
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
    
    
    public String lastTaxesPay(String accountNumber){

 List bal = new ArrayList();
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Tax Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
               cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);       
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
    
    public String lastOtherExpensesPay(String accountNumber){

 List bal = new ArrayList();
          try {
              Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Other Expenses Payment DD%'))";
              PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                    cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);       
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
     public String lastBoardMemberAllance(String accountNumber){

 List bal = new ArrayList();
          try {
                Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Board Sitting Allowance Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                    cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 }
           public String lastTransportPay(String accountNumber){

 List bal = new ArrayList();
          try {
                 Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Transport  Expense Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);         
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
         public String lastPayee(String accountNumber){

 List bal = new ArrayList();
          try {
                Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Payee Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
                cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);        
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
     public String lastNssf(String accountNumber){

 List bal = new ArrayList();
          try {
             Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Nssf Payment DD%'))";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
              cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
           
             public String lastBadLoansWrittenOffPay(String accountNumber){

 List bal = new ArrayList();
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  debit FROM  bsanca"+accountNumber+" "+"WHERE ((NOT debit="+"'"+"-"+"'"+") AND ( narration LIKE 'Bad Loans Written off Payment DD%'))";
              PreparedStatement ps =   cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              if (rs.last()) {
                       
                    bal.add(rs.getString("debit"));
                      
                  
                    }
             
            cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);          
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
if(bal.isEmpty()){
bal.add("0.0");
}
return bal.get(0).toString();
 } 
           public String AccountName(String accountNumber){
//return   fios.stringFileReader(fios.createFileName("accountManagement", "accountName", "accountName"+accountNumber+".txt"));
 String nam = "";
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  account_name FROM  account_created_store WHERE account_number="+"'"+accountNumber+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    nam= rs.getString("account_name");
                      
                  
                    }
             cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return nam;
 }

           
           
           public void initializeSummuryTable(){
           
           
try {
                
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps = cq.prepareStatement("INSERT INTO summurystats VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);//TrnId
            ps.setObject(2, this.getDBCurrentDate());//TrnDate 
            ps.setObject(3, "0");//MonthPaid 
            ps.setObject(4, "0");//YearPaid
            ps.setObject(5, "0");//loanTrnId
            ps.setObject(6, "0");//LoanId
            ps.setObject(7, "0");//LoanId
            ps.setObject(8, "0");//BatchCode
             ps.setObject(9, "0");//AmountDisbursed
            ps.setObject(10, "0");//ExpectedInterest
            ps.setObject(11,"0");//ExpectedTotalAmount
            ps.setObject(12,"0");//InterestRate
            ps.setObject(13, "0");//AmountPaid
            ps.setObject(14, "0");//PrincipalPaid
            ps.setObject(15,"0");//InterestPaid
            ps.setObject(16,"0");//AccumulatedInterestPaid
             ps.setObject(17,"0");//LoanPenaltyPaid
             
                ps.setObject(18, "0");//PrincipalBalance
            ps.setObject(19, "0");//InterestBalance
            ps.setObject(20,"0");//AccumulatedInterestBalance
            ps.setObject(21,"0");//LoanPenaltyBalance
             ps.setObject(22,"0");//LoanBalance
             
              ps.setObject(23,"0");//LoanStatusReport
            ps.setObject(24, "0");//OtherOne
          ps.setObject(25, "0");//OtherTwo
              ps.setObject(26, "0");//OtherThree
               ps.setObject(27, "0");//OtherFour
               
                ps.setObject(28,"0");//TrnId
            ps.setObject(29, "0");//TrnDate 
            ps.setObject(30, "0");//MonthPaid 
            ps.setObject(31, "0");//YearPaid
            ps.setObject(32, "0");//loanTrnId
            ps.setObject(33, "0");//LoanId
            ps.setObject(34, "0");//LoanId
            ps.setObject(35, "0");//BatchCode
             ps.setObject(36, "0");//AmountDisbursed
            ps.setObject(37, "0");//ExpectedInterest
            ps.setObject(38,"0");//ExpectedTotalAmount
            ps.setObject(39,"0");//InterestRate
            ps.setObject(40, "0");//AmountPaid
            ps.setObject(41, "0");//PrincipalPaid
            ps.setObject(42,"0");//InterestPaid
            ps.setObject(43,"0");//AccumulatedInterestPaid
             ps.setObject(44,"0");//LoanPenaltyPaid
             
                ps.setObject(45, "0");//PrincipalBalance
            ps.setObject(46, "0");//InterestBalance
            ps.setObject(47,"0");//AccumulatedInterestBalance
            ps.setObject(48,"0");//LoanPenaltyBalance
             ps.setObject(49,"0");//LoanBalance
             
              ps.setObject(50,"0");//LoanStatusReport
            ps.setObject(51, "0");//OtherOne
          ps.setObject(52, "0");//OtherTwo
              ps.setObject(53, "0");//OtherThree
               ps.setObject(54, "0");//OtherFour
                ps.setObject(55, "0");//MonthPaid 
            ps.setObject(56, "0");//YearPaid
            ps.setObject(57, "0");//loanTrnId
            ps.setObject(58, "0");//LoanId
            ps.setObject(59, "0");//LoanId
            ps.setObject(60, "0");//BatchCode
             ps.setObject(61, "0");//AmountDisbursed
            ps.setObject(62, "0");//ExpectedInterest
            ps.setObject(63,"0");//ExpectedTotalAmount
            ps.setObject(64,"0");//InterestRate
            ps.setObject(65, "0");//AmountPaid
            ps.setObject(66, "0");//PrincipalPaid
            ps.setObject(67,"0");//InterestPaid
            ps.setObject(68,"0");//AccumulatedInterestPaid
             ps.setObject(69,"0");//LoanPenaltyPaid
             
                ps.setObject(70, "0");//PrincipalBalance
            ps.setObject(71, "0");//InterestBalance
            ps.setObject(72,"0");//AccumulatedInterestBalance
            ps.setObject(73,"0");//LoanPenaltyBalance
             ps.setObject(74,"0");//LoanBalance
             
              ps.setObject(75,"0");//LoanStatusReport
            ps.setObject(76, "0");//OtherOne
          ps.setObject(77, "0");//OtherTwo
              ps.setObject(78, "0");//OtherThree
               ps.setObject(79, "0");//OtherFour
               
                ps.setObject(80,"0");//TrnId
            ps.setObject(81, "0");//TrnDate 
            ps.setObject(82, "0");//MonthPaid 
            ps.setObject(83, "0");//YearPaid
            ps.setObject(84, "0");//loanTrnId
            ps.setObject(85, "0");//LoanId
            ps.setObject(86, "0");//LoanId
            ps.setObject(87, "0");//BatchCode
             ps.setObject(88, "0");//AmountDisbursed
            ps.setObject(89, "0");//ExpectedInterest
            ps.setObject(90,"0");//ExpectedTotalAmount
            ps.setObject(91,"0");//InterestRate
            ps.setObject(92, "0");//AmountPaid
            ps.setObject(93, "0");//PrincipalPaid
            ps.setObject(94,"0");//InterestPaid
            ps.setObject(95,"0");//AccumulatedInterestPaid
             ps.setObject(96,"0");//LoanPenaltyPaid
             
                ps.setObject(97, "0");//PrincipalBalance
          ps.setObject(98,"0");//LoanStatusReport
            ps.setObject(99, "0");//OtherOne
          ps.setObject(100, "0");//OtherTwo
              ps.setObject(101, "0");//OtherThree
               ps.setObject(102, "0");//OtherFour
                ps.setObject(103, "0");//MonthPaid 
            ps.setObject(104, "0");//YearPaid
            ps.setObject(105, "0");//loanTrnId
            ps.setObject(106, "0");//LoanId
            ps.setObject(107, "0");//LoanId
            ps.setObject(108, "0");//BatchCode
             ps.setObject(109, "0");//AmountDisbursed
            ps.setObject(110, "0");//ExpectedInterest
            ps.setObject(111,"0");//ExpectedTotalAmount
            ps.setObject(112,"0");//InterestRate
            ps.setObject(113, "0");//AmountPaid
            ps.setObject(114, "0");//PrincipalPaid
            ps.setObject(115,"0");//InterestPaid
            ps.setObject(116,"0");//AccumulatedInterestPaid
             ps.setObject(117,"0");//LoanPenaltyPaid
             
                ps.setObject(118, "0");//PrincipalBalance
            ps.setObject(119, "0");//InterestBalance
            ps.setObject(120,"0");//AccumulatedInterestBalance
            ps.setObject(121,"0");//LoanPenaltyBalance
             ps.setObject(122,"0");//LoanBalance
             
              ps.setObject(123,"0");//LoanStatusReport
            ps.setObject(124, "0");//OtherOne
          ps.setObject(125, "0");//OtherTwo
              ps.setObject(126, "0");//OtherThree
               ps.setObject(127, "0");//OtherFour
               
                ps.setObject(128,"0");//TrnId
            ps.setObject(129, "0");//TrnDate 
            ps.setObject(130, "0");//MonthPaid 
            ps.setObject(131, "0");//YearPaid
            ps.setObject(132, "0");//loanTrnId
            ps.setObject(133, "0");//LoanId
            ps.setObject(134, "0");//LoanId
             ps.setObject(135, "0");//InterestBalance
            ps.setObject(136,"0");//AccumulatedInterestBalance
            ps.setObject(137,"0");//LoanPenaltyBalance
             ps.setObject(138,"0");//LoanBalance
             
              ps.setObject(139,"0");//LoanStatusReport
            ps.setObject(140, "0");//OtherOne
          ps.setObject(141, "0");//OtherTwo
              ps.setObject(142, "0");//OtherThree
               ps.setObject(143, "0");//OtherFour
               
                ps.setObject(144,"0");//TrnId
            ps.setObject(145, "0");//TrnDate 
            ps.setObject(146, "0");//MonthPaid 
            ps.setObject(147, "0");//YearPaid
            ps.setObject(148, "0");//loanTrnId
            ps.setObject(149, "0");//LoanId
            ps.setObject(150, "0");//LoanId
           
              ps.setObject(151, "0");//OtherOne
          ps.setObject(152, "0");//OtherTwo
              ps.setObject(153, "0");//OtherThree
               ps.setObject(154, "0");//OtherFour
               
                ps.setObject(155,"0");//TrnId
            ps.setObject(156, "0");//TrnDate 
            ps.setObject(157, "0");//MonthPaid 
            ps.setObject(158, "0");//YearPaid
            ps.setObject(159, "0");//loanTrnId
            ps.setObject(160, "0");//LoanId
            ps.setObject(161, "0");//LoanId
            
             ps.setObject(162, "0");//InterestBalance
            ps.setObject(163,"0");//AccumulatedInterestBalance
            ps.setObject(164,"0");//LoanPenaltyBalance
             ps.setObject(165,"0");//LoanBalance
             
              ps.setObject(166,"0");//LoanStatusReport
            ps.setObject(167, "0");//OtherOne
          ps.setObject(168, "0");//OtherTwo
              ps.setObject(169, "0");//OtherThree
               ps.setObject(170, "0");//OtherFour
               
                ps.setObject(171,"0");//TrnId
            ps.setObject(172, "0");//TrnDate 
            ps.setObject(173, "0");//MonthPaid 
            ps.setObject(174, "0");//YearPaid
            ps.setObject(175, "0");//loanTrnId
            ps.setObject(176, "0");//LoanId
            ps.setObject(177, "0");//LoanId
             ps.setObject(178, "0");//InterestBalance
            ps.setObject(179,"0");//AccumulatedInterestBalance
            ps.setObject(180,"0");//LoanPenaltyBalance
             ps.setObject(181,"0");//LoanBalance
             
              ps.setObject(182,"0");//LoanStatusReport
            ps.setObject(183, "0");//OtherOne
          ps.setObject(184, "0");//OtherTwo
              ps.setObject(185, "0");//OtherThree
               ps.setObject(186, "0");//OtherFour
               
                ps.setObject(187,"0");//TrnId
            ps.setObject(188, "0");//TrnDate 
            ps.setObject(189, "0");//MonthPaid 
            ps.setObject(190, "0");//YearPaid
            ps.setObject(191, "0");//loanTrnId
            ps.setObject(192, "0");//LoanId
            ps.setObject(193, "0");//LoanId
           
              ps.setObject(194, "0");//OtherOne
          ps.setObject(195, "0");//OtherTwo
              ps.setObject(196, "0");//OtherThree
               ps.setObject(197, "0");//OtherFour
               
                ps.setObject(198,"0");//TrnId
            ps.setObject(199, "0");//TrnDate 
            ps.setObject(200, "0");//MonthPaid 
            ps.setObject(201, "0");//YearPaid
          
            ps.execute();
        
            
            ps.close();
           cq.setAutoCommit(true);
            
            quaryObj.closeConnection(cq);
          
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }            
           
           
           }
           
           
      public synchronized void initialiseDailyStats(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL statsTracking()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}  
      
    public synchronized void initialiseSavingsValueTotal(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL countNumberValueOfActiveSavings()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}      
    
     public synchronized void initialiseSavingsValueTotal2(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL countNumberValueOfActiveSavings2()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}
     public synchronized void initialiseDepositValueTotal(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL countNumberValueOfActiveDeposits()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}    
        public synchronized void initialiseDepositValueTotal2(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL countNumberValueOfActiveDeposits2()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}    
      public synchronized void initialiseLoanArrearsSummury(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL creatingArrearsLoanSummury()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}     
     
   
            public synchronized void totalValueOfLoanBook(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL totalValueOfLoanBook()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

} 
      
    public synchronized void initialiseSummuryStatAccounts(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL accountSummuryStatsAccounts()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

} 
     
     public synchronized void countTheCustomers(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updateCountStatsCustomers()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

} 
      
     public synchronized void countTheAccounts(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updateCountStatsAccounts()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}    
            
   public synchronized void initialiseSharesValueTotal(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL totalNumberValueOfShares()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}      
      
     
 public synchronized void initialiseLoanValueNumber(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL countNumberValueOfActiveLoans()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}     
    public synchronized void initialiseLoanValueNumberCompletedWrittenOff(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL countNumberValueOfCompletedWrittenOffLoans()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}     
  

  public synchronized void updateLoanDisburseCounts(String accountNumber,String amount){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updateLoanAmountNumberDisbursements("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

} 




 
 public boolean statTableNotEmpety(){
     
 boolean itemTable=false;int theOnei=0;
 
  try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
           
             String query = "SELECT COUNT(ItemId) AS OneIn FROM summurystats";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theOnei=rst3.getInt("OneIn");
   
            
             }
     
         
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 
  
  if(theOnei>0){
  itemTable=true;
  }
  return itemTable;
 }
   public String AccountNames(String accountNumber){
//return   fios.stringFileReader(fios.createFileName("accountManagement", "accountName", "accountName"+accountNumber+".txt"));
 String nam = "";
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  DISTINCT account_name FROM  account_created_store WHERE account_number="+"'"+accountNumber+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    nam= rs.getString("account_name");
                      
                  
                    }
             cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return nam;
 }
         
    public String AccountMasterName(String accountNumber){
//return   fios.stringFileReader(fios.createFileName("accountManagement", "accountName", "accountName"+accountNumber+".txt"));
 String nam = "";
          try {
           Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT  account_l5 FROM  account_created_store WHERE account_number="+"'"+accountNumber+"'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    nam= rs.getString("account_l5");
                      
                  
                    }
             cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);  
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return nam;
 }          
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
 public List<String> getAllAccountMasterNames(){
 List<String>theAccountNumbers= new ArrayList();
 String account;
 
          try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT account_name FROM  account_master_store";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    account= rs.getString("account_name");
                      
                    theAccountNumbers.add(account);
                    }
             
               cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);         
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return theAccountNumbers;
 }
 public List<String> getAllAccountMasterAccounts(){
 List<String>theAccountNumbers= new ArrayList();
 String account;
          try {
          Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
              String query = "SELECT account_number FROM  account_master_store";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
                       
                    account= rs.getString("account_number");
                      
                    theAccountNumbers.add(account);
                    }
             
            cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);           
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return theAccountNumbers;
 }
 
  public List<String> basicBioDate(String accountNumber){
  List<String> bio=new ArrayList();

   try {
        Connection cq=quaryObj.createConnection(); 
           cq.setAutoCommit(false);
             
             String query = "SELECT title,first_name, sir_name,sex,birth_date,marital_status,highest_educ_level FROM master WHERE account_number="+accountNumber;
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
             if(rst3.next()){
           bio.add(rst3.getString("title"));
             bio.add(rst3.getString("first_name"));     
              bio.add(rst3.getString("sir_name"));
               bio.add(rst3.getString("sex"));
                bio.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rst3.getString("birth_date")));
                 bio.add(rst3.getString("marital_status"));
                  bio.add(rst3.getString("highest_educ_level"));
             }
             
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  return bio;
  }
 
 
 public void createNewPassWord (List userDetails){
    
   try {
         Connection cq=quaryObj.createConnection(); 
      cq.setAutoCommit(false);
        PreparedStatement pstmt = cq.prepareStatement("UPDATE log_in SET p_word_login = ? WHERE  user_id= ?");
 
        pstmt.setString(1, userDetails.get(0).toString());
        pstmt.setString(2, userDetails.get(2).toString());
        pstmt.executeUpdate();
     cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
   
     
   Integer j=46;
            fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", "passWordChange"+userDetails.get(2).toString()+".txt"),j.toString());        
 }
 
 
  public boolean  createAdmin (List<String> details){
  boolean suc=false;
  try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
           PreparedStatement ps =  cq.prepareStatement("INSERT INTO log_in VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
         ps.setObject(1, this.getDBCurrentDate());//trn_date
        ps.setObject(2, null);//user_id
         ps.setObject(3,"XXXXXX");//p_word_login
         ps.setObject(4, details.get(1));//account_number
         ps.setObject(5,this.AccountName(details.get(1)));//account_name
         
         ps.setObject(6, details.get(0));// title
         
         ps.setObject(7,details.get(2));// first_name
         
          ps.setObject(8, details.get(3));//last_name
         
         ps.setObject(9, fmt.forDatabaseWithFullYearBeginningWithDate(details.get(4)));// birth_date
          ps.setObject(10, fmt.forDatabaseWithFullYearBeginningWithDate(details.get(5)));//recruitement_date
 ps.setObject(11, details.get(6));// line_manager
  ps.setObject(12, details.get(7));//former_employment
   ps.setObject(13, details.get(8));//role
  ps.setObject(14, this.getDBCurrentTime());//creation_time
          suc= ps.execute();
         cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
return suc;
  }
 
 
 public String getNewID(String accountNumber){
 
String userId="";

   try {
        Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
             
             String query = "SELECT user_id FROM log_in WHERE account_number="+accountNumber;
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            if(rst3.last()){
           userId=rst3.getString("user_id");
           
             }
             
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  return  userId;
 }
 
 
 public String getUserId(JComboBox userBox,String userName){
 String userId="";ArrayList <String> userIDs=new ArrayList();

   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT user_id FROM log_in WHERE account_name="+"'"+userName+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
                if(rst3.wasNull()){
                
                userId="XXXXY";
                }else{
           userId=rst3.getString("user_id");
                }
             userIDs.add(userId);
            
             }
          
             modelcombo = new MyComboBoxModel(userIDs);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  return  userId;
 
 
 }
 
public void fillWithUserNames(JComboBox userBox){
    
 String accountName="";ArrayList <String> useNames=new ArrayList();
 
useNames.add("Select Portfolio Owner");
   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT  account_name,user_id FROM log_in";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("account_name")+"     "+rst3.getString("user_id");
       useNames.add(accountName);
            
             }
          
             modelcombo = new MyComboBoxModel(useNames);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);
 
 
 }


public void feelMonthYearComber(JComboBox userBox){
 String individualEntry="";ArrayList <String> allEntries=new ArrayList();
 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT  DISTINCT monthNow, yearNow FROM loan_savings_shares";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           individualEntry=rst3.getString("monthNow")+" "+rst3.getString("yearNow");
       allEntries.add(individualEntry);
            
             }
          
             modelcombo = new MyComboBoxModel(allEntries);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);


}

public void fillmWithUserNames(JComboBox userBox){
 String accountName="";ArrayList <String> useNames=new ArrayList();
 
useNames.add("Select Portfolio Owner");
useNames.add("Select Generally All");
   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT  account_name,user_id FROM log_in";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           accountName=rst3.getString("account_name")+"     "+rst3.getString("user_id");
       useNames.add(accountName);
            
             }
          
             modelcombo = new MyComboBoxModel(useNames);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 
 }

public void fillWithEmployeeRewards(JComboBox userBox){
    
 String theRewards="";
 
 List rewards=new ArrayList();
 
rewards.add("Select The Reward");


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             if(theNotUsedRewardThere()){
             String query = "SELECT ItemName FROM payrollemployeerewarddeductionstore WHERE (ItemGroup='Employee Reward' AND CreationalStatus='New')";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theRewards=rst3.getString("ItemName");
       rewards.add(theRewards);
            
             }
   }else{
           
      rewards.add("Empty");      
           }     
         
        listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
                    userBox.setModel(modelcombo); 
                    userBox.setSelectedIndex(0);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 
 }

public void fillWithDeductions(JComboBox userBox){
    
 String theRewards="";
 
 List rewards=new ArrayList();
 
rewards.add("Select The Deduction");


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             if(theNotUsedRewardThere()){
             String query = "SELECT ItemName FROM payrollemployeerewarddeductionstore WHERE (ItemGroup='Deduction' AND CreationalStatus='New')";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theRewards=rst3.getString("ItemName");
       rewards.add(theRewards);
            
             }
   }else{
           
      rewards.add("Empty");      
           }     
         
        listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
                    userBox.setModel(modelcombo); 
                    userBox.setSelectedIndex(0);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 
 }

public void fillWithFormularItems(JComboBox userBox){
    
 String theRewards="";
 
 List rewards=new ArrayList();
 
rewards.add("Select The Item");


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             if(theNotUsedRewardThere()){
             String query = "SELECT ItemName FROM payrollemployeerewarddeductionstore WHERE (AccrualMethod='Formular' AND UsageStatus='Not Used')";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theRewards=rst3.getString("ItemName");
       rewards.add(theRewards);
            
             }
   }else{
           
      rewards.add("Empty");      
           }     
         
        listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
                    userBox.setModel(modelcombo); 
                    userBox.setSelectedIndex(0);
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  
 
 
 }

public boolean theRewardDeductionExists(String theRewardDeduction){
    
boolean alreadyThe=false;int theOnei=0;


   try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
           
             String query = "SELECT COUNT(ItemName) AS OneIn FROM payrollemployeerewarddeductionstore WHERE ItemName="+"'"+theRewardDeduction+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           theOnei=rst3.getInt("OneIn");
   
            
             }
     
         
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  if(theOnei>0){
  alreadyThe=true;
  }
 
 return alreadyThe;
 }










public void fillMeWithPayRollItems(JTable table){
 int l=0;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("ID");
      column1.add("PAYROLL NAME");
      column1.add("PAYROLL GROUP");
      column1.add("PAYROLL CATEGORY");
      column1.add("ACCRUAL FREQUENCY");
      column1.add("ACCRUAL METHOD");
      column1.add("EXCEPTION STATUS");
      column1.add("USAGE STATUS");

     try {
 Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);

            String query = "SELECT TrnId, ItemName, ItemGroup,ItemCategory,AccrualFrequency,AccrualMethod,Exceptional,CreationalStatus,UsageStatus FROM payrollemployeerewarddeductionstore WHERE NOT CreationalStatus='New'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("TrnId"));
         data4.add(1, rst3.getString("ItemName"));
         data4.add(2, rst3.getString("ItemGroup")); 
          data4.add(3, rst3.getString("ItemCategory"));
        data4.add(4, rst3.getString("AccrualFrequency"));
         data4.add(5, rst3.getString("AccrualMethod"));  
         data4.add(6, rst3.getString("Exceptional"));  
         data4.add(7, rst3.getString("UsageStatus")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }


}

public void fillMeWithPayRollFormularItems(JTable table){
 int l=0;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("RANGE LEVEL");
      column1.add("PERCENT INVOLVED");
      column1.add("PERCENT INVOLVED");
      column1.add("LOWER LIMIT");
      column1.add("UPPER LIMIT");
      column1.add("USAGE STATUS");

     try {
 Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);

            String query = "SELECT TrnId, RangeLevel,ItemName,PercentageInvolved,LowerLimitAmount,UpperLimitAmount,UsageStatus FROM payrollitemsparameterforformulars";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("RangeLevel"));
          data4.add(1, rst3.getString("ItemName"));
         data4.add(2, rst3.getString("PercentageInvolved")); 
          data4.add(3, rst3.getString("LowerLimitAmount"));
        data4.add(4, rst3.getString("UpperLimitAmount"));
         data4.add(5, rst3.getString("UsageStatus"));  
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }


}


public void feelPayRollUserReward(JTable table,String accountNumber){
 int l=0;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("ITEM ID");
      column1.add("REWARD NAME");
      column1.add("THE REWARD");

     try {
 Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);

            String query = "SELECT P.TrnId,P.ItemName,S.AmountComputed FROM payrollusagestatic S LEFT OUTER JOIN payrollemployeerewarddeductionstore P ON S.TrnId=P.TrnId WHERE S.accountNumber="+"'"+accountNumber+"'  AND P.ItemGroup='Employee Reward'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("TrnId"));
          data4.add(1, rst3.getString("ItemName"));
         data4.add(2, rst3.getString("AmountComputed"));   
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }


}


public void feelPayRollUserDeductions(JTable table,String accountNumber){
 int l=0;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("ITEM ID");
      column1.add("DEDUCTION NAME");
      column1.add("THE DEDUCTION");

     try {
 Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);

            String query = "SELECT P.TrnId,P.ItemName,S.AmountComputed FROM payrollusagestatic S LEFT OUTER JOIN payrollemployeerewarddeductionstore P ON S.TrnId=P.TrnId WHERE S.accountNumber="+"'"+accountNumber+"'  AND P.ItemGroup='Deduction'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("TrnId"));
          data4.add(1, rst3.getString("ItemName"));
         data4.add(2, rst3.getString("AmountComputed"));   
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }


}


public void  updateDetailsOfPayRollReward(List rewardDetails){

       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE payrollemployeerewarddeductionstore SET ItemCategory=?, AccrualMethod=?,AccrualFrequency=?,Exceptional=?, CreationalStatus=? WHERE ItemName=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1, rewardDetails.get(1));
           
         pstool.setObject(2, rewardDetails.get(2));
         
        pstool.setObject(3, rewardDetails.get(4));
          pstool.setObject(4, rewardDetails.get(3));
            pstool.setObject(5, "Active");
             pstool.setObject(6, rewardDetails.get(0));
           pstool.executeUpdate();
       }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }

}


public boolean theNotUsedRewardThere(){
boolean theRwardPresent=false;int numberRewards=0;
try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT COUNT(ItemName) AS rewards FROM payrollemployeerewarddeductionstore WHERE (ItemGroup='Employee Reward' AND UsageStatus='Not Used')";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           numberRewards=rst3.getInt("rewards");
            
             }
          
     cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
if(numberRewards>0){
theRwardPresent=true;

}  
return theRwardPresent;

}

 public List editUsers(String userID){
List userIDs=new ArrayList();

   try {
       Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT account_number,title,first_name,last_name, birth_date,recruitement_date,  line_manager, former_employment,role FROM log_in WHERE user_id="+"'"+userID+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            if(rst3.next()){
              userIDs.add(rst3.getString("account_number"));
              userIDs.add(rst3.getString("title"));
              userIDs.add(rst3.getString("first_name"));
              userIDs.add(rst3.getString("last_name"));
              userIDs.add(rst3.getString("birth_date"));
              userIDs.add(rst3.getString("recruitement_date"));
              userIDs.add(rst3.getString("line_manager"));
              userIDs.add(rst3.getString("former_employment"));
              userIDs.add(rst3.getString("role"));
            
             }
            
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  return   userIDs;
 
 }
 
 public void fillMeWithAllAdminDetails(JTable table){
  
  int l=0;
    
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("USER ID");
      column1.add("USE NAME");
      column1.add("TITLE");
      column1.add("LINE MANAGER");
      column1.add("ROLE");

     try {
 Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);

            String query = "SELECT user_id, account_name, title,line_manager,role FROM log_in";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, rst3.getString("user_id"));
         data4.add(1, rst3.getString("account_name"));
         data4.add(2, rst3.getString("title"));  
         data4.add(3, rst3.getString("line_manager"));  
         data4.add(4, rst3.getString("role")); 
         data5.add(l, data4);
         l++;
            }
       
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

  
  } 
 
 
 
  public boolean  updateAdmin (List<String> details){

         boolean suc=false; int v=2;
      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE log_in SET trn_date=?, title=?,first_name=?,last_name=?, birth_date=?, recruitement_date=?, line_manager=?,former_employment=?, role=?, creation_time=? WHERE user_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1, this.getDBCurrentDate());
           
         pstool.setObject(2, details.get(0));
         
        pstool.setObject(3, details.get(2));
          pstool.setObject(4, details.get(3));
            pstool.setObject(5, details.get(4));
              pstool.setObject(6, details.get(5));
                pstool.setObject(7, details.get(6));
               pstool.setObject(8, details.get(7));
                pstool.setObject(9, details.get(8));
                 pstool.setObject(10, this.getDBCurrentTime());
                  pstool.setObject(11, fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "userIdi.txt")));
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
  
return suc;
  }
 
 
  public String getUserName(String userID){
 String userName="";

   try {
       Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT account_name FROM log_in WHERE user_id="+"'"+userID+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
                if(rst3.wasNull()){
                
                userName="XXXXY";
                }else{
           userName=rst3.getString("account_name");
                }
       
            
             }
     
            cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  return  userName;
 
 
 }
 
 public boolean  deleteUserId(String userId){
boolean deleted=false;
          try {
           Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
              
              PreparedStatement psxmts =  cq.prepareStatement("DELETE FROM log_in WHERE user_id="+userId);
             deleted= psxmts.execute();
               cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
return deleted;
 }
 
 private List accountsInArrears(){
 
      List arrearsDetails=new ArrayList();
      try {
          Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
      
 
          String query = "SELECT  applicant_account_number FROM new_loan_appstore WHERE  instalment_next_due_date<"+"'"+this.getDBCurrentDate()+"'"+"&&   (loan_cycle_status="+"'"+"Disbursed"+"'"+" OR loan_cycle_status="+"'"+"Renewed"+"')";

          PreparedStatement psxmt = cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        while(rsxmt.next()){
        String account=rsxmt.getString("applicant_account_number");
        if(loanArrearsUpdated( account)){
            
   arrearsDetails.add( account);
       
        }
          }
          
        rsxmt.close();
        psxmt.close();
         cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
  
      
      
return arrearsDetails;
  
  
  
  }
  private boolean loanArrearsUpdated( String account){
boolean updated=false;int updateN=0;
      
      try {
          Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
 
          String query = "SELECT  COUNT(instalment_paid) AS instalments FROM new_loan_appstoreamort  WHERE master2_id="+"'"+"newloan"+account+"' AND  instalment_status="+"'"+"NP"+"'";

          PreparedStatement psxmt = cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
        if(rsxmt.next()){
  updateN=rsxmt.getInt("instalments");
        }
        if(updateN>0){
        updated=true;
        }
          
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         loancon.closeConnection(cq);
      } catch (SQLException ex) {
              
              
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
      
     
 
return updated;
 
 
 
 }
 
 public String cashPosted(String staffId){
     
     String postingo="0.0";
 String cashAccount= fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0];
 if(!nocashposted(staffId)){
 postingo=(parseDouble(cashDebited(cashAccount,staffId))-parseDouble(cashCredited(cashAccount,staffId)))+"";
 
 if(parseDouble(postingo)<=0){
 postingo="0.0";
 }
 
 }
 return postingo;
 
 }
 public boolean nocashposted(String staffId){
 boolean nocash=true;
 String cashAccount= fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0];
 try {
          Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
 
          String query = "SELECT  debit FROM bsanca"+cashAccount+" "+"WHERE trn_date="+"'"+this.getDBCurrentDate()+"'"+" "+"AND staff_id="+staffId;

          PreparedStatement psxmt = cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
   while(rsxmt.next()){
  nocash=false;
        }
        
        
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
              
              
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
 
 return nocash;
 }
 private String cashCredited(String cashAccount,String staffId){
 String totalCredits="0.0";
 try {
          Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
 
          String query = "SELECT  SUM(credit) AS totalCredits FROM bsanca"+cashAccount+" "+"WHERE (debit IS NOT NULL) AND (trn_date="+"'"+this.getDBCurrentDate()+"'"+" "+"AND staff_id="+staffId+")";

          PreparedStatement psxmt = cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
    
  while(rsxmt.next()){
        
          
       
  totalCredits=rsxmt.getString("totalCredits");
                  
        
                  
          }
 
                  
  
        
        
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
              
              
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
 
   
   
 return totalCredits;
 }
 
 private String cashDebited(String cashAccount,String staffId){
 
  String totalDebits="0.0";
 try {
          Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
 
          String query = "SELECT  SUM(debit) AS totalDebits FROM bsanca"+cashAccount+" "+"WHERE (debit IS NOT NULL) AND (trn_date="+"'"+this.getDBCurrentDate()+"'"+" "+"AND staff_id="+staffId+")";

          PreparedStatement psxmt = cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
          
  while(rsxmt.next()){
      
  totalDebits=rsxmt.getString("totalDebits");
  
                  }
 
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
              
              
          Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.FINEST, ex.toString());
      }
 
 
 return totalDebits;
 
 }
 
 
// public List<String> getfullUserDetails(String accountNumber){
// List userDetails=null;
// 
// 
// 
// 
// 
// 
// return userDetails;
// }
 
 
 
 
 public boolean updatelist(List<List>finalDetails){
     
   boolean suc=false;int i=0;
   
 while(i<finalDetails.size()){
     
     List finalDe=finalDetails.get(i);

    
  try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
          
           PreparedStatement ps =  cq.prepareStatement("INSERT INTO loan_savings_shares VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
           
           ps.setObject(1, null);
            
            
            ps.setObject(2, finalDe.get(0));//trn_date
            
            ps.setObject(3,finalDe.get(1));//account_number
            
            ps.setObject(4, finalDe.get(2));//account_name
            
            ps.setObject(5,finalDe.get(3));//savings

            ps.setObject(6, finalDe.get(4));// Withdraws

            ps.setObject(7,finalDe.get(5));// shares
            
              ps.setObject(8, finalDe.get(6));// Decapitalisation

            ps.setObject(9,finalDe.get(7));// Disbursements
            
            ps.setObject(10, finalDe.get(8));// loans

            ps.setObject(11,finalDe.get(9));//interest

            ps.setObject(12, finalDe.get(10));//principal

            ps.setObject(13, finalDe.get(11));// othercharges

            ps.setObject(14,finalDe.get(12));// month
            
            ps.setObject(15, finalDe.get(13));//year
            
            ps.setObject(16, parseInt(finalDe.get(14).toString()));//Number equivalent
  
            ps.setObject(17,finalDe.get(15));//use_id
            
          ps.setObject(18, finalDe.get(16));//Date

            ps.setObject(19, finalDe.get(17));// time
      
          suc= ps.execute();
         cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
 
 i++;
 }
return suc;
 
 
 
 }
 private List<String>getPreviousRecords(String accountNumber){

        boolean in=true;
 List<String> previousRriecords=new ArrayList();


   try {
       Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "SELECT trn_id,savings,cashWithdraws,shares,reduceShares,loanDisbursements,loan_amount,interestPaid, principalPaid,otherCharges from loan_savings_shares WHERE account_number="+accountNumber;
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
             
            if(rst3.last()){
        
              previousRriecords.add(rst3.getString("trn_id"));//0 id
              
              previousRriecords.add(rst3.getString("savings"));// 1 savings
              
              previousRriecords.add(rst3.getString("cashWithdraws"));//2 savings withdraws
              
              previousRriecords.add(rst3.getString("shares"));//3 capitalisation
          
              previousRriecords.add(rst3.getString("reduceShares"));//4 decapitalisation
              
              previousRriecords.add(rst3.getString("loanDisbursements"));// 5 loan disbursement
              
              previousRriecords.add(rst3.getString("loan_amount"));// 6 loan payment
              
              previousRriecords.add(rst3.getString("interestPaid"));//7 interst payment
              
              previousRriecords.add(rst3.getString("principalPaid"));//8 princimpal
              
              previousRriecords.add(rst3.getString("otherCharges"));//9 other charges
            in=false;
             }
            
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
 if(previousRriecords.isEmpty()){
 
 previousRriecords.add("Empty");
 }
  return   previousRriecords;
 
 }
 
 public String memberSavings(String accountNumber){
     
//  List accoutnNumbers=this.customerAccounts();
String savings="";
       
      
//  for(Object account:accoutnNumbers){
 
      try {
           Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);

   String query = "SELECT ledger_balance FROM bsanca"+accountNumber;

          PreparedStatement psxmt = cq.prepareStatement(query);
          ResultSet rsxmt = psxmt.executeQuery();
     if(rsxmt.last()){

savings=rsxmt.getString("ledger_balance");
////   
//overAllRoi.put(k,  rioDetails);
//
////totalShars+=parseDouble(rioDetails.get(3).toString());
//totalRtun+=parseDouble(rioDetails.get(3).toString());
////totalRun+=parseDouble(rioDetails.get(5).toString());
//
//  k++;
          }
   
  
        rsxmt.close();
        psxmt.close();
        cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
      } catch (SQLException ex) {
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }
      
//
//              finale=new ArrayList();
//  finale.add("Total");
//   finale.add("-");
//    finale.add("-");
//    finale.add(totalRtun+"");
//
//overAllRoi.put(k,finale);  
//  }
return savings;

} 
 
 
 public boolean updateLaonSavingsSharesForLoanAmount(String accountNumber, String amountPaid){
     
 int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
     if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newInstalment=parseDouble(previousRecords.get(6).replace(",", ""))+parseDouble(amountPaid.replace(",", ""));


      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
//  this.accountBalance(accountNumber, amountPaid);
  String UpdateQuary = "UPDATE  loan_savings_shares SET loan_amount=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newInstalment);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
     }
return suc;
 }
 
 public boolean updateLaonSavingsSharesForSavings(String accountNumber, String amountSaved){
    
 int v=0;boolean suc=false;
 
     List<String> previousRecords=getPreviousRecords(accountNumber);
      if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newSavings=parseDouble(previousRecords.get(1))+parseDouble(amountSaved);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET savings=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newSavings);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
      }
return suc;
 
 
 
 
 
 
 }
 
 public boolean updateLaonSavingsSharesForShares(String accountNumber, String amountCapital){
 
 int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
       if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newCapital=parseDouble(previousRecords.get(3))+parseDouble(amountCapital);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET shares=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newCapital);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
       }
return suc;
 
 
 
 
 
 
 
 }
 
 public boolean updateLaonSavingsSharesForInterest(String accountNumber, String amountInterest){
 
  int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
       if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newInterest=parseDouble(previousRecords.get(7))+parseDouble(amountInterest);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET interestPaid=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newInterest);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
       }
return suc;
 
 
 
 
 
 
 }
  public boolean updateLaonSavingsSharesForPrincimpal(String accountNumber, String amountPrincimpal){
 
  int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
       if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newPrincipal=parseDouble(previousRecords.get(8))+parseDouble(amountPrincimpal);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET principalPaid=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newPrincipal);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
       }
return suc;

 }
 
  
  public boolean updateLaonSavingsSharesForCharges(String accountNumber, String amountCharges){
 
 int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
       if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newCharges=parseDouble(previousRecords.get(9))+parseDouble(amountCharges);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET otherCharges=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newCharges);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
       }
return suc;
 
 
 
 
 
 }
 
  public boolean updateLaonSavingsSharesForDisbursements(String accountNumber, String amountDisbursement){
 
 int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
       if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newDisbursements=parseDouble(previousRecords.get(5))+parseDouble(amountDisbursement);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET loanDisbursements=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newDisbursements);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }}
  
return suc;
 
 
 
 
 
 
 
 
 }
 
 
 
  public boolean updateLaonSavingsSharesForWithdraws(String accountNumber, String amountWithdraws){
 
 int v=0;boolean suc=false;
 
     List<String> previousRecords=getPreviousRecords(accountNumber);
  if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
     double newWithdraws=parseDouble(previousRecords.get(2))+parseDouble(amountWithdraws);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET cashWithdraws=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newWithdraws);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3,this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
  }
return suc;

 }
 
 
  public synchronized boolean updateLaonSavingsSharesForDecapitalisation(String accountNumber, String amountDecapitalised){
 
 int v=0;boolean suc=false;
     List<String> previousRecords=getPreviousRecords(accountNumber);
       if(previousRecords.get(0).equalsIgnoreCase("Empty")){
     
      suc=true;
     
     }else{
 double newDecapitalisations=parseDouble(previousRecords.get(4))+parseDouble(amountDecapitalised);
 

      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE  loan_savings_shares SET reduceShares=?,last_date=?,last_time=? WHERE trn_id=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,newDecapitalisations);

        pstool.setObject(2, this.getDBCurrentDate());
          pstool.setObject(3, this.getDBCurrentTime());
            pstool.setObject(4,previousRecords.get(0));
             
          v= pstool.executeUpdate();
          if(v==1){
            suc=false;  
              
          }else{
          
          suc=true;
          }
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
       }
return suc;

 }
 
  public synchronized int creatInsufficientFundsInternalSms(List messageDetails){
  
     int i=0;

  try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
          
           PreparedStatement ps =  cq.prepareStatement("INSERT INTO smsmanagement VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
           
           ps.setObject(1, null);
            
            
            ps.setObject(2, this.getDBCurrentDate());//trn_date
            
            ps.setObject(3,messageDetails.get(0));//account_number
            
            ps.setObject(4, messageDetails.get(1));//account_name
            
            ps.setObject(5,"Hello"+" "+messageDetails.get(0));//savings

            ps.setObject(6, "Not Yet Sent");// Withdraws

            ps.setObject(7,"Insufficient Funds");// shares
            
              ps.setObject(8, "Pending");// Decapitalisation
                
               ps.setObject(9,"Insufficient Funds");// shares
                 
                   ps.setObject(10, this.getDBCurrentTime());// Withdraws

            ps.setObject(11,"N/A");// shares
            
              ps.setObject(12, "N/A");// Decapitalisation
                
               ps.setObject(13,"N/A");// shares
                 ps.setObject(14,"N/A");// shares
        ps.execute();
         cq.setAutoCommit(true);
           cq.setAutoCommit(false);
           String query = "SELECT SmsId FROM smsmanagement WHERE SmsSenToName"+"="+"'"+messageDetails.get(0).toString()+"'";
              PreparedStatement psS = cq.prepareStatement(query);
             
              ResultSet rsa = psS.executeQuery();
              if (rsa.last()) {
              
             i= rsa.getInt("SmsId");
           
              }
           
           
           
            cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
 
return i;
  }
 
  
  
  public List getSMSDetails(String accountNumber,Component c){
 
 
 
// JOptionPane.showConfirmDialog(c, accountNumber);
 
   try {
             Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false); 
              String query = "SELECT sir_name,first_name,mobile1,mobile2 FROM master WHERE account_number"+"="+"'"+accountNumber+"'";
              PreparedStatement ps = cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              if (rs.next()) {
                  data4 = new ArrayList<>();
                  data4.add(0, rs.getString("sir_name"));
                  data4.add(1, rs.getString("mobile1"));
                  data4.add(2, rs.getString("mobile2"));
              }
             
              cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 return data4;
 
 
 
 
 
 }
 
 
public synchronized  int creatNewMessage(List messageDetails,String originator){

        
           int i=0;

  try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
          
           PreparedStatement ps =  cq.prepareStatement("INSERT INTO smsmanagement VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
           
           ps.setObject(1, null);
            
            
            ps.setObject(2, this.getDBCurrentDate());//trn_date
            
            ps.setObject(3,messageDetails.get(0));//account_number
            
            ps.setObject(4, messageDetails.get(1));//account_name
            
            ps.setObject(5,"Hello"+" "+messageDetails.get(0));//savings

            ps.setObject(6, "Not Yet Sent");// Withdraws

            ps.setObject(7,"Created");// shares
            
              ps.setObject(8, "Pending");// Decapitalisation
                
               ps.setObject(9,"Pending");// shares
                 
                   ps.setObject(10, this.getDBCurrentTime());// Withdraws

            ps.setObject(11,originator);// shares
            
              ps.setObject(12, "N/A");// Decapitalisation
                
               ps.setObject(13,"N/A");// shares
                 ps.setObject(14,"N/A");// shares
        ps.execute();
         cq.setAutoCommit(true);
           cq.setAutoCommit(false);
           String query = "SELECT SmsId FROM smsmanagement WHERE SmsSenToName"+"="+"'"+messageDetails.get(0).toString()+"'";
              PreparedStatement psS = cq.prepareStatement(query);
             
              ResultSet rsa = psS.executeQuery();
              if (rsa.last()) {
              
             i= rsa.getInt("SmsId");
           
              }
           
           
           
            cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
return i;
}
 
public synchronized List getAllPendingIds(){
//  fios.stringFileWriter(fios.createFileName("test", "testit", "trdyr.txt"),"in");  
List PendinIds=new ArrayList();

 try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
          
           
           cq.setAutoCommit(false);
           String query = "SELECT SmsId FROM smsmanagement WHERE SmsDate="+"'"+this.getDBCurrentDate()+"'"+" AND NOT (SmsSentStatus="+"'"+"Sent"+"'"+"AND SmsDeliveryStatus="+"'"+"Delivered"+"'"+")";
              PreparedStatement psS = cq.prepareStatement(query);
             
              ResultSet rsa = psS.executeQuery();
            while(rsa.next()) {
              
          PendinIds.add(rsa.getInt("SmsId"));
           
              }
    
            cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
return PendinIds;

}

public boolean smsForInsufficientFunds(int id){
boolean insuTrue=false;int numberIds=0;
try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
          
           
           cq.setAutoCommit(false);
           String query = "SELECT COUNT(SmsId) AS ids FROM smsmanagement WHERE (SmsId="+id+" AND SmsDeliveryReason="+"'"+"Insufficient Funds"+"'"+")";
              PreparedStatement psS = cq.prepareStatement(query);
             
              ResultSet rsa = psS.executeQuery();
            while(rsa.next()) {
              
          numberIds=(rsa.getInt("ids"));
           
              }
    
            cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
if(numberIds==1){
insuTrue=true;
}
return insuTrue;

}
public boolean smsForWrongNumber(int id){
boolean insuTrue=false;int numberIds=0;
try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
          
           
           cq.setAutoCommit(false);
           String query = "SELECT COUNT(SmsId) AS ids FROM smsmanagement WHERE (SmsId="+id+"AND SmsDeliveryReason="+"'"+"Invalid Number"+"'"+")";
              PreparedStatement psS = cq.prepareStatement(query);
             
              ResultSet rsa = psS.executeQuery();
            while(rsa.next()) {
              
          numberIds=(rsa.getInt("ids"));
           
              }
    
            cq.setAutoCommit(true);
     quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
if(numberIds==1){
insuTrue=true;
}
return insuTrue;

}



 public void feelMonthYearComberBudget(JComboBox userBox){
     
 String individualEntry="";ArrayList <String> allEntries=new ArrayList();
 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
             String query = "select distinct BYear,BMonthWord from budgetstore";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           individualEntry=rst3.getString("BMonthWord")+" "+rst3.getString("BYear");
       allEntries.add(individualEntry);
            
             }
          
             modelcombo = new MyComboBoxModel(allEntries);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);


}
 
 public void feelMonthYearComberBudgetNew(JComboBox userBox){
     
 String individualEntry="";ArrayList <String> allEntries=new ArrayList();
 try {
         Connection cq=quaryObj.createConnection(); 
         
          cq.setAutoCommit(false);
             
             String query = "select distinct BYear,BMonthWord from budgetstore";
             
             PreparedStatement ps = cq.prepareStatement(query);
             
             ResultSet rst3 = ps.executeQuery();
              if(isBudgetNotEmpty()){
             allEntries.add("Select Period");
             allEntries.add("Entire Period");
              }else{
              
               allEntries.add("Select Period");
             allEntries.add("No Budget");
              
              }
            while(rst3.next()){
               
           individualEntry=rst3.getString("BMonthWord")+" "+rst3.getString("BYear");
           
       allEntries.add(individualEntry);
            
             }
          
             modelcombo = new MyComboBoxModel(allEntries);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);


}
 
 
 public boolean isBudgetNotEmpty(){
 
 
int items=0; boolean there=false;
try {
            
        Connection cq=quaryObj.createConnection(); 
        
        cq.setAutoCommit(false);
        
        String query = "SELECT COUNT(TrnId) AS them FROM budgetstore";
        
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


      while(rs.next()) {

        items=rs.getInt("them");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
 
if(items>0){
there=true;

}

return there;
 
 
 
 
 }
 
  public synchronized void updateMessageSent(String smsId, String smsDeliverySatus,String smsDeliveryMessage){
      
       try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE smsmanagement SET SmsDeliveryStatus=?,SmsDeliveryReason=? WHERE  SmsId=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,smsDeliverySatus);

        pstool.setObject(2, smsDeliveryMessage);
        
            pstool.setObject(3,smsId);
       pstool.executeUpdate();
         
    }
 cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }
      

 }
 
 
 public void updateCreatedMessage(List messageDetails,int smsId,Component c){
     
//     JOptionPane.showMessageDialog(c, "messageDetails.get(0)"+messageDetails.get(0));
//      JOptionPane.showMessageDialog(c, "messageDetails.get(1)"+messageDetails.get(1));
//       JOptionPane.showMessageDialog(c, "smsId.get(0)"+smsId);

 
     
 try {
          
  Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
  
  String UpdateQuary = "UPDATE smsmanagement SET SmsSenToNumber=?,SmsMessage=?, SmsSentStatus=?,SmsSentReason=?  WHERE  SmsId=?";
  
       try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
           
           pstool.setObject(1,messageDetails.get(0));

        pstool.setObject(2, messageDetails.get(1));
        
            pstool.setObject(3,"Sent");
        pstool.setObject(4,"Sent Successfully");
        pstool.setObject(5,smsId);
        pstool.executeUpdate();

        }
        cq.setAutoCommit(true);     
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }

        }


        public void updateCreatedMessageInsufficient(List messageDetails,int smsId){
        try {

        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);

        String UpdateQuary = "UPDATE smsmanagement SET SmsSenToNumber=?,SmsMessage=?, SmsSentStatus=?,SmsSentReason=?  WHERE  SmsId=?";

        try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {

        pstool.setObject(1,messageDetails.get(0));

        pstool.setObject(2, messageDetails.get(1));

        pstool.setObject(3,"Failed");
        pstool.setObject(4,"Insufficient Funds");
        pstool.setObject(5,smsId);
        pstool.executeUpdate();

        }
        cq.setAutoCommit(true);     
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }

        }




        // public  List getAccountNumbersForBDs(){
        //
        //     String dayToday=
        //             String monthToday=
        //     
        //     
        //     
        //     
        //List PendinIds=new ArrayList();
        //
        // try {
        //         Connection cq=quaryObj.createConnection(); 
        //         
        //          cq.setAutoCommit(false);
        //          
        //           
        //           cq.setAutoCommit(false);
        //           String query = "SELECT SmsId FROM smsmanagement WHERE SmsDate="+"'"+this.getDBCurrentDate()+"'"+" AND NOT (SmsSentStatus="+"'"+"Sent"+"'"+"AND SmsDeliveryStatus="+"'"+"Delivered"+"'"+")";
        //              PreparedStatement psS = cq.prepareStatement(query);
        //             
        //              ResultSet rsa = psS.executeQuery();
        //            while(rsa.next()) {
        //              
        //          PendinIds.add(rsa.getInt("SmsId"));
        //           
        //              }
        //    
        //            cq.setAutoCommit(true);
        //     quaryObj.closeConnection(cq);
        //       } catch (SQLException ex) {
        //           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        //       }
        //return PendinIds;
        //
        //}


        public void fillMeWithAllSmsDetails(JTable table){

        int l=0;
        List data4x=null;
        List<List>  data5x= new ArrayList<>();
        column1= new ArrayList<>();
        column1.add("SmsId");
        column1.add("Date");
        column1.add("To");
        column1.add("Number");
        column1.add("Message");
        column1.add("Sent Status");
        column1.add("Delivery Status");
        column1.add("For");
        column1.add("Select");
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT SmsId, SmsDate,SmsSenToName,SmsSenToNumber,SmsMessage,SmsSentStatus,SmsDeliveryStatus,SmsOriginator FROM smsmanagement";
        PreparedStatement ps = cq.prepareStatement(query);
        ResultSet rst3 = ps.executeQuery();
        while(rst3.next()){
        data4x=new ArrayList();
        data4x.add(rst3.getInt("SmsId"));
        data4x.add(rst3.getString("SmsDate"));
        data4x.add(rst3.getString("SmsSenToName"));  
        data4x.add(rst3.getString("SmsSenToNumber"));  
        data4x.add(rst3.getString("SmsMessage")); 
        data4x.add(rst3.getString("SmsSentStatus"));
        data4x.add(rst3.getString("SmsDeliveryStatus"));  
        data4x.add(rst3.getString("SmsOriginator"));  
        data4x.add(false);
        data5x.add(data4x);
        l++;
        }
        PureListModel list =  new PureListModel( data5x, column1);
        table.setModel(list);

        TableRowSorter<PureListModel> sorter = new TableRowSorter<>(list);
        table.setRowSorter(sorter);

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }



        }       
        public String getAccountMaster(String accountName){
        String accountMaster="";

        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT account_master FROM account_created_store WHERE account_name="+"'"+accountName+"'";
        PreparedStatement ps = cq.prepareStatement(query);
        ResultSet rst3 = ps.executeQuery();
        while(rst3.next()){
        accountMaster=rst3.getString("account_master");

        }


        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }



        return accountMaster;
        }

        public int getProductCode(String productName){

        int productCode=0;
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT ProductCode FROM ledgerproduct WHERE ProductName="+"'"+productName+"'";
        PreparedStatement ps = cq.prepareStatement(query);
        ResultSet rst3 = ps.executeQuery();
        while(rst3.next()){
        productCode=rst3.getInt("ProductCode");

        }


        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }



        return productCode;

        }

        public void feelWithAccountNumbers(JComboBox ComboBox,String accountName){



        data8 = new ArrayList<>();
        try {
        Connection cq=quaryObj.createConnection();
        cq.setAutoCommit(false);
        String query = "SELECT account_number FROM account_created_store WHERE account_name="+"'"+accountName+"'";
        PreparedStatement ps = cq.prepareStatement(query);

        ResultSet rs = ps.executeQuery();
        int k=0;

        while (rs.next()) {

        data8.add(k, rs.getString("account_number"));
        k++;  

        }
        if(k==0){data8.add(k, "Empty Record");} 
        modelcombo = new MyComboBoxModel(data8);
        ComboBox.setModel(modelcombo);
        cq.setAutoCommit(true);
        quaryObj.closeConnection( cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }


        }

        public synchronized void updateBorrowingStatus(String accountNumber,String borrowingStatus){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE account_created_store SET creation_time=? WHERE account_number=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, borrowingStatus);
        pstool.setObject(2, accountNumber);

        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

        }

        public List accountNumbersCustomers(){

        List account=new ArrayList();
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT account_number FROM account_created_store WHERE account_l5="+"'"+"Customer Deposits"+"'";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        while (rs.next()) {

        account.add(rs.getString("account_number"));


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        return account;

        }



        public String getTheThresholdDate(){

        String theDate="2017-01-01";
        
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT  trn_date FROM shares_run_bal";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theDate=rs.getString("trn_date");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        return theDate;

        }
  
        public String getTheStartThresholdDate(){

        String theDate="2017-01-01";
        
               if(theOperingPeriodIsNotEmpty()){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT  StartDate FROM OperatingPeriod";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theDate=rs.getString("StartDate");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }}
        return theDate;

        }

public void updateStartEndPeriods(List thePs){
try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod SET StartDate=?, EndDate=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, thePs.get(0));
        pstool.setObject(2, thePs.get(1));

        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}


public void updateThePercentFees(String theFees){

    try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod SET  TheCharge=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, theFees);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}

public void updateThePercentRateUsedFees(String theFees){

    try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod SET  Others4=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, theFees);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}

public void updateThePercentRateUsedInsurance(String theFees){

    try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod1 SET  Others4=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, theFees);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}

public void updateThePercentInsurance(String theFees){

    try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod1 SET  TheCharge=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, theFees);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}

public void updateTheAmountForProcessing(String theFees){

    try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod1 SET  Others3=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, theFees);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}



public void changeFeesStatusProcessing(boolean status){
try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod SET StatusCharge=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, status);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}

//public void changeInsuranceStatus(boolean status){
//try {
//        Connection cq=quaryObj.createConnection(); 
//        cq.setAutoCommit(false);
//        String UpdateQuary = "UPDATE OperatingPeriod1 SET StatusCharge=?";
//        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
//        pstool.setObject(1, status);
//        pstool.executeUpdate();
//        pstool.close();
//        } 
//        cq.setAutoCommit(true);
//        quaryObj.closeConnection(cq);
//        } catch (SQLException ex) {
//        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//}
public void changeInsuranceStatus(boolean status){
try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String UpdateQuary = "UPDATE OperatingPeriod1 SET StatusCharge=?";
        try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
        pstool.setObject(1, status);
        pstool.executeUpdate();
        pstool.close();
        } 
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

}
         

     public boolean getFeesStatusProcessing(){

         boolean theStatus=false;
         
            if(theOperingPeriodIsNotEmpty()){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT   StatusCharge FROM OperatingPeriod";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theStatus=rs.getBoolean("StatusCharge");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
            }



  return theStatus;

}
     
  public boolean getFeesStatusInsurance(){

         boolean theStatus=false;
         
            if(theOperingPeriodIsNotEmpty()){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT   StatusCharge FROM OperatingPeriod1";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theStatus=rs.getBoolean("StatusCharge");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
            }



  return theStatus;

}   
     
   public String getTheStatusRateAmountUsedProcessing(){

         String theStringUsed="";
         
            if(theOperingPeriodIsNotEmpty()){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT   Others4 FROM OperatingPeriod";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theStringUsed=rs.getString("Others4");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
            }



  return theStringUsed;

}  
  public String getTheStatusRateAmountUsedInsurance(){

         String theStringUsed="";
         
            if(theOperingPeriodIsNotEmpty()){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT   Others4 FROM OperatingPeriod1";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theStringUsed=rs.getString("Others4");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
            }



  return theStringUsed;

}    
     
    
  
  public String getTheLoanPercentProcessing(){

         String theStatus="";
         if(theOperingPeriodIsNotEmpty()){
        try {
            
        Connection cq=quaryObj.createConnection(); 
        
        cq.setAutoCommit(false);
        
        String query = "SELECT TheCharge FROM OperatingPeriod";
        
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theStatus=rs.getString("TheCharge");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
  return theStatus;

}

  public String getTheLoanPercentInsurance(){

         String theStatus="";
         if(theOperingPeriodIsNotEmpty()){
        try {
            
        Connection cq=quaryObj.createConnection(); 
        
        cq.setAutoCommit(false);
        
        String query = "SELECT TheCharge FROM OperatingPeriod1";
        
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theStatus=rs.getString("TheCharge");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
  return theStatus;

}
  
public boolean theOperingPeriodIsNotEmpty(){

int theCharges=0; boolean there=false;
try {
            
        Connection cq=quaryObj.createConnection(); 
        
        cq.setAutoCommit(false);
        
        String query = "SELECT COUNT(TheCharge) AS them FROM OperatingPeriod";
        
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


      while(rs.next()) {

        theCharges=rs.getInt("them");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
 
if(theCharges>0){
there=true;

}

return there;
}




public String getTheEndThresholdDate(){

        String theDate="2017-01-01";
          if(theOperingPeriodIsNotEmpty()){
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT  EndDate FROM OperatingPeriod";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.first()) {

        theDate=rs.getString("EndDate");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);     
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
          }
        return theDate;

        }
        
        
 public List getTheDetailsOfAccount(String theThreshDate,String theAccountNumber,Component c){
// JOptionPane.showMessageDialog(c, theThreshDate+";"+theAccountNumber);
      List account=new ArrayList();
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        
        String query = "SELECT running_balance_v_shares FROM shares_run_bal WHERE account_number="+"'"+theAccountNumber+"'"+"  AND "+"trn_date<="+"'"+theThreshDate+"'";
       
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.last()) {

        account.add(rs.getString("running_balance_v_shares"));


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       if(account.isEmpty()){
       account.add("0.0");
       
       } 
//       JOptionPane.showMessageDialog(c, theThreshDate+";"+theAccountNumber+";"+account.get(0));  
        return account;
 
 
 
 }
 
 
 
 
         public List getTheOtherDetailsOfAccount(String theThreshDate,String theAccountNumber){
    
             int n=fios.intFileReader(fios.createFileName("persistence", "loanArrears", "trdyrii.txt"));
             
             
             
             
      List account=new ArrayList();
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT Balance_Shares FROM sharesreturnoninvestment WHERE account_number="+"'"+theAccountNumber+"'"+"  AND "+"value_date="+"'"+theThreshDate+"'";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        while (rs.next()) {

        account.add(rs.getString("Balance_Shares"));


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       if(account.isEmpty()){
       account.add("0.0");
       
       } 
        
         
 if(theAccountNumber.equalsIgnoreCase("05502000110")){
//     fios.stringFileWriter(fios.createFileName("test", "testit", n+"trdyr.txt"),theThreshDate+";"+account.get(0).toString());
 n++;
 fios.intFileWriterReplace(fios.createFileName("persistence", "loanArrears", "trdyrii.txt"), n+"");
 }     
       
       
        return account;
 
 
 
 }
 
 public synchronized void updateOriginalSharesDetails(List theFinalDetails){
      
// theFinalDetails.add(theFirstThresholdDate);//Date of starting accrual:0
//        theFinalDetails.add(Month);//Month before starting RIO:1
//        theFinalDetails.add(Year);//Year before starting ROI:2
//          theFinalDetails.add(dbq.AccountName(account.toString()));//Account Name of Investor:3
//        theFinalDetails.add(account.toString());//Account Number of Investor:4
//        theFinalDetails.add(theIndividualDetails.get(0).toString());//The original shares before ROI:5
//        theFinalDetails.add("0.0"); //Daily Return:6
//        theFinalDetails.add("0.0"); //Monthly Return:7
//        theFinalDetails.add("0.0"); //Return run balance:8

     try {
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO sharesreturnoninvestment VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null); //trn_id:1
    
    ps.setObject(2, getDBCurrentDate());//trn_date:2 theFinalDetails:0
    
    ps.setObject(3, theFinalDetails.get(0));//value_date:3 theFinalDetails:1
    
    ps.setObject(4, theFinalDetails.get(1));//value_month:4 theFinalDetails:2
    
    ps.setObject(5,theFinalDetails.get(2));//value_year:5 theFinalDetails:3
  
    ps.setObject(6, theFinalDetails.get(3));// account_name:4 theFinalDetails:3
    
    ps.setObject(7,theFinalDetails.get(4));//account_number:5 theFinalDetails:4
    
    ps.setObject(8, theFinalDetails.get(5));//Balance_Shares:6 theFinalDetails:5
    
    ps.setObject(9,theFinalDetails.get(6));//Daily_Return:7theFinalDetails:6
    
    ps.setObject(10, theFinalDetails.get(7)); //Monthly_return theFinalDetails:7
    
    ps.setObject(11, theFinalDetails.get(8));//Return_Run_Bal theFinalDetails:8
    
    ps.setObject(12,"NA");//Other_One
    
    
    ps.setObject(13, "NA"); //Other_Two
    
    ps.setObject(14,"NA");  //Other_Three
    
    
    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
  
       }
 
 public double getMontlyReturnBalance(String theMonth,String theAccountNumber){
 
     double montlyReturn=0.0;
     
 try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT Monthly_return FROM sharesreturnoninvestment WHERE account_number="+"'"+theAccountNumber+"'"+"  AND "+" value_month="+"'"+theMonth+"'";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.last()) {

       montlyReturn=rs.getDouble("Monthly_return");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    
        
        return montlyReturn;
 
 
 }
 
 
 
 public double getAnnualReturnBalance(String theAccountNumber){
 
     double BalanceReturn=0.0;
     
 try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT Return_Run_Bal FROM sharesreturnoninvestment WHERE account_number="+"'"+theAccountNumber+"'";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.last()) {

       BalanceReturn=rs.getDouble("Return_Run_Bal");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    
        
        return BalanceReturn;
 
 
 }
 
   public synchronized void captureSavingsIndividual(List theSavings,Component c){
    
//       JOptionPane.showConfirmDialog(c, theSavings.get(2).toString());
   YearMonth theStartDateObject=YearMonth.parse(getDBCurrentDate().substring(0, 7));  
   
String accountNumberSave=fmt.formatAccountWithSeperators(theSavings.get(0).toString());

         double newSavings=getThePreviousNewSavings(accountNumberSave);
        
        newSavings+=parseDouble(theSavings.get(5).toString());
        
//        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", accountNumberSave+"SavingsBalance.txt"), newSavings+"");
      
      

         

            
        try {
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO newsavingsmembers VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null); //   TrnId:1
    
    ps.setObject(2, getDBCurrentDate());//TrnDate:2
    
    ps.setObject(3, accountNumberSave);// AccountNumber:3 theSavings:0
    
    ps.setObject(4, this.AccountName(accountNumberSave));//AccountName:4 theSavings:2
    
    ps.setObject(5,theStartDateObject.getMonth().toString());//SavingsMonth:5 
  
    ps.setObject(6, theStartDateObject.getYear());//  SavingsYear:6 
    
    ps.setObject(7,theSavings.get(5));//SavingsAdded:5 theFinalDetails:4
    
    ps.setObject(8, "-");//SavingsRemoved:6 theFinalDetails:5
    
    ps.setObject(9,newSavings);//SavingsRunningBalance:7theFinalDetails:6
    
    ps.setObject(10, theSavings.get(2).toString()); //OtherOne 
    
    ps.setObject(11, "NA");//OtherTwo
    
    ps.setObject(12,"NA");//OTherThree
    
    
    ps.setObject(13, "NA"); // OtherFour
    
    ps.setObject(14,"NA");  // OtherFive
    
    
    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
    
//        updateSavingsNumberValueStats("increase",theSavings.get(5).toString()); 
        }
   
   
   
   
   
   
  public boolean savingsExist(String accountNumberSave){
    boolean savingsExist=false;int theSaving=0;
     

     
     
 try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT COUNT(SavingsRunningBalance) As saveNumber FROM newsavingsmembers WHERE  AccountNumber="+"'"+accountNumberSave+"'";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        while (rs.next()) {

       theSaving=rs.getInt("saveNumber");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
 if(theSaving>0){
 savingsExist=true;
 }
    
        
        return savingsExist;
  
  
  } 
   
   
 public double getThePreviousNewSavings( String accountNumberSave){
 
 
     double BalanceReturn=0.0;
     
     if(savingsExist(accountNumberSave)){
     
     
 try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT SavingsRunningBalance FROM newsavingsmembers WHERE  AccountNumber="+"'"+accountNumberSave+"'";
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.last()) {

       BalanceReturn=rs.getDouble("SavingsRunningBalance");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     } 
        
        return BalanceReturn;
 
 
 }
 
  public synchronized void reduceSavings(List theSavings){
    
      
       
   YearMonth theStartDateObject=YearMonth.parse(getDBCurrentDate().substring(0, 7));   
   
String accountNumberSave=fmt.formatAccountWithSeperators(theSavings.get(0).toString());

         double newSavings=getThePreviousNewSavings(accountNumberSave);

//
//        fios.forceFileExistanceZero(fios.createFileName("postingEntry", "generalTrn", accountNumberSave+"SavingsBalance.txt"));   
//
//        String Thebatch= fios.stringFileReader(fios.createFileName("postingEntry", "generalTrn", accountNumberSave+"SavingsBalance.txt"));
        
        newSavings=newSavings-parseDouble(theSavings.get(5).toString());
        
//        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", accountNumberSave+"SavingsBalance.txt"), newSavings+"");
      
      

         

            
        try {
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO newsavingsmembers VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null); //   TrnId:1
    
    ps.setObject(2, getDBCurrentDate());//TrnDate:2
    
    ps.setObject(3, accountNumberSave);// AccountNumber:3 theSavings:0
    
    ps.setObject(4, this.AccountName(accountNumberSave));//AccountName:4 theSavings:2
    
    ps.setObject(5,theStartDateObject.getMonth().toString());//SavingsMonth:5 
  
    ps.setObject(6, theStartDateObject.getYear());//  SavingsYear:6 
    
    ps.setObject(7,"-");//SavingsAdded:5 theFinalDetails:4
    
    ps.setObject(8, theSavings.get(5));//SavingsRemoved:6 theFinalDetails:5
    
    ps.setObject(9,newSavings);//SavingsRunningBalance:7theFinalDetails:6
    
    ps.setObject(10, theSavings.get(2).toString()); //OtherOne 
    
    ps.setObject(11, "NA");//OtherTwo
    
    ps.setObject(12,"NA");//OTherThree
    
    
    ps.setObject(13, "NA"); // OtherFour
    
    ps.setObject(14,"NA");  // OtherFive
    
    
    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
    
//       updateSavingsNumberValueStats("Reduce",theSavings.get(5).toString());
       
        }
 
 
//  public void updateSavingsNumberValueStats(String type,String amount){
//  
//  switch(type){
//  
//      case "Reduce":
//          
//          
//          
//          
//          
//          
//          break;
//  
//      
//      case "increase":
//          
//          
//          
//          break;
//  
//  }
//  
//  
//  
//  
//  }
  
//  public int theExistingNumberOfWithdraws(){}
//  
//   public int theExistingValueOfWithdraws(){}
//  
//    public int theExistingNumberOfSavings(){}
//  
//   public int theExistingValueOfSavings(){}
   
   
   
   
 public synchronized String pickTheLastDate(String accountNumber){
 
  String theLastDate="1970-01-01";
  
     if(lastDateExists(accountNumber)){
         
 try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
        String query = "SELECT value_date FROM sharesreturnoninvestment where account_number="+accountNumber;
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.last()) {

       theLastDate=rs.getString("value_date");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
     }else{
         
         
     } 
    
        
        return theLastDate;
 
 
 
 
 
 }
 private boolean lastDateExists(String accountNumber){
 
     
     boolean exists=false; int dates=0;
     
      try {
          
        Connection cq=quaryObj.createConnection(); 
        
        cq.setAutoCommit(false);
        
        String query = "SELECT COUNT(value_date) AS dates FROM sharesreturnoninvestment where account_number="+accountNumber;
        
        PreparedStatement ps =  quaryObj.createConnection().prepareStatement(query);

        ResultSet rs = ps.executeQuery();


        if (rs.last()) {

       dates=rs.getInt("dates");


        }

        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);       
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
      
      if(dates>0){
      
      exists=true;
      }
      
      return exists;
 
 
 
 }
 
 public synchronized void createFinalBatchPostingDetails(List theDetails){

        
    //Batch id:0
    //account Name:1
    //Account number:2
    //Savings :3
    //Shares :4
    //Interest :5
    //Accumulated Interest :6
    //loan penalty 7
    //princimpal amount:8
   // Total Amount :9
    //Other batch1:10
    //Other batch2:11
    //Other batch3:12
    //Other batch4:13

 
    try {
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO batchpostingdetails VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null);  //  ItemId 1 
    
    ps.setObject(2, getDBCurrentDate());// ItemDate 2
    
    ps.setObject(3, theDetails.get(0));// BatchId 3 //Batch id:0
    
    ps.setObject(4, theDetails.get(1));// AccountName 4//account Name:1
   
    ps.setObject(5,theDetails.get(2));// AccountNumber 5//Account number:2
    
    ps.setObject(6, theDetails.get(3));// Savings 6 //Savings :3
    
    ps.setObject(7, theDetails.get(4));// Shares 7 //Shares :4
    
    
    ps.setObject(8, theDetails.get(5)); // Interest 8//Interest :5
    
    
    ps.setObject(9, theDetails.get(6));//// AccumulatedInterest 9//Accumulated Interest :6
    
    
    ps.setObject(10,theDetails.get(7));// PenaltyLoan 10//loan penalty 7
    
    
    ps.setObject(11,theDetails.get(8)); // Principal  //princimpal amount:8
     
    ps.setObject(12,theDetails.get(9));  //// TotalAmount //Total Amount :9
 
    ps.setObject(13, theDetails.get(10));// BatchOther1 //Other batch1:10
    
    ps.setObject(14,theDetails.get(11));// BatchOther2//Other batch1:11
    
    ps.setObject(15, theDetails.get(12)); // BatchOther3//Other batch1:12
    
    ps.setObject(16, theDetails.get(13));// BatchOther4//Other batch1:13

    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 
 }
 
 
 public synchronized void createFinalBatchPostingSummury(List theDetails){


 
    try {
        
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO  batchpostingsummury VALUES(?,?,?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null); // TrnId
    
    ps.setObject(2, getDBCurrentDate());// TrnDate
    
    ps.setObject(3, theDetails.get(0));// BatchId //Batch id:0
    
     ps.setObject(4, theDetails.get(1));// BatchType 4//Batch Type:1
  
    ps.setObject(5,theDetails.get(2));// NumberEntries//Number of Entries:2
    
 
    ps.setObject(6, theDetails.get(3));// TotalAmount//Total Amount :3
  
    ps.setObject(7, theDetails.get(4));//  BatchStatus //Other batch1:4
    
       
    ps.setObject(8,theDetails.get(5));// BatchOther2//Other batch1:5
    
    
 
    ps.setObject(9, theDetails.get(6)); // BatchOther3//Other batch1:6
    
  
    ps.setObject(10, theDetails.get(7));// BatchOther4//Other batch1:7
    
     ps.setObject(11, theDetails.get(8));// BatchOther4//Other batch1:7

    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 
 }
 
 
 
 public synchronized void batchChangeStatus(String action,String batchNumber){
 
  try {

        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);

        String UpdateQuary = "UPDATE batchpostingsummury SET  BatchStatus=?  WHERE  BatchId=?";

        try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {

        pstool.setObject(1,action);
        pstool.setObject(2,parseInt(batchNumber));
        pstool.executeUpdate();

        }
        cq.setAutoCommit(true);     
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

        }

 
 
 }
 
 public synchronized void deleteBatchTxn1(Object thisOne,String BatchNumber){

     
     boolean deleted=false;
     
          try {
           Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
              
              PreparedStatement psxmts =  cq.prepareStatement("DELETE FROM batchpostingsummury WHERE BatchId="+BatchNumber);
            psxmts.execute();
               cq.setAutoCommit(true);
              
//               }
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

 }
 
 
  public synchronized void deleteBatchTxn2(Object thisOne,String BatchNumber){

  
          try {
           Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
      
              
              PreparedStatement psxmts1 =  cq.prepareStatement("DELETE FROM batchpostingdetails WHERE BatchId="+BatchNumber);
             psxmts1.execute();
               cq.setAutoCommit(true);
//               }
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
           JOptionPane.showMessageDialog((JFrame)thisOne, "The transaction record was successfully deleted!");

 
 
 }
 
 
 
 
 
  public synchronized void deleteBatchTxn1tem(Object thisOne,String BatchNumber){

  
          try {
           Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
      
              
              PreparedStatement psxmts1 =  cq.prepareStatement("DELETE FROM batchpostingdetails WHERE ItemId="+BatchNumber);
             psxmts1.execute();
               cq.setAutoCommit(true);
//               }
              quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
           JOptionPane.showMessageDialog((JFrame)thisOne, "The Item record was successfully deleted!");

 
 
 }
 
 public synchronized void updateTheBatchStatus(String BatchNumber){
 
  try {
          Connection cq=quaryObj.createConnection();
          cq.setAutoCommit(false);
            String UpdateQuary = "UPDATE batchpostingsummury SET BatchStatus=? WHERE BatchId=?";
            try (PreparedStatement pstool = quaryObj.createConnection().prepareStatement(UpdateQuary)) {
                pstool.setObject(1, "Submitted");
                
                pstool.setObject(2, BatchNumber);
             pstool.executeUpdate();
           pstool.close();
            }
           cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
 }
  
 
 
 
 public synchronized void createBatchTxnPostingType(List theDetails){

        
    //Batch id:0
    //account Name:1
    //Account number:2
    //Savings :3
    //Shares :4
    //Interest :5
    //Accumulated Interest :6
    //loan penalty 7
    //princimpal amount:8
   // Total Amount :9
    //Other batch1:10
    //Other batch2:11
    //Other batch3:12
    //Other batch4:13

 
    try {
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    
    PreparedStatement ps =  cq.prepareStatement("INSERT INTO txnpostingtype VALUES(?,?,?,?,?,?,?,?,?)");
    
    ps.setObject(1, null);  //  ItemId 1 
    
    ps.setObject(2, theDetails.get(0));// ItemDate 2
    
    ps.setObject(3, theDetails.get(2));// BatchId 3 //Batch id:0
    
    ps.setObject(4, theDetails.get(1));// AccountName 4//account Name:1
    
    ps.setObject(5, theDetails.get(3));// AccountName 4//account Name:1
 
    ps.setObject(6, "NA");// BatchOther1 //Other batch1:10
    
    ps.setObject(7,"NA");// BatchOther2//Other batch1:11
    
    ps.setObject(8, "NA"); // BatchOther3//Other batch1:12
    
    ps.setObject(9, "NA");// BatchOther4//Other batch1:13
    


    ps.execute();
    cq.setAutoCommit(true); 
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 
 }
 
 
  public void loadAllTxnTypes(JTable table){
       
       int l=0;boolean inout=false;
    
    
  List  data5= new ArrayList<>();
    column1= new ArrayList<>();
     column1.add("TxnId");
    column1.add("TxnType");
    column1.add("TxnDiscription");
//    column1.add("TxnCode");
     

 

 

 
//    column1.add("Trigger");
     try {
 Connection cq=quaryObj.createConnection(); 
  cq.setAutoCommit(false);
            String query = "SELECT  TrnId,TxnType, TxnDescription,TxnTypeOut FROM txnpostingtype WHERE TxnTypeStatus='In'";
            PreparedStatement ps = cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
          data4.add(0,  rst3.getInt("TrnId"));
         data4.add(1, rst3.getString("TxnType"));
         data4.add(2, rst3.getString("TxnDescription"));
//         data4.add(3, rst3.getString("TxnTypeOut"));  
         data5.add(l, data4);
         l++;
            }
       
           
       
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

 if(0==data5.size()){
     
        data4=new ArrayList();
        data4.add(0, "0");
        data4.add(1, "0");
        data4.add(2, "0");  
//        data4.add(3, "0");   
         
         data5.add(l, data4);
     
     }   
           
            listData= new ListDataModel( data5, column1);
           table.setModel(listData);
           
       TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(listData);
      table.setRowSorter(sorter);
       
       
       
       
       
       
       
       }      
 
 public void feelActiveTxnTypes(JComboBox userBox){
     
 String individualEntry="";ArrayList <String> allEntries=new ArrayList();
 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
        String query = "SELECT  TrnId,TxnType, TxnDescription,TxnTypeOut FROM txnpostingtype WHERE TxnTypeStatus='In'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           individualEntry=rst3.getString("TxnTypeOut");
       allEntries.add(individualEntry);
            
             }
          
            if(allEntries.isEmpty()){
             allEntries.add("Empty");
            }
            
            
             modelcombo = new MyComboBoxModel(allEntries);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);


}
 
 public void feelInAllTxnTypes(JComboBox userBox){
     
 String individualEntry="";ArrayList <String> allEntries=new ArrayList();
 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
        String query = "SELECT  TrnId,TxnType, TxnDescription,TxnTypeOut FROM txnpostingtype";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
            while(rst3.next()){
               
           individualEntry=rst3.getString("TxnTypeOut");
       allEntries.add(individualEntry);
            
             }
          
            if(allEntries.isEmpty()){
             allEntries.add("Empty");
            }
            
            
             modelcombo = new MyComboBoxModel(allEntries);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);


}
 
 
 public void feelInActiveTxnTypes(JComboBox userBox){
     
 String individualEntry="";ArrayList <String> allEntries=new ArrayList();
 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
                 String query = "SELECT  TrnId,TxnType, TxnDescription,TxnTypeOut FROM txnpostingtype WHERE TxnTypeStatus='Out'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
          while(rst3.next()){
               
           individualEntry=rst3.getString("TxnTypeOut");
       allEntries.add(individualEntry);
            
             }
          
            if(allEntries.isEmpty()){
             allEntries.add("Empty");
            }
            
          
             modelcombo = new MyComboBoxModel(allEntries);
                    userBox.setModel(modelcombo);  
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
  userBox.setSelectedIndex(0);


}
 
 public void  activateTxnType(String trnType){

      
   Connection cq=quaryObj.createConnection(); 
        try {
           cq.setAutoCommit(false);
           String UpdateQuary = "UPDATE txnpostingtype SET TxnTypeStatus=?  WHERE TxnTypeOut=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
        ps.setObject(1, "In");
        ps.setObject(2, trnType);
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
   
  
      
  }
   
 
 public void  deactivateTxnType(String trnType){

      
   Connection cq=quaryObj.createConnection(); 
        try {
           cq.setAutoCommit(false);
           String UpdateQuary = "UPDATE txnpostingtype SET TxnTypeStatus=?  WHERE TxnTypeOut=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
        ps.setObject(1, "Out");
        ps.setObject(2, trnType);
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
   
  
      
  }
 
 
 public String gettxnCodeBatch(String trnId){
 String txnCode="";

 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
                 String query = "SELECT TxnTypeOut FROM txnpostingtype WHERE  TrnId="+trnId;
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
          while(rst3.next()){
               
           txnCode=rst3.getString("TxnTypeOut");
    
            
             }
          
            if(txnCode.isEmpty()){
             txnCode="Empty";
            }
            
           
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
return txnCode;

 
 }
 
 
 public synchronized void updateBatchTxnPostingType(List theDetails){

    try {
        
    Connection cq=quaryObj.createConnection(); 
    
    
    cq.setAutoCommit(false);
    
       String UpdateQuary = "UPDATE txnpostingtype SET TxnType=?,TxnDescription=?,TxnTypeOut=?  WHERE TxnTypeOut=?";
    
   
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
            
        ps.setObject(1, theDetails.get(1));
        ps.setObject(2, theDetails.get(2));
        ps.setObject(3, theDetails.get(3));
        ps.setObject(4, theDetails.get(0));
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }
   
 
 }
 
 
 public synchronized void deleteTheTxnType(String trnType){

try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);  
    String query = "DELETE FROM txnpostingtype WHERE  TxnTypeOut="+"'"+trnType+"'";
    PreparedStatement ps = cq.prepareStatement(query);
    ps.execute();
    cq.setAutoCommit(true);
    
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }

   
 
 }

 
 public void updateTransactionDetailsTable(JTable table){
 double bal=0.0;String balType="",balType5="",pos="",flag="";
int count=0;
    
    data5= new ArrayList<>();
      column1= new ArrayList<>();
      column1.add("Ledger Name");
      column1.add("Balance");
      
     

     try {
                Connection cq=quaryObj.createConnection(); 
                cq.setAutoCommit(false);
            String query = "SELECT account_name,running_balance FROM account_created_store WHERE account_number like '01123%' or account_number like '01121%' order by account_number DESC";
            PreparedStatement ps =cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
         while(rst3.next()){
         data4  =new ArrayList();  
              balType=rst3.getString("account_name");
              bal=parseDouble(df2.format(rst3.getDouble("running_balance")));
           data4.add(0, balType);
            data4.add(1, bal);
             data5.add(count, data4);
             count++;
            }
           	
		
        
 
          
          
            model= new ObjectTableModel( data5, column1);
           table.setModel(model);
            
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }




} 
 
 
 public void deleteBanks(){
     
 try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);  
    String query = "DELETE FROM bankPostingBulk";
    PreparedStatement ps = cq.prepareStatement(query);
    ps.execute();
    cq.setAutoCommit(true);
    
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }

} 
       

 public void createTheDBItemBankAccount(List theBankAccountD){
//    fios.stringFileWriter(fios.createFileName("test", "testit", "qtrdyr.txt"),theBankAccountD.get(0).toString());
  try {
         Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =cq.prepareStatement("INSERT INTO bankpostingbulk VALUES(?,?,?,?,?,?,?,?)");
        ps1.setObject(1, null);
        ps1.setObject(2, theBankAccountD.get(0));
        ps1.setObject(3,theBankAccountD.get(1));
        ps1.setObject(4,"NA");
        ps1.setObject(5,"NA");
        ps1.setObject(6,"NA");
        ps1.setObject(7,"NA");
        ps1.setObject(8,"NA");
        ps1.executeUpdate();
         cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }
 
 
 
 
 
 
 
 }
 
 public String getBankUsingId(String trnId){
 
 String txnCode="";

 try {
         Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
             
                 String query = "SELECT  account_number FROM bankpostingbulk WHERE  TrnId="+"'"+trnId+"'";
             PreparedStatement ps = cq.prepareStatement(query);
             ResultSet rst3 = ps.executeQuery();
             
          while(rst3.next()){
               
           txnCode=rst3.getString("account_number");
    
            
             }
          
            if(txnCode.isEmpty()){
             txnCode="Empty";
            }
            
           
             cq.setAutoCommit(true);
            quaryObj.closeConnection(cq);
         } catch (SQLException ex) {
             Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
         }
return txnCode;
 
 
 }
 
 public void createBiodataMetaData(List<List> theData){
  for(List actuaDat:theData){
  try {
         Connection cq=quaryObj.createConnection(); 
         cq.setAutoCommit(false);
         PreparedStatement ps1 =cq.prepareStatement("INSERT INTO biodatametadata VALUES(?,?,?,?,?,?,?,?)");
        ps1.setObject(1, null);
        ps1.setObject(2, this.getDBCurrentDate());
        ps1.setObject(3,actuaDat.get(0));
        ps1.setObject(4,actuaDat.get(1));
        ps1.setObject(5,"Active");
        ps1.setObject(6,"NA");
        ps1.setObject(7,"NA");
        ps1.setObject(8,"NA");
        ps1.executeUpdate();
         cq.setAutoCommit(true);
         quaryObj.closeConnection(cq);
     } catch (SQLException ex) {
         Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
     }
 
  }
 
 }
 
 
 
 public void createBiodata(List<List> theData,Component testIt){
     
 String firstData = "CREATE TABLE IF NOT EXISTS biodata(`trn_id` INT NOT NULL AUTO_INCREMENT,`First_Name` VARCHAR(100) NOT NULL DEFAULT 'Googo',`Last_Name` VARCHAR(100) NOT NULL DEFAULT 'Bazi',`account_number` VARCHAR(100) NOT NULL DEFAULT '01123000010',`account_name` VARCHAR(100) NOT NULL DEFAULT 'Googo Bazi',";
   String middleData = "",data="";      
         String lastData="PRIMARY KEY (`trn_id`))ENGINE = InnoDB AUTO_INCREMENT = 100";
         
 for(List actualData:theData){
     
     String dataCarrier="";
     
     switch(actualData.get(1).toString()){
         
         case "Date":
             
          dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"DATE NOT NULL DEFAULT '1970-01-01',";
             
             break;
         case "Number":
             
        dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(30) NOT NULL DEFAULT '0.0',";     
             break;
         case "String":
        dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',";        
             break;
 case "Contact1":
   dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',";      
     break;
case "Contact2":
     dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',";   
    break;
case "BirthDate":
     dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"DATE NOT NULL DEFAULT '1970-01-01',"; 
    
    break;
case "Sex":
   dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(50) NOT NULL DEFAULT '0.0',"; 
    break;
case "EducationLevel":
  dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(50) NOT NULL DEFAULT '0.0',";   
    break;
case "MaritalStatus":
    
      dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(50) NOT NULL DEFAULT '0.0',"; 
    break;
case "Email":
      dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',"; 
    
    break;
case "KinContact1":
      dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',"; 
    
    break;
case "KinContact2":
    dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',";   
    break;
case "KinEmail":
    dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',";   
    break;
case "KinRelationship":
    
    dataCarrier= actualData.get(0).toString().replace(" ", "_")+" "+"VARCHAR(200) NOT NULL DEFAULT '0.0',";   
    break;

     }
 middleData=middleData.concat(dataCarrier);
 }
 
 data=firstData.concat(middleData.concat(lastData));
 
// JOptionPane.showMessageDialog(testIt, data);
 
  try {
             Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);  
              PreparedStatement psx1 = cq.prepareStatement(data);
              psx1.executeUpdate();
               cq.setAutoCommit(true);
                
         quaryObj.closeConnection(cq);
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }
 
 }
 
 public void deleteBiodataMetaData(){
 
 try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);  
    String query = "DELETE FROM biodatametadata";
    PreparedStatement ps = cq.prepareStatement(query);
    ps.execute();
    cq.setAutoCommit(true);
    
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }
 
 
 }
 
 
 public void dropBiodata(){
//     this.getAllAccountNumbers()
             
 if(this.testTable("biodata")){
      try {
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    PreparedStatement ps =  cq.prepareStatement("DROP TABLE"+" Biodata");

    ps.execute();

    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) {
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
 }
 
 }
 
 public List<List>getBiodataMetaData(){
     
 List<List> mainBiodata=new ArrayList();
 
       try {
           
            Connection cq=quaryObj.createConnection(); 
            
            cq.setAutoCommit(false);
            
            PreparedStatement ps1 = cq.prepareStatement("SELECT bio_name, bio_data FROM biodatametadata");
            
            ResultSet rst=ps1.executeQuery();
            
           while (rst.next()) {
               
            List newbIO=new ArrayList(); 
            
             newbIO.add(rst.getString("bio_name")) ;
             
             newbIO.add(rst.getString("bio_data")) ;
             
           mainBiodata.add(newbIO);
           
           }
           
            cq.setAutoCommit(true);
            
            rst.close();
            
            ps1 .close();
            
            quaryObj.closeConnection(cq);
            
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return mainBiodata;
 
 
 
 
 
 }
 
 
 
 public int biodataSize(){
   String tableSchema=fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "AccountDBDetails.txt"));
   int columnNumber=0;
   
    if(this.testTable("biodata")){
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT COUNT(*) AS columns FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema ="+"'"+tableSchema+"'"+" AND table_name = 'biodata'");
            ResultSet rst=ps1.executeQuery();
           while (rst.next()) {
         
          columnNumber   =rst.getInt("columns") ;
             
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
           return columnNumber;
 
 
 }
 
 
  public List biodataDataColumns(){
      
   String tableSchema=fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "AccountDBDetails.txt"));
   List theColumns=new ArrayList();
    if(this.testTable("biodata")){
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema ="+"'"+tableSchema+"'"+" AND table_name = 'biodata'");
            ResultSet rst=ps1.executeQuery();
           while (rst.next()) {
         
          theColumns.add(rst.getString("COLUMN_NAME")) ;
             
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
           return theColumns;
 
 
 }
 
 public void bioDataPupulated(JTable otherTable){
 
     int l=0;
    
    
  List  data5x= new ArrayList<>();
    
   List   column1x= biodataDataColumns();
    List<List>   column1x1= this.getBiodataMetaData();
if(dataTableNotEmpty()){
   
     try {
         
 Connection cq=quaryObj.createConnection(); 
 
  cq.setAutoCommit(false);
  
            String query = "SELECT * FROM biodata";
            
            PreparedStatement ps = cq.prepareStatement(query);
            
            ResultSet rst3 = ps.executeQuery();
            
           while(rst3.next()){
               
       List  data4x=new ArrayList();
       switch(biodataSize()){
           case 5:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
           data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
       
         break;
        case 6:
          data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
            data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
         
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));    
            break;
        case 7:
        data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name")); 
       data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
          
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
           data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));   
            break;
        case 8:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
           data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
           
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
           data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
            data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));  
            
            break;
        case 9:
        data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
         data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
        
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
           data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
            data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
             data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
            break;
        case 10:
          data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
           data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));    
         
          data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
           data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
            data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
             data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_"))); 
            break;
        case 11:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name")); 
            data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
         
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
            break;
        case 12:
            
           data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name")); 
            data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
          
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));   
            break;
        case 13:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name")); 
           data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
      
             data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            break;
         case 14:
       data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
          data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
          
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));  
             break;
        case 15:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name")); 
          data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));    
            
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
            
            
            break;
        case 16:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
           data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
         
       data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
            break;
        case 17:
            
            data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name")); 
          data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
           
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_")));
            
            break;
        case 18:
            
            data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
        data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));    
           
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
            break;
         case 19:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
        data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
          
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_"))); 
               data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_"))); 
             break;
        case 20:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
        data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
          
          data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
              data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_")));
              data4x.add(19, rst3.getString(column1x1.get(14).get(0).toString().replaceAll(" ", "_")));
            break;
         case 21:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
         data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
              data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_")));
              data4x.add(19, rst3.getString(column1x1.get(14).get(0).toString().replaceAll(" ", "_")));
              data4x.add(20, rst3.getString(column1x1.get(15).get(0).toString().replaceAll(" ", "_")));
             break;
        case 22:
        data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
          data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
        data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
              data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_")));
              data4x.add(19, rst3.getString(column1x1.get(14).get(0).toString().replaceAll(" ", "_")));
              data4x.add(20, rst3.getString(column1x1.get(15).get(0).toString().replaceAll(" ", "_")));
              data4x.add(21, rst3.getString(column1x1.get(16).get(0).toString().replaceAll(" ", "_")));
              
            break;
        case 23:
         data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));          
         data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));  
            data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
              data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_")));
              data4x.add(19, rst3.getString(column1x1.get(14).get(0).toString().replaceAll(" ", "_")));
              data4x.add(20, rst3.getString(column1x1.get(15).get(0).toString().replaceAll(" ", "_")));
              data4x.add(21, rst3.getString(column1x1.get(16).get(0).toString().replaceAll(" ", "_")));
             data4x.add(22, rst3.getString(column1x1.get(17).get(0).toString().replaceAll(" ", "_")));
            break;
        case 24:
           data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
         data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));   
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
              data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_")));
              data4x.add(19, rst3.getString(column1x1.get(14).get(0).toString().replaceAll(" ", "_")));
              data4x.add(20, rst3.getString(column1x1.get(15).get(0).toString().replaceAll(" ", "_")));
              data4x.add(21, rst3.getString(column1x1.get(16).get(0).toString().replaceAll(" ", "_")));
             data4x.add(22, rst3.getString(column1x1.get(17).get(0).toString().replaceAll(" ", "_")));
                data4x.add(23, rst3.getString(column1x1.get(18).get(0).toString().replaceAll(" ", "_")));
            break;
        case 25:
           data4x.add(0, rst3.getString("trn_id"));
         data4x.add(1, rst3.getString("First_Name"));
         data4x.add(2, rst3.getString("Last_Name"));  
           data4x.add(3, rst3.getString("account_number"));
         data4x.add(4, rst3.getString("account_name"));    
              
         data4x.add(5, rst3.getString(column1x1.get(0).get(0).toString().replaceAll(" ", "_")));       
        data4x.add(6, rst3.getString(column1x1.get(1).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(7, rst3.getString(column1x1.get(2).get(0).toString().replaceAll(" ", "_")));     
        data4x.add(8, rst3.getString(column1x1.get(3).get(0).toString().replaceAll(" ", "_"))); 
        data4x.add(9, rst3.getString(column1x1.get(4).get(0).toString().replaceAll(" ", "_")));
        data4x.add(10, rst3.getString(column1x1.get(5).get(0).toString().replaceAll(" ", "_")));
          data4x.add(11, rst3.getString(column1x1.get(6).get(0).toString().replaceAll(" ", "_")));  
           data4x.add(12, rst3.getString(column1x1.get(7).get(0).toString().replaceAll(" ", "_"))); 
            data4x.add(13, rst3.getString(column1x1.get(8).get(0).toString().replaceAll(" ", "_")));    
             data4x.add(14, rst3.getString(column1x1.get(9).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(15, rst3.getString(column1x1.get(10).get(0).toString().replaceAll(" ", "_")));
             data4x.add(16, rst3.getString(column1x1.get(11).get(0).toString().replaceAll(" ", "_"))); 
              data4x.add(17, rst3.getString(column1x1.get(12).get(0).toString().replaceAll(" ", "_")));
              data4x.add(18, rst3.getString(column1x1.get(13).get(0).toString().replaceAll(" ", "_")));
              data4x.add(19, rst3.getString(column1x1.get(14).get(0).toString().replaceAll(" ", "_")));
              data4x.add(20, rst3.getString(column1x1.get(15).get(0).toString().replaceAll(" ", "_")));
              data4x.add(21, rst3.getString(column1x1.get(16).get(0).toString().replaceAll(" ", "_")));
             data4x.add(22, rst3.getString(column1x1.get(17).get(0).toString().replaceAll(" ", "_")));
                data4x.add(23, rst3.getString(column1x1.get(18).get(0).toString().replaceAll(" ", "_"))); 
             data4x.add(24, rst3.getString(column1x1.get(19).get(0).toString().replaceAll(" ", "_")));
            break;
           }
         data5x.add(l, data4x);
         l++;
            }
       
         listData= new ListDataModel( data5x, column1x);
           otherTable.setModel(listData);
           
       TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(listData);
      otherTable.setRowSorter(sorter);
       
       
          cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
}else{


         listData= new ListDataModel( data5x, column1x);
           otherTable.setModel(listData);
           
       TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(listData);
      otherTable.setRowSorter(sorter);



}

 
 
 
 }
 
 
 
 
 public boolean dataTableNotEmpty(){
     
   boolean fallOut=false; int noEM=0;
 
     
try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT COUNT(trn_id) AS notEmp FROM biodata");
            ResultSet rst=ps1.executeQuery();
           if (rst.next()) {
             
         noEM=rst.getInt("notEmp") ;
             
           }
          
           if(noEM>0){
           fallOut=true;
           
           }
           
           
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return fallOut;
       
 
 
 }
 
 
 
 public List getBiodataColumnData(){
     
 List mainBiodata=new ArrayList();
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT bio_name, bio_data FROM biodatametadata");
            ResultSet rst=ps1.executeQuery();
           while (rst.next()) {
             
             mainBiodata.add(rst.getString("bio_name")) ;
             
           }
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return mainBiodata;
 
 
 
 
 
 }
 
 public void populateOnlyUnaddedAccounts(JTable tableNow){
     
    
  List  data5x= new ArrayList<>();
    
//   List   data6= this.getAllAccountNumbers();
  
   List   column1z= new ArrayList<>();
      column1z.add("Account Type");
      column1z.add("Account Name");
      column1z.add("Account Number");
      column1z.add("The Account");
      column1z.add("Running Balance");

  
         try {
   Connection cq=quaryObj.createConnection();
    cq.setAutoCommit(false);
            String query = "SELECT account_name, account_number,account_l5,account_l1,running_balance FROM account_created_store";
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
     List    data4f=new ArrayList();
         data4f.add(0,rst3.getObject("account_l1"));
        data4f.add(1, rst3.getString("account_name"));
         data4f.add(2, rst3.getString("account_number"));  
        data4f.add(3, rst3.getString("account_l5"));  
        data4f.add(4, rst3.getString("running_balance")); 
      data5x.add(data4f);
            }
       
       
           cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
       
           listData= new ListDataModel( data5x, column1z);
           tableNow.setModel(listData);
           
       TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(listData);
      tableNow.setRowSorter(sorter);
       

 }
 
 public boolean accountExists(String accountNumber,Component c){
 
   boolean fallOut=false; int noEM=0;
 
//   JOptionPane.showMessageDialog(c, accountNumber+"");    
try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT COUNT(trn_id) AS notEmp FROM biodata WHERE account_number="+"'"+accountNumber+"'");
            ResultSet rst=ps1.executeQuery();
         while(rst.next()) {
             
         noEM=rst.getInt("notEmp") ;
             
           }
//      JOptionPane.showMessageDialog(c, noEM+"");       
           if(noEM>0){
           fallOut=true;
           
           }
           
           
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
        
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
           return fallOut;
 
 }
 
 
 public List biodataAccountNumbers(String accountNumber,Component comp){
     
     
//     JOptionPane.showMessageDialog(comp, fmt.getMasterAccountCode(accountNumber));
     
 List theAccountNumbers= new ArrayList();
 
          try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false); 
              String query = "SELECT account_number FROM  account_created_store WHERE account_number like '%"+fmt.getMasterAccountCode1(accountNumber)+"%'";
              PreparedStatement ps =  cq.prepareStatement(query);
             
              ResultSet rs = ps.executeQuery();
              
             
              while (rs.next()) {
              
                    theAccountNumbers.add(rs.getString("account_number"));
                    
//                    JOptionPane.showMessageDialog(comp, fmt.getMasterAccountCode1(accountNumber));
                    
                    }
             cq.setAutoCommit(true);     
            quaryObj.closeConnection(cq);
                    
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

return theAccountNumbers;
 }
 
 public List accountNumbersByMaster(String accountNumber,Component comp){
     
 List theTaccounts=new ArrayList();
 
     List accounts=biodataAccountNumbers(accountNumber,comp);
     
// JOptionPane.showMessageDialog(comp, accounts.size()+"");
 
 for(Object sectedAccount:accounts){
 
 if(!accountExists(sectedAccount.toString(),comp)){
 
 theTaccounts.add(sectedAccount);
 
 }
 
 }
 
 
 return theTaccounts;
 }
 
 public void insertBiodataMetaDataRecord(List theRecords){
 
    
        try {
        Connection cq=quaryObj.createConnection(); 
        cq.setAutoCommit(false);
      
        switch(this.biodataSize()){

        case 5:

        PreparedStatement ps1 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?)");
        ps1.setObject(1, null);
        ps1.setObject(2, theRecords.get(0));
        ps1.setObject(3,theRecords.get(1));
        ps1.setObject(4,theRecords.get(2));
        ps1.setObject(5,theRecords.get(3));
        ps1.executeUpdate();


        break;
        case 6:

        PreparedStatement ps12 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?)");
        ps12.setObject(1, null);
        ps12.setObject(2, theRecords.get(0));
        ps12.setObject(3,theRecords.get(1));
        ps12.setObject(4,theRecords.get(2));
        ps12.setObject(5,theRecords.get(3));
        ps12.setObject(6,theRecords.get(4));
        ps12.executeUpdate();


        break;
        case 7:

        PreparedStatement ps123 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?)");
        ps123.setObject(1, null);
        ps123.setObject(2, theRecords.get(0));
        ps123.setObject(3,theRecords.get(1));
        ps123.setObject(4,theRecords.get(2));
        ps123.setObject(5,theRecords.get(3));
        ps123.setObject(6,theRecords.get(4));
        ps123.setObject(7,theRecords.get(5));
        ps123.executeUpdate();


        break;
        case 8:

        PreparedStatement ps1234 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?)");
        ps1234.setObject(1, null);
        ps1234.setObject(2, theRecords.get(0));
        ps1234.setObject(3,theRecords.get(1));
        ps1234.setObject(4,theRecords.get(2));
        ps1234.setObject(5,theRecords.get(3));
        ps1234.setObject(6,theRecords.get(4));
        ps1234.setObject(7,theRecords.get(5));
        ps1234.setObject(8,theRecords.get(6));
        ps1234.executeUpdate();


        break;
        case 9:

        PreparedStatement ps12345 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?)");
        ps12345.setObject(1, null);
        ps12345.setObject(2, theRecords.get(0));
        ps12345.setObject(3,theRecords.get(1));
        ps12345.setObject(4,theRecords.get(2));
        ps12345.setObject(5,theRecords.get(3));
        ps12345.setObject(6,theRecords.get(4));
        ps12345.setObject(7,theRecords.get(5));
        ps12345.setObject(8,theRecords.get(6));
        ps12345.setObject(9,theRecords.get(7));
        ps12345.executeUpdate();


        break;
        case 10:

        PreparedStatement ps123456 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?)");
        ps123456.setObject(1, null);
        ps123456.setObject(2, theRecords.get(0));
        ps123456.setObject(3,theRecords.get(1));
        ps123456.setObject(4,theRecords.get(2));
        ps123456.setObject(5,theRecords.get(3));
        ps123456.setObject(6,theRecords.get(4));
        ps123456.setObject(7,theRecords.get(5));
        ps123456.setObject(8,theRecords.get(6));
        ps123456.setObject(9,theRecords.get(7));
        ps123456.setObject(10,theRecords.get(8));
        ps123456.executeUpdate();


        break;

        case 11:

        PreparedStatement ps1234567 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?)");
        ps1234567.setObject(1, null);
        ps1234567.setObject(2, theRecords.get(0));
        ps1234567.setObject(3,theRecords.get(1));
        ps1234567.setObject(4,theRecords.get(2));
        ps1234567.setObject(5,theRecords.get(3));
        ps1234567.setObject(6,theRecords.get(4));
        ps1234567.setObject(7,theRecords.get(5));
        ps1234567.setObject(8,theRecords.get(6));
        ps1234567.setObject(9,theRecords.get(7));
        ps1234567.setObject(10,theRecords.get(8));
        ps1234567.setObject(11,theRecords.get(9));
        ps1234567.executeUpdate();


        break;

        case 12:

        PreparedStatement ps12345678 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?)");
        ps12345678.setObject(1, null);
        ps12345678.setObject(2, theRecords.get(0));
        ps12345678.setObject(3,theRecords.get(1));
        ps12345678.setObject(4,theRecords.get(2));
        ps12345678.setObject(5,theRecords.get(3));
        ps12345678.setObject(6,theRecords.get(4));
        ps12345678.setObject(7,theRecords.get(5));
        ps12345678.setObject(8,theRecords.get(6));
        ps12345678.setObject(9,theRecords.get(7));
        ps12345678.setObject(10,theRecords.get(8));
        ps12345678.setObject(11,theRecords.get(9));
        ps12345678.setObject(12,theRecords.get(10));
        ps12345678.executeUpdate();


        break;

        case 13:

        PreparedStatement ps123456789 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps123456789.setObject(1, null);
        ps123456789.setObject(2, theRecords.get(0));
        ps123456789.setObject(3,theRecords.get(1));
        ps123456789.setObject(4,theRecords.get(2));
        ps123456789.setObject(5,theRecords.get(3));
        ps123456789.setObject(6,theRecords.get(4));
        ps123456789.setObject(7,theRecords.get(5));
        ps123456789.setObject(8,theRecords.get(6));
        ps123456789.setObject(9,theRecords.get(7));
        ps123456789.setObject(10,theRecords.get(8));
        ps123456789.setObject(11,theRecords.get(9));
        ps123456789.setObject(12,theRecords.get(10));
        ps123456789.setObject(13,theRecords.get(11));
        ps123456789.executeUpdate();


        break;

        case 14:

        PreparedStatement ps1234567890 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps1234567890.setObject(1, null);
        ps1234567890.setObject(2, theRecords.get(0));
        ps1234567890.setObject(3,theRecords.get(1));
        ps1234567890.setObject(4,theRecords.get(2));
        ps1234567890.setObject(5,theRecords.get(3));
        ps1234567890.setObject(6,theRecords.get(4));
        ps1234567890.setObject(7,theRecords.get(5));
        ps1234567890.setObject(8,theRecords.get(6));
        ps1234567890.setObject(9,theRecords.get(7));
        ps1234567890.setObject(10,theRecords.get(8));
        ps1234567890.setObject(11,theRecords.get(9));
        ps1234567890.setObject(12,theRecords.get(10));
        ps1234567890.setObject(13,theRecords.get(11));
        ps1234567890.setObject(14,theRecords.get(12));
        ps1234567890.executeUpdate();


        break;

        case 15:

        PreparedStatement ps12345678901 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps12345678901.setObject(1, null);
        ps12345678901.setObject(2, theRecords.get(0));
        ps12345678901.setObject(3,theRecords.get(1));
        ps12345678901.setObject(4,theRecords.get(2));
        ps12345678901.setObject(5,theRecords.get(3));
        ps12345678901.setObject(6,theRecords.get(4));
        ps12345678901.setObject(7,theRecords.get(5));
        ps12345678901.setObject(8,theRecords.get(6));
        ps12345678901.setObject(9,theRecords.get(7));
        ps12345678901.setObject(10,theRecords.get(8));
        ps12345678901.setObject(11,theRecords.get(9));
        ps12345678901.setObject(12,theRecords.get(10));
        ps12345678901.setObject(13,theRecords.get(11));
        ps12345678901.setObject(14,theRecords.get(12));
        ps12345678901.setObject(15,theRecords.get(13));
       
        ps12345678901.executeUpdate();


        break;


        case 16:

        PreparedStatement ps123456789012 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps123456789012.setObject(1, null);
        ps123456789012.setObject(2, theRecords.get(0));
        ps123456789012.setObject(3,theRecords.get(1));
        ps123456789012.setObject(4,theRecords.get(2));
        ps123456789012.setObject(5,theRecords.get(3));
        ps123456789012.setObject(6,theRecords.get(4));
        ps123456789012.setObject(7,theRecords.get(5));
        ps123456789012.setObject(8,theRecords.get(6));
        ps123456789012.setObject(9,theRecords.get(7));
        ps123456789012.setObject(10,theRecords.get(8));
        ps123456789012.setObject(11,theRecords.get(9));
        ps123456789012.setObject(12,theRecords.get(10));
        ps123456789012.setObject(13,theRecords.get(11));
        ps123456789012.setObject(14,theRecords.get(12));
        ps123456789012.setObject(15,theRecords.get(13));
        ps123456789012.setObject(16,theRecords.get(14));
        ps123456789012.executeUpdate();


        break;

        case 17:

        PreparedStatement ps1234567890123 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps1234567890123.setObject(1, null);
        ps1234567890123.setObject(2, theRecords.get(0));
        ps1234567890123.setObject(3,theRecords.get(1));
        ps1234567890123.setObject(4,theRecords.get(2));
        ps1234567890123.setObject(5,theRecords.get(3));
        ps1234567890123.setObject(6,theRecords.get(4));
        ps1234567890123.setObject(7,theRecords.get(5));
        ps1234567890123.setObject(8,theRecords.get(6));
        ps1234567890123.setObject(9,theRecords.get(7));
        ps1234567890123.setObject(10,theRecords.get(8));
        ps1234567890123.setObject(11,theRecords.get(9));
        ps1234567890123.setObject(12,theRecords.get(10));
        ps1234567890123.setObject(13,theRecords.get(11));
        ps1234567890123.setObject(14,theRecords.get(12));
        ps1234567890123.setObject(15,theRecords.get(13));
        ps1234567890123.setObject(16,theRecords.get(14));
        ps1234567890123.setObject(17,theRecords.get(15));  
        ps1234567890123.executeUpdate();


        break;

        case 18:

        PreparedStatement ps12345678901234 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps12345678901234.setObject(1, null);
        ps12345678901234.setObject(2, theRecords.get(0));
        ps12345678901234.setObject(3,theRecords.get(1));
        ps12345678901234.setObject(4,theRecords.get(2));
        ps12345678901234.setObject(5,theRecords.get(3));
        ps12345678901234.setObject(6,theRecords.get(4));
        ps12345678901234.setObject(7,theRecords.get(5));
        ps12345678901234.setObject(8,theRecords.get(6));
        ps12345678901234.setObject(9,theRecords.get(7));
        ps12345678901234.setObject(10,theRecords.get(8));
        ps12345678901234.setObject(11,theRecords.get(9));
        ps12345678901234.setObject(12,theRecords.get(10));
        ps12345678901234.setObject(13,theRecords.get(11));
        ps12345678901234.setObject(14,theRecords.get(12));
        ps12345678901234.setObject(15,theRecords.get(13));
        ps12345678901234.setObject(16,theRecords.get(14));
        ps12345678901234.setObject(17,theRecords.get(15));
        ps12345678901234.setObject(18,theRecords.get(16));
        ps12345678901234.executeUpdate();


        break;

        case 19:

        PreparedStatement ps123456789012345 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps123456789012345.setObject(1, null);
        ps123456789012345.setObject(2, theRecords.get(0));
        ps123456789012345.setObject(3,theRecords.get(1));
        ps123456789012345.setObject(4,theRecords.get(2));
        ps123456789012345.setObject(5,theRecords.get(3));
        ps123456789012345.setObject(6,theRecords.get(4));
        ps123456789012345.setObject(7,theRecords.get(5));
        ps123456789012345.setObject(8,theRecords.get(6));
        ps123456789012345.setObject(9,theRecords.get(7));
        ps123456789012345.setObject(10,theRecords.get(8));
        ps123456789012345.setObject(11,theRecords.get(9));
        ps123456789012345.setObject(12,theRecords.get(10));
        ps123456789012345.setObject(13,theRecords.get(11));
        ps123456789012345.setObject(14,theRecords.get(12));
        ps123456789012345.setObject(15,theRecords.get(13));
        ps123456789012345.setObject(16,theRecords.get(14));
        ps123456789012345.setObject(17,theRecords.get(15));
        ps123456789012345.setObject(18,theRecords.get(16));
        ps123456789012345.setObject(19,theRecords.get(17));    
        ps123456789012345.executeUpdate();


        break;

        case 20:

        PreparedStatement ps1234567890123456 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps1234567890123456.setObject(1, null);
        ps1234567890123456.setObject(2, theRecords.get(0));
        ps1234567890123456.setObject(3,theRecords.get(1));
        ps1234567890123456.setObject(4,theRecords.get(2));
        ps1234567890123456.setObject(5,theRecords.get(3));
        ps1234567890123456.setObject(6,theRecords.get(4));
        ps1234567890123456.setObject(7,theRecords.get(5));
        ps1234567890123456.setObject(8,theRecords.get(6));
        ps1234567890123456.setObject(9,theRecords.get(7));
        ps1234567890123456.setObject(10,theRecords.get(8));
        ps1234567890123456.setObject(11,theRecords.get(9));
        ps1234567890123456.setObject(12,theRecords.get(10));
        ps1234567890123456.setObject(13,theRecords.get(11));
        ps1234567890123456.setObject(14,theRecords.get(12));
        ps1234567890123456.setObject(15,theRecords.get(13));
        ps1234567890123456.setObject(16,theRecords.get(14));
        ps1234567890123456.setObject(17,theRecords.get(15));
        ps1234567890123456.setObject(18,theRecords.get(16));
        ps1234567890123456.setObject(19,theRecords.get(17));   
        ps1234567890123456.setObject(20,theRecords.get(18));  
        ps1234567890123456.executeUpdate();


        break;

        case 21:

        PreparedStatement ps12345678901234567 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps12345678901234567.setObject(1, null);
        ps12345678901234567.setObject(2, theRecords.get(0));
        ps12345678901234567.setObject(3,theRecords.get(1));
        ps12345678901234567.setObject(4,theRecords.get(2));
        ps12345678901234567.setObject(5,theRecords.get(3));
        ps12345678901234567.setObject(6,theRecords.get(4));
        ps12345678901234567.setObject(7,theRecords.get(5));
        ps12345678901234567.setObject(8,theRecords.get(6));
        ps12345678901234567.setObject(9,theRecords.get(7));
        ps12345678901234567.setObject(10,theRecords.get(8));
        ps12345678901234567.setObject(11,theRecords.get(9));
        ps12345678901234567.setObject(12,theRecords.get(10));
        ps12345678901234567.setObject(13,theRecords.get(11));
        ps12345678901234567.setObject(14,theRecords.get(12));
        ps12345678901234567.setObject(15,theRecords.get(13));
        ps12345678901234567.setObject(16,theRecords.get(14));
        ps12345678901234567.setObject(17,theRecords.get(15));
        ps12345678901234567.setObject(18,theRecords.get(16));
        ps12345678901234567.setObject(19,theRecords.get(17));   
        ps12345678901234567.setObject(20,theRecords.get(18)); 
        ps12345678901234567.setObject(21,theRecords.get(19));  
        ps12345678901234567.executeUpdate();


        break;

        case 22:

        PreparedStatement ps123456789012345678 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps123456789012345678.setObject(1, null);
        ps123456789012345678.setObject(2, theRecords.get(0));
        ps123456789012345678.setObject(3,theRecords.get(1));
        ps123456789012345678.setObject(4,theRecords.get(2));
        ps123456789012345678.setObject(5,theRecords.get(3));
        ps123456789012345678.setObject(6,theRecords.get(4));
        ps123456789012345678.setObject(7,theRecords.get(5));
        ps123456789012345678.setObject(8,theRecords.get(6));
        ps123456789012345678.setObject(9,theRecords.get(7));
        ps123456789012345678.setObject(10,theRecords.get(8));
        ps123456789012345678.setObject(11,theRecords.get(9));
        ps123456789012345678.setObject(12,theRecords.get(10));
        ps123456789012345678.setObject(13,theRecords.get(11));
        ps123456789012345678.setObject(14,theRecords.get(12));
        ps123456789012345678.setObject(15,theRecords.get(13));
        ps123456789012345678.setObject(16,theRecords.get(14));
        ps123456789012345678.setObject(17,theRecords.get(15));
        ps123456789012345678.setObject(18,theRecords.get(16));
        ps123456789012345678.setObject(19,theRecords.get(17));   
        ps123456789012345678.setObject(20,theRecords.get(18)); 
        ps123456789012345678.setObject(21,theRecords.get(19));  
         ps123456789012345678.setObject(22,theRecords.get(20)); 
        ps123456789012345678.executeUpdate();


        break;

        case 23:

        PreparedStatement ps1234567890123456789 =cq.prepareStatement("INSERT INTO biodata VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        ps1234567890123456789.setObject(1, null);
        ps1234567890123456789.setObject(2, theRecords.get(0));
        ps1234567890123456789.setObject(3,theRecords.get(1));
        ps1234567890123456789.setObject(4,theRecords.get(2));
        ps1234567890123456789.setObject(5,theRecords.get(3));
        ps1234567890123456789.setObject(6,theRecords.get(4));
        ps1234567890123456789.setObject(7,theRecords.get(5));
        ps1234567890123456789.setObject(8,theRecords.get(6));
        ps1234567890123456789.setObject(9,theRecords.get(7));
        ps1234567890123456789.setObject(10,theRecords.get(8));
        ps1234567890123456789.setObject(11,theRecords.get(9));
        ps1234567890123456789.setObject(12,theRecords.get(10));
        ps1234567890123456789.setObject(13,theRecords.get(11));
        ps1234567890123456789.setObject(14,theRecords.get(12));
        ps1234567890123456789.setObject(15,theRecords.get(13));
        ps1234567890123456789.setObject(16,theRecords.get(14));
        ps1234567890123456789.setObject(17,theRecords.get(15));
        ps1234567890123456789.setObject(18,theRecords.get(16));
        ps1234567890123456789.setObject(19,theRecords.get(17));   
        ps1234567890123456789.setObject(20,theRecords.get(18)); 
        ps1234567890123456789.setObject(21,theRecords.get(19));
         ps1234567890123456789.setObject(22,theRecords.get(20));
         ps1234567890123456789.setObject(23,theRecords.get(21));
        ps1234567890123456789.executeUpdate();


        break;



        }
        cq.setAutoCommit(true);
        quaryObj.closeConnection(cq);
        } catch (SQLException ex) {
        Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }

 }

 public int currentDepreciStoreId(String accountNumber){
     
int depreciationStoreId=0;

 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT   TrnId FROM depreciationstore WHERE (NOT DepreciationStatus="+"'"+"Ended"+"'"+" AND AssetAccountNumber="+"'"+accountNumber+"'"+")";
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
 
  depreciationStoreId=rst3.getInt("TrnId");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return depreciationStoreId;
}

  public String currentAccumulatedDepLedger(String accountNumber){
     
String depreciationStoreId="";

 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT    AccumDepriAccountNumber FROM depreciationstore WHERE (NOT DepreciationStatus="+"'"+"Ended"+"'"+" AND AssetAccountNumber="+"'"+accountNumber+"'"+")";
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
 
  depreciationStoreId=rst3.getString("AccumDepriAccountNumber");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return depreciationStoreId;
}
 
//  public int provisionForDepriciationExpenseLedger(){
//     
//int depreciationStoreId=0;
//
// try {
//  
//    Connection cq=quaryObj.createConnection(); 
//    cq.setAutoCommit(false);
//    String query = "SELECT    AccumDepriAccountNumber FROM depreciationstore WHERE (NOT DepreciationStatus="+"'"+"Ended"+"'"+" AND AssetAccountNumber="+"'"+accountNumber+"'"+")";
//    PreparedStatement ps = cq.prepareStatement(query);
//    ResultSet rst3 = ps.executeQuery();
//   while(rst3.next()){
// 
//  depreciationStoreId=rst3.getInt("TrnId");
//
//    }
//    cq.setAutoCommit(true);
//    quaryObj.closeConnection(cq);
//    } catch (SQLException ex) { 
//    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
//    }
//
//   
//
//return depreciationStoreId;
//}
 
 
 
  public int currentDepreciScheduleId(int assetId){
int depreScheduleId=0;

 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT   TrnId FROM depreciationschedule WHERE (AssetId="+assetId+" AND NOT DepreciationStatus="+"'"+"D"+"'"+")";
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
    if(rst3.first()){
 
  depreScheduleId=rst3.getInt("TrnId");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return depreScheduleId;
}
      
  
  
  public double currentDepreciationInstalmentNow(int trnId){

    
    double theDepreciationInstalment=0.0;

 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT    Depreciation FROM  depreciationschedule WHERE TrnId="+trnId;
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
        
  theDepreciationInstalment=rst3.getDouble("Depreciation");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return theDepreciationInstalment;

}
 public double remainingAccumulatedDepNow(int theId){
 double accumulatedDep=0.0;
 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT    AcccumulatedDepreciation FROM  depreciationschedule WHERE TrnId="+theId;
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
        
  accumulatedDep=rst3.getDouble("AcccumulatedDepreciation");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return accumulatedDep;

 
 }
   
 public double totalNetbookValue(int theId){
 double accumulatedDep=0.0;
 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT SalvageValue FROM  depreciationstore WHERE TrnId="+theId;
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
        
  accumulatedDep=rst3.getDouble("SalvageValue");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return accumulatedDep;

 
 }
 
 
public double remainingTotalAccumulatedDepNow(int theId){
 double accumulatedDep=0.0;
 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT accumDep FROM  depreciationstore WHERE TrnId="+theId;
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
        
  accumulatedDep=rst3.getDouble("accumDep");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return accumulatedDep;

 
 }
 
   public String  instalmentNextDueDateDep(int theId){
    String accumulatedDep="";
 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT    DepriDate FROM  depreciationschedule WHERE TrnId="+theId;
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
        
  accumulatedDep=rst3.getString("DepriDate");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return accumulatedDep;

   
   
   }
   
    
   public int getTheAssetId(int theIds){
   int assetId=0;

 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT    theIds FROM  depreciationschedule WHERE TrnId="+theIds;
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
        
  assetId=rst3.getInt("theIds");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   return assetId;
   }
   
 
   public void updateEndedDepreciation(int assetId,String updateStatus){
   
       try {
    
    Connection cq=quaryObj.createConnection(); 
    
    cq.setAutoCommit(false); 
    
    String UpdateQuary = "UPDATE depreciationstore SET DepreciationStatus=? WHERE TrnId=?";//Update the instalment, change status to paid and quote the istalment paid date
   
    try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
        
    pstool.setObject(1, updateStatus);
    
     pstool.setObject(2, assetId);

    
    pstool.executeUpdate();
    }
    cq.setAutoCommit(true);
    
    quaryObj.closeConnection(cq);

    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }
   
   
   
   
   }
   
   
   
 public synchronized void updateNewDepreciatioScheduleNow(String accountNumberNow,int assetId,int currentInstalmentId,double currentDepreciationAmounttNow,Component c){
 
    
     double depreciation=currentDepreciationInstalmentNow(currentInstalmentId);
  
     double netBookValue=totalNetbookValue(assetId);
//    JOptionPane.showMessageDialog(c, "Depreciation= "+depreciation);
    
double existingRemainingAccumumulatedDepre=remainingAccumulatedDepNow(assetId);

// JOptionPane.showMessageDialog(c, "existingRemainingAccumumulatedDepre= "+existingRemainingAccumumulatedDepre);
double existingRemainingTotalAccumumulatedDepre=remainingTotalAccumulatedDepNow(assetId);

// JOptionPane.showMessageDialog(c, "existingRemainingTotalAccumumulatedDepre= "+existingRemainingTotalAccumumulatedDepre);
 
String instalmentNextDueDate=instalmentNextDueDateDep(currentInstalmentId+1);

// JOptionPane.showMessageDialog(c, "instalmentNextDueDate= "+instalmentNextDueDate);

String instalmentStatus="D";

if(depreciation>currentDepreciationAmounttNow){
instalmentNextDueDate=instalmentNextDueDateDep(currentInstalmentId);
instalmentStatus="PD";
}

existingRemainingAccumumulatedDepre+=currentDepreciationAmounttNow;//Remaining instalment on the amortization schedule
existingRemainingTotalAccumumulatedDepre+=currentDepreciationAmounttNow;
netBookValue-=currentDepreciationAmounttNow;

// JOptionPane.showMessageDialog(c, "existingRemainingAccumumulatedDepre+=currentDepreciationAmounttNow= "+existingRemainingAccumumulatedDepre);

// JOptionPane.showMessageDialog(c, "existingRemainingTotalAccumumulatedDepre+=currentDepreciationAmounttNow= "+existingRemainingTotalAccumumulatedDepre);

//JOptionPane.showMessageDialog(c, metadata);
try {
    
    Connection cq=quaryObj.createConnection(); 
    
    cq.setAutoCommit(false); 
    
    String UpdateQuary = "UPDATE depreciationSchedule SET AcccumulatedDepreciation=?,DepreciationStatus=? WHERE TrnId=?";//Update the instalment, change status to paid and quote the istalment paid date
   
    try (PreparedStatement pstool = cq.prepareStatement(UpdateQuary)) {
        
    pstool.setObject(1, existingRemainingTotalAccumumulatedDepre);
    
     pstool.setObject(2, instalmentStatus);
     
      pstool.setObject(3, currentInstalmentId);
    
    pstool.executeUpdate();
    }
    cq.setAutoCommit(true);
    
     cq.setAutoCommit(false); 
    
    String UpdateQuary2 = "UPDATE depreciationstore SET NextDepriDate=?, accumDep=?,SalvageValue=?,DepreciationStatus=? WHERE  TrnId=?";//Update the instalment, change status to paid and quote the istalment paid date
     
    try (PreparedStatement pstool2 = cq.prepareStatement(UpdateQuary2)) {
        
    pstool2.setObject(1, instalmentNextDueDate);
    
    pstool2.setObject(2, existingRemainingTotalAccumumulatedDepre);
    
     pstool2.setObject(3, netBookValue);
    
    pstool2.setObject(4, "Started");
    
    pstool2.setObject(5, assetId);
    
    
    pstool2.executeUpdate();
    }
    cq.setAutoCommit(true);
    
    quaryObj.closeConnection(cq);

    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);

    }


}
 public boolean assetStoreNotThere(String accountNumber){
 int theASSET=0;boolean Notthere=true;
 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT   COUNT(AccumDepriAccountNumber) AS testFo FROM depreciationstore WHERE (NOT DepreciationStatus="+"'"+"Ended"+"'"+" AND AssetAccountNumber="+"'"+accountNumber+"'"+")";
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   while(rst3.next()){
 
  theASSET=rst3.getInt("testFo");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }
if(theASSET>0){
Notthere=false;
}
 return Notthere;
 }

 public boolean fillMeWithLoanStatementIn(JTable table,Component c){
  
 boolean inout=false;
    
    
   
      column1= new ArrayList<>();
      column1.add("S/N");
      column1.add("ACCOUNT NAME");
      column1.add("ACCOUNT NUMBER");

    
      ArrayList<ArrayList<Object>> theActualData=theObjectedStatement(c);
      
      model= new ObjectTableModel( theActualData, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     if(0!=theActualData.size()){
     
     inout=true;
     
     }
return inout;
  
  } 

  public boolean fillMeWithLoanStatementInDetails(JTable table,String accountNumbe){
  
 boolean inout=false;
    
    
   
      column1= new ArrayList<>();
      column1.add("S/N");
      column1.add("LOANCODE");
      column1.add("LOANID");
      column1.add("LOANSTATUS");
    
      ArrayList<ArrayList<Object>> theActualData=theObjectedStatementDetails(accountNumbe);
      
      model= new ObjectTableModel( theActualData, column1);
           table.setModel(model);
           
       TableRowSorter<ObjectTableModel> sorter = new TableRowSorter<>(model);
      table.setRowSorter(sorter);
     if(0!=theActualData.size()){
     
     inout=true;
     
     }
return inout;
  
  } 
 
 
 public void feelNonExistingCodes(JComboBox box,String accountNumber,String theItem){
 List rewards=new ArrayList();
 
rewards.add("Select The Item");
     
     
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT  ItemName FROM    payrollemployeerewarddeductionstore roll WHERE   NOT EXISTS ( SELECT  TrnId FROM    payrollusagestatic e WHERE "+"(accountNumber="+"'"+accountNumber+"' AND e.TrnId=roll.TrnId)) AND ItemGroup="+"'"+theItem+"'");
            ResultSet rst=ps1.executeQuery();
            if(rewardThereItem(accountNumber)){
                
         while(rst.next()) {
       rewards.add(rst.getString("ItemName"));
         }
         
           }else{
           
      rewards.add("Empty");      
           }  
         
           listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
                    box.setModel(modelcombo); 
                    box.setSelectedIndex(0);
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
         
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
//           return userName;
 
 
// feelNonExistingCodes
 }
 
 
 
 
 public boolean rewardThereItem(String accountNumber){
 
     boolean theItemIn=false;int theitmes=0;
 
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT  COUNT(ItemName) AS inf FROM    payrollemployeerewarddeductionstore roll WHERE   NOT EXISTS ( SELECT  TrnId FROM    payrollusagestatic e WHERE "+"(accountNumber="+"'"+accountNumber+"' AND e.TrnId=roll.TrnId))");
            ResultSet rst=ps1.executeQuery();
//            if(){
                
         while(rst.next()) {
       theitmes=rst.getInt("inf");
         }
         
//           }else{
           
//      rewards.add("Empty");      
//           }  
//         
//           listComboBoxModel     modelcombo = new listComboBoxModel(rewards);
//                    box.setModel(modelcombo); 
//                    box.setSelectedIndex(0);
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
         
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
  if(theitmes>0){theItemIn=true;}
  
  return theItemIn;
 }
 public ArrayList<ArrayList<Object>> theObjectedStatement(Component c){
 data5= new ArrayList<>();

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL runningLoansDetails()";
     PreparedStatement psxmt = cq.prepareStatement(query);
        
         ResultSet rsxmt = psxmt.executeQuery();
           while(rsxmt.next()){
         data4=new ArrayList();
         data4.add(rsxmt.getString("id"));
         data4.add(rsxmt.getString("customer_name"));
         data4.add(rsxmt.getString("customer_account"));
         data5.add(data4);
            }
       
           
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }
return data5;
}




public ArrayList<ArrayList<Object>> theObjectedStatementDetails(String accountNumber){
     int l=0,t=1;
 data5= new ArrayList<>();

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
            String query = "SELECT DISTINCT loanTrnId,LoanId,LoanStatusReport FROM loandisburserepaystatement where AccountNumber="+accountNumber;
            PreparedStatement ps =  cq.prepareStatement(query);
            ResultSet rst3 = ps.executeQuery();
           while(rst3.next()){
         data4=new ArrayList();
         data4.add(0, t);
         data4.add(1, rst3.getString("loanTrnId"));
         data4.add(2, rst3.getString("LoanId"));
          data4.add(3, rst3.getString("LoanStatusReport"));
         data5.add(l, data4);
         l++;t++;
            }
       
           
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
            Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
return data5;
}


public void updateDailyReportInterest(String accountNumber,String amount){


try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyInterest("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}

public void updateDailyReportAccumulatedInterest(String accountNumber,String amount){
try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyAccumInterest("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }


}
public void updateDailyReportLoanPenalty(String accountNumber,String amount){
try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyPenalty("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }


}
public void updateDailyReportPrincimpal(String accountNumber,String amount){

try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyPrincipal("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}


public void updateDailyReportInterestWriteOff(String accountNumber,String amount){


try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyInterestWriteOff("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}

public void updateDailyReportAccumulatedInterestWriteOff(String accountNumber,String amount){
try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyAccumInterestWriteOff("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }


}

public void collectOnDisbursement(String accountNumber){
try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL CollectionOnDisbursement("+"'newloan"+accountNumber+"'"+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }


}



public void updateDailyReportLoanPenaltyWriteOff(String accountNumber,String amount){
try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyPenaltyWriteOff("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }


}
public void updateDailyReportPrincimpalWriteOff(String accountNumber,String amount){

try {
                Connection cq=loancon.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatdateNormalDailyPrincipalWriteOff("+"'newloan"+accountNumber+"',"+amount+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              loancon.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}


  
  public String batchNumber(){
        
        String Thebatch="100",batch="";
        
        int theNumber=0;

try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL batchNumber()";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){
       
            
  theNumber=rsxmt.getInt("@theGroupNumber");

         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
//          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }



        batch="BTN"+(theNumber+"");
        
        return batch; 
        } 
                      

 public String transactionSequenceNumberDB() {
        
// String Thebatch="100",batch="";
        
        int theNumber=0;

try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL TheTrnSequencyNumber()";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){
       
            
  theNumber=rsxmt.getInt(1);

         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
//          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }



//        batch="BTN"+(theNumber+"");
        
        return theNumber+"";
 }  




public synchronized void createNewSequenceNumber(){

try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL resetTxnSeqNumber()";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}




 public void changerReceipPTo(){
     
         Connection cq=quaryObj.createConnection(); 
        try {
            
           cq.setAutoCommit(false);
           
           String UpdateQuary = "UPDATE sequencenumbers SET  otherNumbers2=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
            
        ps.setObject(1, 333);
        
        
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }      
            
    
     
     
     }
     
 
 public void changerReceipPFrom(){
     
         Connection cq=quaryObj.createConnection(); 
        try {
            
           cq.setAutoCommit(false);
           
           String UpdateQuary = "UPDATE sequencenumbers SET  otherNumbers2=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
            
        ps.setObject(1, 777);
        
        
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }      
            
     }


 
 
 public int getNumberFromTo(){
 
int theitmes = 0;
 
       try {
            Connection cq=quaryObj.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT  otherNumbers2 FROM    sequencenumbers");
            ResultSet rst=ps1.executeQuery();
//            if(){
                
         while(rst.next()) {
       theitmes=rst.getInt("otherNumbers2");
         }
         
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            quaryObj.closeConnection(cq);
         
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
  
  return theitmes;
 }
 

  
  
public List    getLoanPaymentDetails(List theDetails,Component c){
     
//  JOptionPane.showMessageDialog(c, theDetails.get(1)+";"+theDetails.get(2));



              List loanDetails=new ArrayList();
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL loanPrintingDetails("+"'"+theDetails.get(1)+"'"+","+"'"+theDetails.get(2)+"'"+")";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){

      
    loanDetails.add(rsxmt.getString("id_1"));

loanDetails.add(rsxmt.getString("company_name"));
loanDetails.add(rsxmt.getString("company_branch"));
loanDetails.add(rsxmt.getString("company_box_number"));
loanDetails.add(rsxmt.getString("customer_name"));
loanDetails.add(rsxmt.getString("staff_name"));

loanDetails.add(rsxmt.getString("loan_taken"));
loanDetails.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rsxmt.getString("date_taken")));
loanDetails.add(rsxmt.getString("loans_paid"));

loanDetails.add(rsxmt.getString("loan_remaining"));
loanDetails.add(rsxmt.getString("batchNumber"));
loanDetails.add(rsxmt.getString("loanID"));

loanDetails.add(rsxmt.getString("trn_date"));
loanDetails.add(rsxmt.getString("trn_time"));
loanDetails.add(rsxmt.getString("LoanStatus"));
loanDetails.add(rsxmt.getString("princimpal_amount"));
loanDetails.add(rsxmt.getString("interest_amount"));
loanDetails.add(rsxmt.getString("office_number"));
         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }
//    JOptionPane.showMessageDialog(c, dailySales.size());   
//         JOptionPane.showMessageDialog(c, loanDetails.get(9).toString());  
//          JOptionPane.showMessageDialog(c, loanDetails.get(8).toString());  
return loanDetails;

}



public List    getSavingsDetails(List theDetails,Component c){
     
              List savingsDetails=new ArrayList();
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL savingsPrintingDetails("+"'"+theDetails.get(1)+"'"+","+"'"+theDetails.get(2)+"'"+")";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){


    savingsDetails.add(rsxmt.getString("id_1"));

savingsDetails.add(rsxmt.getString("company_name"));
savingsDetails.add(rsxmt.getString("company_branch"));
savingsDetails.add(rsxmt.getString("company_box_number"));
savingsDetails.add(rsxmt.getString("customer_name"));
savingsDetails.add(rsxmt.getString("staff_name"));

savingsDetails.add(rsxmt.getString("savings_made"));

savingsDetails.add(rsxmt.getString("savings_withdrawn"));
savingsDetails.add(rsxmt.getString("savings_remaining"));
savingsDetails.add(rsxmt.getString("accountNumber1"));

savingsDetails.add(rsxmt.getString("trn_date"));
savingsDetails.add(rsxmt.getString("trn_time"));
savingsDetails.add(rsxmt.getString("office_number"));
         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }

      
return savingsDetails;

}






  
public List<List>    getMiniStatementDetails(List theDetails,Component c){
     
String BatchNumberNow = null;

List<List> loanTotalResp=new ArrayList();

             
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
          
      String queryX ="SELECT BatchCode FROM loandisburserepaystatement WHERE loanTrnId="+"'"+theDetails.get(1)+"'";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(queryX);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      if(rsxmt.last()){
 
      BatchNumberNow=rsxmt.getString("BatchCode");
      
      

         }
   
          cq.setAutoCommit(true);
          
          
          cq.setAutoCommit(false);
           List loanDetails=new ArrayList();
          
  String queryq ="CALL loanPrintingDetails("+"'"+BatchNumberNow+"'"+","+"'"+theDetails.get(2)+"'"+")";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmtq = cq.prepareStatement(queryq);
          
          ResultSet rsxmqt = psxmtq.executeQuery();
          
      if(rsxmqt.next()){
// JOptionPane.showMessageDialog(c, rsxmqt.getString("id_1"));
    loanDetails.add(rsxmqt.getString("id_1"));

loanDetails.add(rsxmqt.getString("company_name"));
loanDetails.add(rsxmqt.getString("company_branch"));
loanDetails.add(rsxmqt.getString("company_box_number"));
loanDetails.add(rsxmqt.getString("customer_name"));
loanDetails.add(rsxmqt.getString("staff_name"));

loanDetails.add(rsxmqt.getString("loan_taken"));
loanDetails.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rsxmqt.getString("date_taken")));
loanDetails.add(rsxmqt.getString("loans_paid"));

loanDetails.add(rsxmqt.getString("loan_remaining"));
loanDetails.add(rsxmqt.getString("batchNumber"));
loanDetails.add(rsxmqt.getString("loanID"));

loanDetails.add(rsxmqt.getString("trn_date"));
loanDetails.add(rsxmqt.getString("trn_time"));
loanDetails.add(rsxmqt.getString("LoanStatus"));
loanDetails.add(rsxmqt.getString("princimpal_amount"));
loanDetails.add(rsxmqt.getString("interest_amount"));
loanDetails.add(rsxmqt.getString("office_number"));
         }
   
 loanTotalResp.add(loanDetails);
        cq.setAutoCommit(true);
        
         cq.setAutoCommit(false);
         
         List<List>anotherList=new ArrayList();
//          JOptionPane.showMessageDialog(c, theDetails.get(1));
  String query1X ="CALL loanStatementDetails("+"'"+theDetails.get(1)+"'"+")";
                                           
//     JOptionPane.showMessageDialog(c, query1X);    
     
          PreparedStatement psxmt1X = cq.prepareStatement(query1X);
          
          ResultSet rsxmt1X = psxmt1X.executeQuery();
          
      while(rsxmt1X.next()){
//          if(!rsxmt1X.isFirst()){
 List loanStateDetails=new ArrayList();
      
    loanStateDetails.add(rsxmt1X.getInt("id"));

loanStateDetails.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rsxmt1X.getString("trn_date")));
loanStateDetails.add(rsxmt1X.getString("amount_paid"));
loanStateDetails.add(rsxmt1X.getString("princimpal_paid"));
loanStateDetails.add(rsxmt1X.getString("interest_paid"));
loanStateDetails.add(rsxmt1X.getString("amount_remaining"));
loanStateDetails.add(rsxmt1X.getString("princimpal_remaining"));
loanStateDetails.add(rsxmt1X.getString("interest_remaining"));
anotherList.add(loanStateDetails);
//          }
         }
         
    loanTotalResp.add(anotherList);     
    
          cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }
//    JOptionPane.showMessageDialog(c, loanTotalResp.size());   
//         JOptionPane.showMessageDialog(c, loanTotalResp.get(1).toString());  
//          JOptionPane.showMessageDialog(c, loanTotalResp.get(2).toString());  
return loanTotalResp;

}





 

public int theNetworkConnSet(){
    
 int theNetwork=0;
 
 try {
  
    Connection cq=quaryObj.createConnection(); 
    cq.setAutoCommit(false);
    String query = "SELECT connect_status FROM   connect_network";
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   if(rst3.next()){
        
  theNetwork=rst3.getInt("connect_status");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return   theNetwork;


 
 }



public String  getTheNetworkIp(){
    
 String theNetwork="";
 
 try {
  
    Connection cq=quaryObj.createConnection(); 
    
    cq.setAutoCommit(false);
    
    String query = "SELECT connect_ip FROM   connect_network";
    PreparedStatement ps = cq.prepareStatement(query);
    ResultSet rst3 = ps.executeQuery();
   if(rst3.next()){
        
  theNetwork=rst3.getString("connect_ip");

    }
    cq.setAutoCommit(true);
    quaryObj.closeConnection(cq);
    } catch (SQLException ex) { 
    Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
    }

   

return   theNetwork;


 
 }


        
        
     public void updateTheNetworkStatus(int statusId){
     
         Connection cq=quaryObj.createConnection(); 
         
        try {
            
           cq.setAutoCommit(false);
           
           String UpdateQuary = "UPDATE connect_network SET connect_status=?";
           
            PreparedStatement ps =cq.prepareStatement(UpdateQuary);
            
        ps.setObject(1, statusId);
        
        
         ps.execute();
           
           cq.setAutoCommit(true);
           quaryObj.closeConnection(cq);
       } catch (SQLException ex) {
           Logger.getLogger(loanDatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
       }      
            
    
     
     
     }
     
     
     
         
  public synchronized boolean isBackUpedUp(String database,Component c){
      
      boolean backedUp=false; int isbackinUp=0;

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL isItBackeup("+"'"+database+"'"+")";
     PreparedStatement psxmt = cq.prepareStatement(query);
        
         ResultSet rsxmt = psxmt.executeQuery();
           while(rsxmt.next()){

        isbackinUp=rsxmt.getInt("backed");
       
            }
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }
if(isbackinUp>0){backedUp=true;}

return backedUp;
}  

public List<List>backUpDetails(Component c){

 List<List>data= new ArrayList<>();

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL getAllSendingDetails()";
     PreparedStatement psxmt = cq.prepareStatement(query);
        
         ResultSet rsxmt = psxmt.executeQuery();
           while(rsxmt.next()){
        List datax=new ArrayList();
         datax.add(rsxmt.getString("name"));
         datax.add(rsxmt.getString("contact"));
                datax.add(rsxmt.getString("theTime"));
         datax.add(rsxmt.getString("theDate"));
         data.add(datax);
            }
       
           
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }
return data;

}



public void createBackupRecord(List theDetailsN){


try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL createBackUpRecord("+"'"+theDetailsN.get(0)+"'"+","+"'"+theDetailsN.get(1)+"'"+","+"'"+theDetailsN.get(2)+"'"+","+"'"+theDetailsN.get(3)+"'"+","+theDetailsN.get(4)+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              Logger.getLogger(AccountNumberCreationDataBase.class.getName()).log(Level.SEVERE, null, ex);
          }

}






         
  public synchronized boolean phoneNumberAlreadyExists(String phoneNumber,Component c){
      
      boolean backedUp=false; int isbackinUp=0;

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL phoneNumberExists("+"'"+phoneNumber+"'"+")";
     PreparedStatement psxmt = cq.prepareStatement(query);
        
         ResultSet rsxmt = psxmt.executeQuery();
           while(rsxmt.next()){

        isbackinUp=rsxmt.getInt("phoneExists");
       
            }
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }
if(isbackinUp>0){backedUp=true;}

return backedUp;
}  


         
  public synchronized void setPhoneNumber(String accountNumber,String phoneNumber,Component c){
      
  
try {
                Connection cq=quaryObj.createConnection(); 
          cq.setAutoCommit(false);
String theProcedure ="CALL updatePhoneNumber("+"'"+accountNumber+"'"+","+"'"+phoneNumber+"'"+")";
              
              PreparedStatement psx1 =cq.prepareStatement(theProcedure);
              psx1.executeUpdate();
 cq.setAutoCommit(true);
              quaryObj.closeConnection(cq);
              
          } catch (SQLException ex) {
              JOptionPane.showMessageDialog(c, ex.toString());
          }
} 
  
   
public List<List>    getMiniSavingsDetails(List theDetails,Component c){
     
String BatchNumberNow = null;

List<List> savingsTotalResp=new ArrayList();

             
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
          
      String queryX ="SELECT BatchCode FROM loandisburserepaystatement WHERE loanTrnId="+"'"+theDetails.get(1)+"'";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(queryX);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      if(rsxmt.last()){
 
      BatchNumberNow=rsxmt.getString("BatchCode");
      
      

         }
   
          cq.setAutoCommit(true);
          
          
          cq.setAutoCommit(false);
           List loanDetails=new ArrayList();
          
  String queryq ="CALL loanPrintingDetails("+"'"+BatchNumberNow+"'"+","+"'"+theDetails.get(2)+"'"+")";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmtq = cq.prepareStatement(queryq);
          
          ResultSet rsxmqt = psxmtq.executeQuery();
          
      if(rsxmqt.next()){
// JOptionPane.showMessageDialog(c, rsxmqt.getString("id_1"));
    loanDetails.add(rsxmqt.getString("id_1"));

loanDetails.add(rsxmqt.getString("company_name"));
loanDetails.add(rsxmqt.getString("company_branch"));
loanDetails.add(rsxmqt.getString("company_box_number"));
loanDetails.add(rsxmqt.getString("customer_name"));
loanDetails.add(rsxmqt.getString("staff_name"));

loanDetails.add(rsxmqt.getString("loan_taken"));
loanDetails.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rsxmqt.getString("date_taken")));
loanDetails.add(rsxmqt.getString("loans_paid"));

loanDetails.add(rsxmqt.getString("loan_remaining"));
loanDetails.add(rsxmqt.getString("batchNumber"));
loanDetails.add(rsxmqt.getString("loanID"));

loanDetails.add(rsxmqt.getString("trn_date"));
loanDetails.add(rsxmqt.getString("trn_time"));
loanDetails.add(rsxmqt.getString("LoanStatus"));
loanDetails.add(rsxmqt.getString("princimpal_amount"));
loanDetails.add(rsxmqt.getString("interest_amount"));
loanDetails.add(rsxmqt.getString("office_number"));
         }
   
 savingsTotalResp.add(loanDetails);
        cq.setAutoCommit(true);
        
         cq.setAutoCommit(false);
         
         List<List>anotherList=new ArrayList();
//          JOptionPane.showMessageDialog(c, theDetails.get(1));
  String query1X ="CALL loanStatementDetails("+"'"+theDetails.get(1)+"'"+")";
                                           
//     JOptionPane.showMessageDialog(c, query1X);    
     
          PreparedStatement psxmt1X = cq.prepareStatement(query1X);
          
          ResultSet rsxmt1X = psxmt1X.executeQuery();
          
      while(rsxmt1X.next()){
//          if(!rsxmt1X.isFirst()){
 List loanStateDetails=new ArrayList();
      
    loanStateDetails.add(rsxmt1X.getInt("id"));

loanStateDetails.add(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(rsxmt1X.getString("trn_date")));
loanStateDetails.add(rsxmt1X.getString("amount_paid"));
loanStateDetails.add(rsxmt1X.getString("princimpal_paid"));
loanStateDetails.add(rsxmt1X.getString("interest_paid"));
loanStateDetails.add(rsxmt1X.getString("amount_remaining"));
loanStateDetails.add(rsxmt1X.getString("princimpal_remaining"));
loanStateDetails.add(rsxmt1X.getString("interest_remaining"));
anotherList.add(loanStateDetails);
//          }
         }
         
    savingsTotalResp.add(anotherList);     
    
          cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }
//    JOptionPane.showMessageDialog(c, loanTotalResp.size());   
//         JOptionPane.showMessageDialog(c, loanTotalResp.get(1).toString());  
//          JOptionPane.showMessageDialog(c, loanTotalResp.get(2).toString());  
return savingsTotalResp;

}
  
  

   
  public synchronized void changeState(int theState,Component c){
      
    

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL controlNameStatus("+theState+")";
     PreparedStatement psxmt = cq.prepareStatement(query);
              psxmt.executeUpdate();       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }

}  



  public synchronized boolean getStatus(Component c){
      
      boolean backedUp=false; int isbackinUp=0;

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL getTheNameStatus()";
     PreparedStatement psxmt = cq.prepareStatement(query);
        
         ResultSet rsxmt = psxmt.executeQuery();
           while(rsxmt.next()){

        isbackinUp=rsxmt.getInt("theStat");
       
            }
       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }
if(isbackinUp>0){backedUp=true;}

return backedUp;
}  



        
         public synchronized void updateTheAccountName(String accountNumber,String accountName,Component c){
      
    

 try {
 Connection cq=quaryObj.createConnection();
   cq.setAutoCommit(false);
    String query ="CALL updateAccountName("+"'"+accountNumber+"'"+","+"'"+accountName+"'"+")";
     PreparedStatement psxmt = cq.prepareStatement(query);
              psxmt.executeUpdate();       
         cq.setAutoCommit(true);
           quaryObj.closeConnection( cq);
        } catch (SQLException ex) { 
          
            JOptionPane.showMessageDialog(c, ex.toString());
        }

}  

         
         
                 
          
           
         
         
public List    getSavingsDetailsHistorical(List theDetails,Component c){
     
              List savingsDetails=new ArrayList();
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL savingsHistoricalPrintingDetails("+"'"+theDetails.get(2)+"'"+","+"'"+theDetails.get(1)+"'"+","+theDetails.get(3)+")";
                                           
     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){


    savingsDetails.add(rsxmt.getInt("id_1"));

savingsDetails.add(rsxmt.getString("company_name"));
savingsDetails.add(rsxmt.getString("company_branch"));
savingsDetails.add(rsxmt.getString("company_box_number"));
savingsDetails.add(rsxmt.getString("customer_name"));
savingsDetails.add(rsxmt.getString("staff_name"));

savingsDetails.add(rsxmt.getString("savings_made"));

savingsDetails.add(rsxmt.getString("savings_withdrawn"));
savingsDetails.add(rsxmt.getString("savings_remaining"));
savingsDetails.add(rsxmt.getString("accountNumber1"));

savingsDetails.add(rsxmt.getString("trn_date"));
savingsDetails.add(rsxmt.getString("trn_time"));
savingsDetails.add(rsxmt.getString("office_number"));
         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }

      
return savingsDetails;

}

         
public String    printDrivers(Component c){
     
           String theDrivers="";
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL getThePrintDrivers()";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){


  theDrivers=rsxmt.getString("theDrivesers");

         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }

      
return theDrivers;

}



public int    forStamp(Component c){
     
           int theStamp=0;
           
      try {
          
           Connection cq=quaryObj.createConnection();
           
          cq.setAutoCommit(false);
     
          
          
  String query ="CALL getTheStampStatus()";
                                           
//     JOptionPane.showMessageDialog(c, query);    
     
          PreparedStatement psxmt = cq.prepareStatement(query);
          
          ResultSet rsxmt = psxmt.executeQuery();
          
      while(rsxmt.next()){


  theStamp=rsxmt.getInt("stampStatus");

         }
   
 
        cq.setAutoCommit(true);
        
         quaryObj.closeConnection(cq);
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }

      
return theStamp;

}





public void    createGaurantor(List dts,Component c){
     
         
            
            try {
                
            Connection cq=loancon.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps = cq.prepareStatement("INSERT INTO gaurantors VALUES(?,?,?,?,?,?,?,?,?)");
            ps.setObject(1, null);//TrnId
            ps.setObject(2, dts.get(0).toString());//MonthPaid 
            ps.setObject(3, dts.get(1).toString());//YearPaid
            ps.setObject(4, dts.get(2).toString());//loanTrnId
            ps.setObject(5, dts.get(3).toString());//LoanId
            ps.setObject(6, dts.get(4).toString());//LoanId
            ps.setObject(7, dts.get(5).toString());//BatchCode
             ps.setObject(8, dts.get(6).toString());//AmountDisbursed
                ps.setObject(9, dts.get(7).toString());//AmountDisbursed
            ps.execute();
        
            
            ps.close();
           cq.setAutoCommit(true);
            
            loancon.closeConnection(cq);
          
      
     
         
      } catch (SQLException ex) {
          JOptionPane.showMessageDialog(c, ex.toString());
          Logger.getLogger(ReportsDatabase.class.getName()).log(Level.FINEST, ex.toString());
      }

      


}




 public int numberOfGaurantors(String loanId){
 
int theitmes = 0;
 
       try {
            Connection cq=loancon.createConnection(); 
            cq.setAutoCommit(false);
            PreparedStatement ps1 = cq.prepareStatement("SELECT  COUNT(id) AS gs FROM    gaurantors WHERE loanTrnId="+"'"+loanId+"'");
            ResultSet rst=ps1.executeQuery();
//            if(){
                
         while(rst.next()) {
       theitmes=rst.getInt("gs");
         }
         
            cq.setAutoCommit(true);
            rst.close();
            ps1 .close();
            loancon.closeConnection(cq);
         
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseQuaries.class.getName()).log(Level.SEVERE, null, ex);
        }
  
  return theitmes;
 }





}
