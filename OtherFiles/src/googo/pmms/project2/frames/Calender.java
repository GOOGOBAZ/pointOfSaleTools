package googo.pmms.project2.frames;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import googo.pmms.project2.frameHelper.IUpdateText;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author Stanchart
 */
public class Calender extends JFrame implements ActionListener, MouseListener{
    private IUpdateText updateTextObject;
ArrayList <String> columns;
ArrayList <Integer> b, data2 ;
  mymodel model; 
  int realDay,realMonth, realYear, currentMonth,currentYear ;
  String  actualDay;
ArrayList<ArrayList<Integer>> data ,a;
   String userId;

public Calender() {
    
    
        initComponents();
  java.awt.Image img = new ImageIcon(System.getProperty("user.dir")+"/"+"ICON_LOGO.jpg").getImage();
      this.setIconImage(img);
      this.setTitle("CALENDAR MODULE");        
        jButton4.addActionListener(this);
        jButton1.addActionListener(this);
        jButton2.addActionListener(this);
        jButton3.addActionListener(this);
 GregorianCalendar cal = new GregorianCalendar(); 

//Create calendar
 realDay = cal.get(GregorianCalendar.DAY_OF_MONTH); //Get day
 realMonth = cal.get(GregorianCalendar.MONTH); //Get month
 realYear = cal.get(GregorianCalendar.YEAR); //Get year
currentMonth = realMonth; //Match month and year
 currentYear=  realYear;     
         
        
        columns= new ArrayList <>(7);
        columns.add("Sun");
         columns.add("Mon");
       columns.add("Tue");  
       columns.add("Wed"); 
       columns.add("Thu");
       columns.add("Fri");
        columns.add("Sat");

  jTable1.setShowHorizontalLines(true);
   jTable1.setShowVerticalLines(true);
    jTable1.setRowHeight(38);
    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    jTable1.setCellSelectionEnabled(true);
     jTable1.addMouseListener(this);
        for (int i=realYear-2000; i<=realYear+2000; i++){
       b =new ArrayList <>();
       b.add(i);
   refreshCalendar (realMonth, realYear);   
        }
         jTable1.setDefaultRenderer( jTable1.getColumnClass(0), new tblCalendarRenderer());

    }
public void setUserID(String userid){
this.userId=userid;
}
public void setIUpdateText(IUpdateText ut) {
this.updateTextObject = ut;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Calender");
        setBackground(java.awt.SystemColor.activeCaption);
        setPreferredSize(new java.awt.Dimension(400, 400));
        setResizable(false);
        getContentPane().setLayout(null);

        /*
        jTable1.setAutoCreateColumnsFromModel(false);
        */
        jTable1.setBackground(java.awt.SystemColor.activeCaption);
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        /*
        jTable1.setModel( model);
        jTable1.setDropMode(javax.swing.DropMode.INSERT_ROWS);
        */
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 35, 340, 260);

        jLabel1.setText("January ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(146, 3, 64, 25);

        jButton1.setText("<");
        getContentPane().add(jButton1);
        jButton1.setBounds(85, 3, 49, 25);

        jButton2.setText(">");
        getContentPane().add(jButton2);
        jButton2.setBounds(254, 3, 48, 25);

        jButton3.setText(">>");
        getContentPane().add(jButton3);
        jButton3.setBounds(309, 3, 51, 25);

        jButton4.setText("<<");
        getContentPane().add(jButton4);
        jButton4.setBounds(20, 3, 53, 25);

        jLabel2.setText(" 2014");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(217, 7, 32, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Metal".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Calender().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

 public void refreshCalendar(int month, int year){
                              
 int nod, som; //Number Of Days, Start Of Month
   //Get first day of month and number of days
                                GregorianCalendar cal = new GregorianCalendar(year, month, 1);
                                nod = cal.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
                                som = cal.get(GregorianCalendar.DAY_OF_WEEK);
 String[] months =  {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
                                //Allow/disallow buttons
                                jButton4.setEnabled(true);
                                jButton1.setEnabled(true);
                                jButton3.setEnabled(true);
                                jButton2.setEnabled(true);
 if (month == 0 && year <= realYear-2000){jButton4.setEnabled(false);jButton1.setEnabled(false);} //Too early
 if (month == 11 && year >= realYear+2000){jButton3.setEnabled(false);jButton2.setEnabled(false);} //Too late

 jLabel1.setText(months[month]);
                               //Refresh the month label (at the top)
                               
   jLabel2.setText(year+""); //
  data = new ArrayList();
                                //Clear table
  for (int i=0; i<6; i++){
                                   data2 = new ArrayList();
                                    for (int j=0; j<7; j++){
                                        
                                        data2.add(j, null);

                                    }
                                   
                                 data.add(i, data2);
                                }
                           model = new  mymodel( data , columns);      

                                 for (int i=1; i<=nod; i++){
                                 int row = (i+som-2)/7;
                                 int column  =  (i+som-2)%7;
                                 model.setValueAt(i, row, column);
                       
          
 }
                                 
 jTable1.setModel(model); 
 }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource()==jButton4){
                                 if (currentMonth == 0){ //Back one year
                                        currentMonth = 11;
                                        currentYear -= 1;
                                    }
                                    else{ //Back one month
                                        currentMonth -= 1;
                                    }
                                    refreshCalendar(currentMonth, currentYear);
                                }
        else if(e.getSource()==jButton3){
        if (currentMonth == 11){ //Foward one year
        currentMonth = 0;
        currentYear += 1;
        }
        else{ //Foward one month
        currentMonth += 1;
        }
        refreshCalendar(currentMonth, currentYear);  }  
         else if(e.getSource()==jButton1){
       currentYear-=1;
        refreshCalendar(currentMonth, currentYear);}
        else if(e.getSource()==jButton2){
       currentYear+=1;
        refreshCalendar(currentMonth, currentYear);
        }    
    }

    

    @Override
    public void mouseClicked(MouseEvent me) {
        if (me.getClickCount()==2){
       
     int selectedRow =jTable1.getSelectedRow();
	 int   selectedColumn = jTable1.getSelectedColumn();
	   if (selectedRow > -1 && selectedColumn > -1)
	   {
	    
	   Object cvalue = jTable1.getModel().getValueAt(selectedRow, selectedColumn);
          String m="";
String month = jLabel1.getText();
       switch (month){ case "January": m ="01";break; case "February":m ="02" ;break; case "March":m ="03" ;break;
  case "April":m ="04" ;break;case "May":m ="05" ;break; case "June":m ="06";break;case "July":m ="07";break; case "August":m ="08";break;
 case "September": m ="09";break;case "October":m ="10" ;break; case "November": m ="11";break; case "December": m ="12";break;

       }

         int day=parseInt(cvalue.toString());  
         if(day>=1 &&day<=9){
         actualDay="0"+day;
         
         }else {actualDay=""+day;}
           String date1 =actualDay+"/"+m+"/"+jLabel2.getText();
           
            this.updateTextObject.updateText(date1 );
	   
	   }
       
        
            this.dispose();
   
    }
      
        } 
    

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
      
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }
class tblCalendarRenderer extends DefaultTableCellRenderer{
                                @Override
                                public Component getTableCellRendererComponent (JTable table, Object value, boolean selected, boolean focused, int row, int column){
                                    super.getTableCellRendererComponent(table, value, selected, focused, row, column);
                                    if (selected){ //Week-end
                                    setBackground(new Color(255, 220, 220));
                                    }
                                    else{ //Week
                                    setBackground(new Color(255, 255, 255));
                                    }
                                    if (value != null){
                                        if (Integer.parseInt(value.toString()) == realDay && currentMonth == realMonth && currentYear == realYear){ //Today
                                            setBackground(new Color(220, 220, 255));
                                        }
                                    }
                                    setBorder(null);
                                    setForeground(Color.black);
                                    return this;
                                }
                            }
}
class mymodel extends AbstractTableModel{
    
 ArrayList <String> column1;
   
ArrayList<ArrayList<Integer>> data1;
     
   public mymodel(ArrayList<ArrayList<Integer>> d, ArrayList<String> c){
       this.column1 = c;
       this.data1= d;    
   }   
    @Override
          public String getColumnName(int column) {
        return column1.get(column);
          }

    @Override
    public int getRowCount() {
       return data1.size();
    }

    @Override
    public int getColumnCount() {
        return column1.size();
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        return data1.get(rowIndex).get(columnIndex);
    }

public void setValueAt(Integer aValue,  int rowIndex, int columnIndex){

   data1.get(rowIndex).add(columnIndex, aValue);
   
   /*this.fireTableStructureChanged();*/
}


}
