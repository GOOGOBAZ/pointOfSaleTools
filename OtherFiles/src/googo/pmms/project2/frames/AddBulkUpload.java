/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package googo.pmms.project2.frames;

import googo.pmms.project2.accountsHelper.Formartter;
import googo.pmms.project2.accountsHelper.fileInputOutPutStreams;
import googo.pmms.project2.accountsHelper.updateLoans;
import googo.pmms.project2.databases.AccountNumberCreationDataBase;
import googo.pmms.project2.databases.DatabaseQuaries;
import googo.pmms.project2.databases.loanDatabaseQuaries;
import googo.pmms.project2.frameHelper.HeaderRenderer;
import googo.pmms.project2.frameHelper.IUpdateText;
import googo.pmms.project2.reportsHelper.OtherLoanReports;
import java.awt.Color;
import java.awt.Component;
import static java.awt.Component.CENTER_ALIGNMENT;
import static java.awt.Component.LEFT_ALIGNMENT;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import static java.lang.Double.parseDouble;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author STAT SOLUTIONS
 */
public class AddBulkUpload extends javax.swing.JFrame implements MouseListener, IUpdateText, ActionListener {
        String userId;
        
        PostingEntryWindow posting;
        fileInputOutPutStreams fios= new fileInputOutPutStreams();
        DatabaseQuaries dbq =new DatabaseQuaries();
        OtherLoanReports otherLoans=new  OtherLoanReports();
           AccountNumberCreationDataBase ancdb=new AccountNumberCreationDataBase();
         List DebitCredit;
           DecimalFormat NumberFormat =new DecimalFormat("#,###");
        SimpleDateFormat sdf =new SimpleDateFormat("dd/MM/yyyy");
    Formartter fmt = new Formartter();
    List theBulkDetails,amortDetails,accountDetails, customerDetails;
      loanDatabaseQuaries loan=new loanDatabaseQuaries();
    /**
     * Creates new form AddBulkUpload
     * @param userId
     * @param bulkValues
     * @param mainFrameOriginal
     */
    public AddBulkUpload(String userId,List bulkValues,PostingEntryWindow mainFrameOriginal) {
        initComponents();
        theBulkDetails=bulkValues;
       this.userId=userId;
       posting=mainFrameOriginal;
  jTable1.setAlignmentX(LEFT_ALIGNMENT);
jTable1.setAlignmentY(CENTER_ALIGNMENT);
jTable1.setAutoscrolls(true);
jTable1.setShowHorizontalLines(true);
jTable1.setShowGrid(true);
jTable1.setRowHeight(30);
jTable1.setGridColor(Color.gray);

     jTable1.addMouseListener( this);
        Image img = new ImageIcon(System.getProperty("user.dir")+"/"+"ICON_LOGO.jpg").getImage();
      this.setIconImage(img);
       this.setTitle("SELECT ACCOUNT NUMBER"); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton80 = new javax.swing.JButton();
        jButton81 = new javax.swing.JButton();
        jButton83 = new javax.swing.JButton();
        jButton82 = new javax.swing.JButton();
        jButton86 = new javax.swing.JButton();
        jButton84 = new javax.swing.JButton();
        jButton85 = new javax.swing.JButton();
        jButton92 = new javax.swing.JButton();
        jButton89 = new javax.swing.JButton();
        jButton87 = new javax.swing.JButton();
        jButton88 = new javax.swing.JButton();
        jButton95 = new javax.swing.JButton();
        jButton96 = new javax.swing.JButton();
        jButton97 = new javax.swing.JButton();
        jButton100 = new javax.swing.JButton();
        jButton99 = new javax.swing.JButton();
        jButton98 = new javax.swing.JButton();
        jButton94 = new javax.swing.JButton();
        jButton90 = new javax.swing.JButton();
        jButton91 = new javax.swing.JButton();
        jButton93 = new javax.swing.JButton();
        jButton102 = new javax.swing.JButton();
        jButton101 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 600));
        setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(1120, 570));
        jPanel1.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 1100, 470);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Search By:");
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 510, 80, 40);

        jTextField8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextField8.setForeground(new java.awt.Color(51, 0, 51));
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField8KeyPressed(evt);
            }
        });
        jPanel1.add(jTextField8);
        jTextField8.setBounds(90, 510, 190, 40);
        jTextField8.setText("");

        jCheckBox1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox1.setText("CREATE NEW CUSTOMER");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);
        jCheckBox1.setBounds(10, 0, 280, 40);
        jCheckBox1.setText("CREATE NEW CUSTOMER/SUB-LEDGER");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 153, 0));
        jLabel1.setText("First Name");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel1);
        jLabel1.setBounds(680, 0, 90, 40);
        //jLabel1.setVisible(false);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/images.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1000, 0, 40, 40);

        jComboBox1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 0, 204));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mr.", "Mrs.", "Ms.", "Hon.", "Dr.", "Prof.", "Sir" }));
        jPanel1.add(jComboBox1);
        jComboBox1.setBounds(340, 0, 58, 40);
        //jComboBox1.setVisible(false);

        jTextField1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(jTextField1);
        jTextField1.setBounds(770, 0, 190, 40);
        //jTextField1.setVisible(false);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 153, 0));
        jLabel2.setText("Title");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel2);
        jLabel2.setBounds(290, 0, 50, 40);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 153, 0));
        jLabel3.setText("First Name");
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel3);
        jLabel3.setBounds(400, 0, 90, 40);
        //jLabel3.setVisible(false);

        jTextField2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(jTextField2);
        jTextField2.setBounds(490, 0, 190, 40);
        //jTextField2.setVisible(false);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/submit.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(960, 0, 40, 40);
        //jButton2.setVisible(false);

        jTextField3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(jTextField3);
        jTextField3.setBounds(330, 510, 220, 40);

        jTextField4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(jTextField4);
        jTextField4.setBounds(560, 510, 220, 40);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1130, 570);

        jButton80.setBackground(new java.awt.Color(0, 51, 51));
        jButton80.setText("jButton5");
        getContentPane().add(jButton80);
        jButton80.setBounds(1500, 330, 73, 23);

        jButton81.setBackground(java.awt.SystemColor.controlLtHighlight);
        jButton81.setText("jButton5");
        getContentPane().add(jButton81);
        jButton81.setBounds(1490, 300, 73, 23);

        jButton83.setBackground(new java.awt.Color(255, 204, 204));
        jButton83.setText("jButton5");
        getContentPane().add(jButton83);
        jButton83.setBounds(1570, 290, 73, 23);

        jButton82.setBackground(new java.awt.Color(255, 204, 153));
        jButton82.setText("Blue");
        getContentPane().add(jButton82);
        jButton82.setBounds(1510, 280, 53, 23);

        jButton86.setBackground(new java.awt.Color(204, 204, 0));
        jButton86.setText("Blue");
        getContentPane().add(jButton86);
        jButton86.setBounds(1510, 260, 53, 23);

        jButton84.setBackground(new java.awt.Color(0, 153, 153));
        jButton84.setText("Blue");
        getContentPane().add(jButton84);
        jButton84.setBounds(1570, 260, 53, 23);

        jButton85.setBackground(new java.awt.Color(204, 255, 204));
        jButton85.setText("Blue");
        getContentPane().add(jButton85);
        jButton85.setBounds(1630, 260, 53, 23);

        jButton92.setBackground(new java.awt.Color(0, 204, 204));
        jButton92.setText("Blue");
        getContentPane().add(jButton92);
        jButton92.setBounds(1620, 240, 53, 23);

        jButton89.setBackground(new java.awt.Color(204, 153, 255));
        jButton89.setText("Blue");
        getContentPane().add(jButton89);
        jButton89.setBounds(1570, 240, 53, 23);

        jButton87.setBackground(new java.awt.Color(152, 198, 94));
        jButton87.setText("Blue");
        getContentPane().add(jButton87);
        jButton87.setBounds(1510, 240, 53, 23);

        jButton88.setBackground(new java.awt.Color(255, 204, 204));
        jButton88.setText("Blue");
        getContentPane().add(jButton88);
        jButton88.setBounds(1510, 220, 53, 23);

        jButton95.setBackground(new java.awt.Color(0, 153, 255));
        jButton95.setText("Blue");
        getContentPane().add(jButton95);
        jButton95.setBounds(1510, 200, 53, 23);

        jButton96.setBackground(java.awt.SystemColor.activeCaption);
        jButton96.setText("Blue");
        getContentPane().add(jButton96);
        jButton96.setBounds(1510, 180, 53, 23);

        jButton97.setBackground(java.awt.SystemColor.activeCaption);
        jButton97.setText("Blue");
        getContentPane().add(jButton97);
        jButton97.setBounds(1510, 160, 53, 23);

        jButton100.setBackground(new java.awt.Color(201, 222, 223));
        jButton100.setText("Blue");
        getContentPane().add(jButton100);
        jButton100.setBounds(1570, 140, 53, 23);

        jButton99.setBackground(java.awt.SystemColor.activeCaption);
        jButton99.setText("Blue");
        getContentPane().add(jButton99);
        jButton99.setBounds(1570, 160, 53, 23);

        jButton98.setBackground(new java.awt.Color(204, 165, 165));
        jButton98.setText("Blue");
        getContentPane().add(jButton98);
        jButton98.setBounds(1570, 180, 53, 23);

        jButton94.setBackground(new java.awt.Color(204, 204, 204));
        jButton94.setText("Blue");
        getContentPane().add(jButton94);
        jButton94.setBounds(1570, 200, 53, 23);

        jButton90.setBackground(new java.awt.Color(255, 255, 204));
        jButton90.setText("Blue");
        getContentPane().add(jButton90);
        jButton90.setBounds(1570, 220, 53, 23);

        jButton91.setBackground(new java.awt.Color(0, 204, 255));
        jButton91.setText("Blue");
        getContentPane().add(jButton91);
        jButton91.setBounds(1620, 220, 53, 23);

        jButton93.setBackground(new java.awt.Color(0, 204, 102));
        jButton93.setText("Blue");
        getContentPane().add(jButton93);
        jButton93.setBounds(1620, 200, 53, 23);

        jButton102.setBackground(new java.awt.Color(204, 204, 255));
        jButton102.setText("Blue");
        getContentPane().add(jButton102);
        jButton102.setBounds(1620, 180, 53, 23);

        jButton101.setBackground(java.awt.SystemColor.activeCaption);
        jButton101.setText("Blue");
        getContentPane().add(jButton101);
        jButton101.setBounds(1620, 160, 53, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
onjCheckBox1();      

DebitCredit= new ArrayList();

double amount=0.0;
double debit =parseDouble(posting.jTable10.getModel().getValueAt( posting.jTable10.convertRowIndexToModel(posting.jTable10.getSelectedRow()), 5).toString());

double credit =parseDouble(posting.jTable10.getModel().getValueAt( posting.jTable10.convertRowIndexToModel(posting.jTable10.getSelectedRow()), 6).toString());

if(debit>0){

amount=debit;
}else if(credit>0){

amount=credit;
}else{
        
     amount=0.0;   
        
        }

jTextField4.setText(fmt.formatForStatementNumbers(amount+""));  

jTextField3.setText(posting.jTable10.getModel().getValueAt( posting.jTable10.convertRowIndexToModel(posting.jTable10.getSelectedRow()), 3).toString());  
      
switch(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"))){
            
       case"General":
               if(dbq.fillMeWithAllAccounts(jTable1)){
                   
               JOptionPane.showMessageDialog(this, "Select the Debit Account");
               
fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", userId+"General.txt"),"773");    
 
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
     renderTableForAccounts();   
   
    sortTable(jTable1,jTextField8);
                      
          break; 
    case "Expense":
       if(dbq.fillMeWithAllExpenseAccounts(jTable1)){
               JOptionPane.showMessageDialog(this, "Select the Expense Account");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
       renderTableForAccounts();   
   
    sortTable(jTable1,jTextField8);   
        
        break;
     case "NewLoan":
         if(dbq.fillMeWithAllAccountsC(jTable1)){
               JOptionPane.showMessageDialog(this, "Select the Customer Account");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
       renderTableForAccounts();   
   
    sortTable(jTable1,jTextField8); 
             
         
         break;


          case "LoanPyt":
            if(dbq.fillMeWithAllLoanAmounts(jTable1)){
          JOptionPane.showMessageDialog(this, "Select the Loan To  Pay");
            }else{

                JOptionPane.showMessageDialog(this, "No Loans Found!!!!");
                return;}
        sortTable(jTable1,jTextField8); 
        HeaderRenderer headerx = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());

        int h1x=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1x<jTable1.getColumnModel().getColumnCount()){
        jTable1.getColumnModel().getColumn(h1x).setHeaderRenderer(headerx);

        if(h1x==0){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(100);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(90);

        }

        if(h1x==1){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(150);

        }

        if(h1x==2){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(250);

        }

        if(h1x==3){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==4){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==5){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==6){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==7){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==8){
        jTable1.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable1.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        h1x++;

        }
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT); 
        this.setFont(new Font("Arial",Font.PLAIN,17));


        if(col>=3&&col<=7){
        Number c = (Number)parseDouble(value.toString());
        String text = NumberFormat.format(c );
        this.setText(text);
        this.setHorizontalAlignment(RIGHT);
        }else{
        this.setText(value.toString());
        }
        if(col==8){

        this.setText(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(value.toString()));

        } 

        if (row%2==0) {
                    setBackground(jButton83.getBackground());
                    setForeground(jButton80.getBackground());
                    if(isSelected){
                        
                        setBackground(Color.CYAN);
                    }
                } else {
                    setBackground(jButton81.getBackground());
                    setForeground(jButton80.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                }

        return this;
        }
        });  
              
              
              break;
               case "Withdrawal":
              if(dbq.fillMeWithAllAccountsBank(jTable1)){
                   JOptionPane.showMessageDialog(this, "Select the Bank Account");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            renderTableForAccounts();   
   
    sortTable(jTable1,jTextField8);
              break;
               case "Deposit":
               if(dbq.fillMeWithAllAccountsBank(jTable1)){
                   JOptionPane.showMessageDialog(this, "Select the Bank Account");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            renderTableForAccounts();   
   
    sortTable(jTable1,jTextField8);
              break;
           case "Payable":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                case "ClearPayable":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
               case "Receivable":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
               case "Drawing":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
              case "ClearReceivable":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
               case "Salary":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                case "DepositPartPay":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
               case "WithdrawDepositPartPay":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
               case "Savings":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                   case "WithdrawSavings":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                  case "Capitalisation":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                case "Decaptalisation":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                    case "RecoverInterest":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                    case "WriteOffInterest":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                   case "RecoverPenalty":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                  case "WriteOffPenalty":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                case "RecoverAccumulatedInterest":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                 case "WriteOffAccumulatedInterest":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                case "BadLoansRecovered":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
                 case "HEFROI":
               if(dbq.fillMeWithAllAccountsC(jTable1)){
                 JOptionPane.showMessageDialog(this, "Select the Account Holder");
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
             sortTable(jTable1,jTextField8);
                      renderTableForAccounts(); 
              break;
   }
    }//GEN-LAST:event_formWindowOpened

    private void jTextField8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8KeyPressed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
          if(jCheckBox1.isSelected()){
   onjCheckBox1();
         
    }else if(!jCheckBox1.isSelected()){
    offjCheckBox1();
    }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
        if(jCheckBox1.getText().equalsIgnoreCase("CREATE NEW CUSTOMER")){
        
        if(!(jTextField2.getText().equalsIgnoreCase("")&&jTextField1.getText().equalsIgnoreCase(""))){
        
        
        createLedger();
        
        
     }else{
     
     JOptionPane.showMessageDialog(this, "Please first input both laste and first names before you proceed!!");
     
     
     }
        
        }else if(jCheckBox1.getText().equalsIgnoreCase("CREATE SUB-LEDGER")){
      if(!(jTextField2.getText().equalsIgnoreCase("")&&jTextField1.getText().equalsIgnoreCase(""))){
        
        
        createLedger();
        
        
     }else{
     
     JOptionPane.showMessageDialog(this, "Please first input both laste and first names before you proceed!!");
     
     
     }
     
     
     
     }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      jCheckBox1.setText("CREATE NEW CUSTOMER");
    jTextField2.setText("");
            jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed
public synchronized void createLedger(){
 String ledgerProduct="Empty Record";
if(jCheckBox1.getText().equalsIgnoreCase("CREATE SUB-LEDGER")){
    
ledgerProduct=ancdb.getProductName(jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 2).toString());
//    JOptionPane.showMessageDialog(this, jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 2).toString());
    if(!ledgerProduct.equals("Empty Record")){
        
//      JOptionPane.showMessageDialog(this, ledgerProduct);   
      
String newAccountNumber= "05"+dbq.getAccountMaster(jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 1).toString())+dbq.getProductCode(ledgerProduct); 

 if(createTheLedger(jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 1).toString(),newAccountNumber,dbq.getProductCode(ledgerProduct)+"",ledgerProduct,jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 1).toString().split("\\s")[1],jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 1).toString().split("\\s")[0])){
 
          JOptionPane.showMessageDialog(null, "SUB LEDGER SUCCESSFULLY CREATED");
          
         JOptionPane.showMessageDialog(null, "Another Ledger for"+" "+jTextField2.getText()+" "+"Account number"+"  "+newAccountNumber+" "+"and Account Name:"+"  "+jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 1).toString()+" "+"has been successfully created");
      
         
         ancdb.activateAccount(newAccountNumber,this);
         ancdb.createTriggerAccount(newAccountNumber);
        ancdb.updateStatus(newAccountNumber);
    
        switch(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"))){
        case "General":
        dbq.fillMeWithAllAccounts(jTable1);
          sortTable(jTable1,jTextField8);
        break;
        case "Expense":
        dbq.fillMeWithAllExpenseAccounts(jTable1);
        sortTable(jTable1,jTextField8);
        break;
        case "LoanPyt":
        dbq.fillMeWithAllLoanAmounts(jTable1);
         sortTable(jTable1,jTextField8);
        break;
        case "NewLoan":
        dbq.fillMeWithAllAccountsC(jTable1);
        sortTable(jTable1,jTextField8);
        break;
        default:
         dbq.fillMeWithAllAccounts(jTable1);   
             sortTable(jTable1,jTextField8);
            break;
        }
  
   
   
 }else{
  JOptionPane.showMessageDialog(this, "Ledger Creation failed!!"); 
 }

           }  else{
 JOptionPane.showMessageDialog(this, "Please first create the Product for  "+jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 2).toString());
 
 }
 
}else if(jCheckBox1.getText().equalsIgnoreCase("CREATE NEW CUSTOMER")){

        if ("".equals(jTextField2.getText())|"".equals(jTextField1.getText())){
         JOptionPane.showMessageDialog(this, "You need to put the first and last names before ledger Creation!!"); 
        }else{
        
           
             String accountName =jTextField1.getText()+" "+jTextField2.getText();
               String account="",productName="",ProductCode="";
           
                 
                  productName="Transaction Deposit";
                  
             ProductCode="10";
             
               account =ancdb.createAccountNumber("Customer Deposits",ProductCode,productName,this);
            
           
          
         if(createTheLedger(accountName,account,ProductCode,productName,jTextField2.getText(),jTextField1.getText())){
          
          JOptionPane.showMessageDialog(null, "LEDGER SUCCESSFULLY CREATED");
         JOptionPane.showMessageDialog(null, "Ledger for"+" "+jTextField2.getText()+" "+"Account number"+"  "+account+" "+"and Account Name:"+"  "+accountName+" "+"has been successfully created");
         
               ancdb.activateAccount(account,this);
         ancdb.createTriggerAccount(account);
        ancdb.updateStatus(account);
          sortTable(jTable1,jTextField8);
         switch(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"))){
        case "General":
        dbq.fillMeWithAllAccounts(jTable1);
       
         sortTable(jTable1,jTextField8);
        break;
        case "Expense":
        dbq.fillMeWithAllExpenseAccounts(jTable1);
         sortTable(jTable1,jTextField8);
        break;
        case "LoanPyt":
        dbq.fillMeWithAllLoanAmounts(jTable1);
         sortTable(jTable1,jTextField8);
        break;
        case "NewLoan":
        dbq.fillMeWithAllAccountsC(jTable1);
         sortTable(jTable1,jTextField8);
        break;
        default:
         dbq.fillMeWithAllAccounts(jTable1);   
             sortTable(jTable1,jTextField8);
            break;
        }
         } else{
         JOptionPane.showMessageDialog(this, "Creation of New Ledger Failed!!");
         }}
}else{
JOptionPane.showMessageDialog(this, "Please specify the action to make \"CREATE NEW LEDGER\" OR \"CREATE SUB LEDGER\"");

}


} 
    private void onjCheckBox1(){

 
    jLabel2.setVisible(true);
    jComboBox1.setVisible(true);
    jLabel3.setVisible(true);
    jTextField2.setVisible(true);
    jLabel1.setVisible(true);
    jTextField1.setVisible(true);
    jButton2.setVisible(true);
     String nema=posting.jTable10.getModel().getValueAt( posting.jTable10.convertRowIndexToModel(posting.jTable10.getSelectedRow()), 2).toString();  
            jTextField1.setText(nema.split("\\s")[0]);
 
jTextField2.setText(nema.replace(nema.split("\\s")[0], " ").trim()); 

    jCheckBox1.setText("CREATE NEW CUSTOMER");

}
   
   private void onjCheckBox1Sub(){

 
    jLabel2.setVisible(true);
    jComboBox1.setVisible(true);
    jLabel3.setVisible(true);
    jTextField2.setVisible(true);
    jLabel1.setVisible(true);
    jTextField1.setVisible(true);
    jButton2.setVisible(true);
     String nema=jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(jTable1.getSelectedRow()), 1).toString();  
            jTextField1.setText(nema.split("\\s")[0]);
 
jTextField2.setText(nema.replace(nema.split("\\s")[0], " ").trim()); 
    
            
    jCheckBox1.setText("CREATE SUB-LEDGER");

}  
    
    private void offjCheckBox1(){
 jLabel2.setVisible(false);
        jComboBox1.setVisible(false);
        jLabel3.setVisible(false);
        jTextField2.setVisible(false);
        jLabel1.setVisible(false);
        jTextField1.setVisible(false);
        jButton2.setVisible(false);
   
jCheckBox1.setText("CREATE NEW CUSTOMER/SUB-LEDGER");


}
    
    private void renderTableForAccounts(){
   
       
            sortTable(jTable1,jTextField8);
                         HeaderRenderer headerb = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());

        int hb1=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hb1<jTable1.getColumnModel().getColumnCount()){
            jTable1.getColumnModel().getColumn(hb1).setHeaderRenderer(headerb);

            if(hb1==0){
                jTable1.getColumnModel().getColumn(hb1).setMinWidth(0);
                jTable1.getColumnModel().getColumn(hb1).setMaxWidth(100);
                jTable1.getColumnModel().getColumn(hb1).setPreferredWidth(80);

            }

            if(hb1==1){
                jTable1.getColumnModel().getColumn(hb1).setMinWidth(0);
                jTable1.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                jTable1.getColumnModel().getColumn(hb1).setPreferredWidth(200);

            }
            
            if(hb1==2){
                jTable1.getColumnModel().getColumn(hb1).setMinWidth(0);
                jTable1.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                jTable1.getColumnModel().getColumn(hb1).setPreferredWidth(150);

            }
            
            if(hb1==3){
                jTable1.getColumnModel().getColumn(hb1).setMinWidth(0);
                jTable1.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                jTable1.getColumnModel().getColumn(hb1).setPreferredWidth(150);

            }
             if(hb1==4){
                jTable1.getColumnModel().getColumn(hb1).setMinWidth(0);
                jTable1.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                jTable1.getColumnModel().getColumn(hb1).setPreferredWidth(150);

            }
            hb1++;

        }
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                this.setHorizontalAlignment(JLabel.LEFT);

                if(row==table.getRowCount()-1){
                    this.setFont(new Font("Arial",Font.BOLD,20));
                }else{
                    
                    this.setFont(new Font("Arial",Font.PLAIN,18));
                }

                if(col==4){
                    Number c = (Number)parseDouble(value.toString());
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
                if (row%2==0) {
                    setBackground(jButton83.getBackground());
                    setForeground(jButton80.getBackground());
                    if(isSelected){
                        
                        setBackground(Color.CYAN);
                    }
                } else {
                    setBackground(jButton81.getBackground());
                    setForeground(jButton80.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                }

                return this;
            }
        });
  
   
   
   }

   private void sortTable(JTable table,JTextField textField){

   
    
TableRowSorter<TableModel> rowSorter  = new TableRowSorter<>(table.getModel());
                     
                      table.setRowSorter(rowSorter);
                     textField.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = textField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = textField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
              
            }

        });
    

}
 
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AddBulkUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AddBulkUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AddBulkUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AddBulkUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AddBulkUpload().setVisible(true);
//            }
//        });
//    }
 private boolean createTheLedger(String accountName,String account,String ProductCode,String productName,String firstName,String lastName){
     
//     JOptionPane.showMessageDialog(this, accountName+";"+account+";"+ProductCode+";"+productName+""+firstName+";"+lastName);
accountDetails=new ArrayList<>();   List bga= new ArrayList<>();
         customerDetails=new ArrayList<>();
        
         bga.add(0, accountName);
         bga.add(1, account);
          bga.add(2, "0");
           bga.add(3, "0");
            bga.add(4, "0");
           bga.add(5, "0");
            bga.add(6, "NB");
            
     accountDetails.add(0, "Credits");//Account cat 1:0
     accountDetails.add(1, "Liabilities");//Account cat 2:1
      accountDetails.add(2, "Current Liabilities & Provisions"); //Account cat 3:2
      accountDetails.add(3, "Current Liabilities");//Account cat 4:3
       accountDetails.add(4, "Customer Deposits");//Account cat 5:4
      accountDetails.add(5, account);  //Account Number:5
     accountDetails.add(6, "0.0"); //Account balance:6  
       accountDetails.add(7,  accountName);//Account Name:7
       accountDetails.add(8,  "For holding Customer/Member account balance");//Account Purpose:8
       accountDetails.add(9, fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "activeUserId.txt")));//User Id:9
            accountDetails.add(10,  ProductCode);//Product Code:10
       accountDetails.add(11, productName);//Product Name:9
       ancdb.createAccount(accountDetails); 
        updateLoans initialUpdate=new updateLoans(userId);
          initialUpdate.createIndividualPostingName(account);
          dbq.loanBoGa(bga);
          
           customerDetails.add(0,account.substring(2, 9));
          customerDetails.add(1, "");  
          customerDetails.add(2, firstName);
          customerDetails.add(3, lastName);
          customerDetails.add(4, "");
          customerDetails.add(5, sdf.format(new Date(System.currentTimeMillis())));
          customerDetails.add(6, "");
          customerDetails.add(7, "");
          customerDetails.add(8, "");
          customerDetails.add(9, "");
          customerDetails.add(10,"");
          customerDetails.add(11, "");
           customerDetails.add(12, "");
          customerDetails.add(13, "");
           customerDetails.add(14, "");
          customerDetails.add(15, "");
           customerDetails.add(16,  "");
          customerDetails.add(17, "");
          customerDetails.add(18, "0.0");
          customerDetails.add(19, "0");
           customerDetails.add(20, ""); 
          customerDetails.add(21, "");
           customerDetails.add(22, "");
          customerDetails.add(23, "");
           customerDetails.add(24, "");
          customerDetails.add(25, "");
           customerDetails.add(26, "");
          customerDetails.add(27, "");
           customerDetails.add(28, "");
          customerDetails.add(29, "");
           customerDetails.add(30, "");
          customerDetails.add(31, "");
           customerDetails.add(32, "");
          customerDetails.add(33, "");
          customerDetails.add(34, sdf.format(new Date(System.currentTimeMillis())));
          customerDetails.add(35, "");
           customerDetails.add(36, account);
          customerDetails.add(37, accountName);
          customerDetails.add(38, fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "activeUserId.txt")));
           customerDetails.add(39, fios.createFileName("resources", "UserPhoto", "googo.jpg"));
       
          
      return    ancdb.createCustomer(customerDetails); 
}    
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton100;
    private javax.swing.JButton jButton101;
    private javax.swing.JButton jButton102;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton80;
    private javax.swing.JButton jButton81;
    private javax.swing.JButton jButton82;
    private javax.swing.JButton jButton83;
    private javax.swing.JButton jButton84;
    private javax.swing.JButton jButton85;
    private javax.swing.JButton jButton86;
    private javax.swing.JButton jButton87;
    private javax.swing.JButton jButton88;
    private javax.swing.JButton jButton89;
    private javax.swing.JButton jButton90;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JButton jButton94;
    private javax.swing.JButton jButton95;
    private javax.swing.JButton jButton96;
    private javax.swing.JButton jButton97;
    private javax.swing.JButton jButton98;
    private javax.swing.JButton jButton99;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        if (me.getClickCount()==2){
        if(me.getSource() == jTable1){

        int counter=fios.intFileReader(fios.createFileName("logOut", "completeShutDown", userId+"GeneralCounter.txt"))+1;

        fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", userId+"GeneralCounter.txt"),counter+""); 

        int selectedRow =jTable1.getSelectedRow();
        int selectedColumn =jTable1.getSelectedColumn();
        if (selectedRow > -1&&selectedColumn>-1)
	   {
        switch(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"))){

        case"General":
 
       if(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", userId+"General.txt"))==773){
       
         DebitCredit.add( jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
           
       fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", userId+"General.txt"),"7737"); 
       
       JOptionPane.showMessageDialog(this, "Please Select Credit AccountNumber");
       jTable1.removeAll();
       
       jTable1.revalidate();
       dbq.fillMeWithAllAccounts(jTable1);
       jPanel1.revalidate();
       jTextField8.revalidate();
       sortTable(jTable1,jTextField8);
       }    
            
          if(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", userId+"GeneralCounter.txt"))>2){  
              
        if(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", userId+"General.txt"))==7737){
       
          DebitCredit.add( jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
           
       fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", userId+"General.txt"),"77"); 
       
       
        List dataInToPostBulk=new ArrayList(); 
        dataInToPostBulk.add(theBulkDetails.get(1));//trn date
        dataInToPostBulk.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulk.add(theBulkDetails.get(3));//trn code
        dataInToPostBulk.add(theBulkDetails.get(4));//
        dataInToPostBulk.add(theBulkDetails.get(5));
        dataInToPostBulk.add(theBulkDetails.get(6));
        dataInToPostBulk.add(theBulkDetails.get(7));
        dataInToPostBulk.add(theBulkDetails.get(8));
        dataInToPostBulk.add(theBulkDetails.get(9));
        dataInToPostBulk.add(theBulkDetails.get(10));
        dataInToPostBulk.add(theBulkDetails.get(11));
        dataInToPostBulk.add(DebitCredit.get(0).toString());
        dataInToPostBulk.add(DebitCredit.get(1).toString());
        dataInToPostBulk.add(theBulkDetails.get(0).toString());
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulk);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
       }    
           fios.deleteFileExistance(fios.createFileName("logOut", "completeShutDown", userId+"GeneralCounter.txt"));
           if(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", userId+"General.txt"))==77){  
               dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
        this.dispose();    
          }
          }
        break; 
        case "Expense":
            
         DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
          DebitCredit.add("01123000110");
            
         List dataInToPostBulkx=new ArrayList(); 
        dataInToPostBulkx.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkx.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkx.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkx.add(theBulkDetails.get(4));//
        dataInToPostBulkx.add(theBulkDetails.get(5));
        dataInToPostBulkx.add(theBulkDetails.get(6));
        dataInToPostBulkx.add(theBulkDetails.get(7));
        dataInToPostBulkx.add(theBulkDetails.get(8));
        dataInToPostBulkx.add(theBulkDetails.get(9));
        dataInToPostBulkx.add(theBulkDetails.get(10));
        dataInToPostBulkx.add(theBulkDetails.get(11));
        dataInToPostBulkx.add(DebitCredit.get(0).toString());
        dataInToPostBulkx.add(DebitCredit.get(1).toString());
        dataInToPostBulkx.add(theBulkDetails.get(0).toString());
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
        dataInToPostBulkx.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkx);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "NewLoan":
            
             if(loan.testTable("newloan"+jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim())){
            
            JOptionPane.showMessageDialog(this, dbq.AccountName(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim())+" already has a loan on this Account Number\nPleas open a subledger to create another loan");
            this.onjCheckBox1Sub();
            return;
            }else{
                 this.offjCheckBox1();
          DebitCredit.add("01128000110");
          DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
            
         List dataInToPostBulkxx=new ArrayList(); 
        dataInToPostBulkxx.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkxx.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkxx.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkxx.add(theBulkDetails.get(4));//
        dataInToPostBulkxx.add(theBulkDetails.get(5));
        dataInToPostBulkxx.add(theBulkDetails.get(6));
        dataInToPostBulkxx.add(theBulkDetails.get(7));
        dataInToPostBulkxx.add(theBulkDetails.get(8));
        dataInToPostBulkxx.add(theBulkDetails.get(9));
        dataInToPostBulkxx.add(theBulkDetails.get(10));
        dataInToPostBulkxx.add(theBulkDetails.get(11));
        dataInToPostBulkxx.add(DebitCredit.get(0).toString());
        dataInToPostBulkxx.add(DebitCredit.get(1).toString());
        dataInToPostBulkxx.add(theBulkDetails.get(0).toString());
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
        dataInToPostBulkxx.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkxx);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
         dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
          this.dispose(); 
             }

        break;


        case "LoanPyt":
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 1).toString().trim());
          DebitCredit.add("01128000110");
            
         List dataInToPostBulkx1=new ArrayList(); 
        dataInToPostBulkx1.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkx1.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkx1.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkx1.add(theBulkDetails.get(4));//
        dataInToPostBulkx1.add(theBulkDetails.get(5));
        dataInToPostBulkx1.add(theBulkDetails.get(6));
        dataInToPostBulkx1.add(theBulkDetails.get(7));
        dataInToPostBulkx1.add(theBulkDetails.get(8));
        dataInToPostBulkx1.add(theBulkDetails.get(9));
        dataInToPostBulkx1.add(theBulkDetails.get(10));
        dataInToPostBulkx1.add(theBulkDetails.get(11));
        dataInToPostBulkx1.add(DebitCredit.get(0).toString());
        dataInToPostBulkx1.add(DebitCredit.get(1).toString());
        dataInToPostBulkx1.add(theBulkDetails.get(0).toString());
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
        dataInToPostBulkx1.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkx1);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "Withdrawal":
              DebitCredit.add("01123000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
        
            
         List dataInToPostBulkx1w=new ArrayList(); 
        dataInToPostBulkx1w.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkx1w.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkx1w.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkx1w.add(theBulkDetails.get(4));//
        dataInToPostBulkx1w.add(theBulkDetails.get(5));
        dataInToPostBulkx1w.add(theBulkDetails.get(6));
        dataInToPostBulkx1w.add(theBulkDetails.get(7));
        dataInToPostBulkx1w.add(theBulkDetails.get(8));
        dataInToPostBulkx1w.add(theBulkDetails.get(9));
        dataInToPostBulkx1w.add(theBulkDetails.get(10));
        dataInToPostBulkx1w.add(theBulkDetails.get(11));
        dataInToPostBulkx1w.add(DebitCredit.get(0).toString());
        dataInToPostBulkx1w.add(DebitCredit.get(1).toString());
        dataInToPostBulkx1w.add(theBulkDetails.get(0).toString());
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
        dataInToPostBulkx1w.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkx1w);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "Deposit":
 
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
        DebitCredit.add("01123000110");
            
         List dataInToPostBulkx1d=new ArrayList(); 
        dataInToPostBulkx1d.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkx1d.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkx1d.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkx1d.add(theBulkDetails.get(4));//
        dataInToPostBulkx1d.add(theBulkDetails.get(5));
        dataInToPostBulkx1d.add(theBulkDetails.get(6));
        dataInToPostBulkx1d.add(theBulkDetails.get(7));
        dataInToPostBulkx1d.add(theBulkDetails.get(8));
        dataInToPostBulkx1d.add(theBulkDetails.get(9));
        dataInToPostBulkx1d.add(theBulkDetails.get(10));
        dataInToPostBulkx1d.add(theBulkDetails.get(11));
        dataInToPostBulkx1d.add(DebitCredit.get(0).toString());
        dataInToPostBulkx1d.add(DebitCredit.get(1).toString());
        dataInToPostBulkx1d.add(theBulkDetails.get(0).toString());
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
        dataInToPostBulkx1d.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkx1d);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "Payable":

        DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
        DebitCredit.add("05500000110");
            
         List dataInToPostBulkxpy=new ArrayList(); 
        dataInToPostBulkxpy.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkxpy.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkxpy.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkxpy.add(theBulkDetails.get(4));//
        dataInToPostBulkxpy.add(theBulkDetails.get(5));
        dataInToPostBulkxpy.add(theBulkDetails.get(6));
        dataInToPostBulkxpy.add(theBulkDetails.get(7));
        dataInToPostBulkxpy.add(theBulkDetails.get(8));
        dataInToPostBulkxpy.add(theBulkDetails.get(9));
        dataInToPostBulkxpy.add(theBulkDetails.get(10));
        dataInToPostBulkxpy.add(theBulkDetails.get(11));
        dataInToPostBulkxpy.add(DebitCredit.get(0).toString());
        dataInToPostBulkxpy.add(DebitCredit.get(1).toString());
        dataInToPostBulkxpy.add(theBulkDetails.get(0).toString());
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
        dataInToPostBulkxpy.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkxpy);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "ClearPayable":
              DebitCredit.add("05500000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
      
            
         List dataInToPostBulkxcpy=new ArrayList(); 
        dataInToPostBulkxcpy.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkxcpy.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkxcpy.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkxcpy.add(theBulkDetails.get(4));//
        dataInToPostBulkxcpy.add(theBulkDetails.get(5));
        dataInToPostBulkxcpy.add(theBulkDetails.get(6));
        dataInToPostBulkxcpy.add(theBulkDetails.get(7));
        dataInToPostBulkxcpy.add(theBulkDetails.get(8));
        dataInToPostBulkxcpy.add(theBulkDetails.get(9));
        dataInToPostBulkxcpy.add(theBulkDetails.get(10));
        dataInToPostBulkxcpy.add(theBulkDetails.get(11));
        dataInToPostBulkxcpy.add(DebitCredit.get(0).toString());
        dataInToPostBulkxcpy.add(DebitCredit.get(1).toString());
        dataInToPostBulkxcpy.add(theBulkDetails.get(0).toString());
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
        dataInToPostBulkxcpy.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkxcpy);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "Receivable":
   DebitCredit.add("01131000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulkrc=new ArrayList(); 
        dataInToPostBulkrc.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkrc.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkrc.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkrc.add(theBulkDetails.get(4));//
        dataInToPostBulkrc.add(theBulkDetails.get(5));
        dataInToPostBulkrc.add(theBulkDetails.get(6));
        dataInToPostBulkrc.add(theBulkDetails.get(7));
        dataInToPostBulkrc.add(theBulkDetails.get(8));
        dataInToPostBulkrc.add(theBulkDetails.get(9));
        dataInToPostBulkrc.add(theBulkDetails.get(10));
        dataInToPostBulkrc.add(theBulkDetails.get(11));
        dataInToPostBulkrc.add(DebitCredit.get(0).toString());
        dataInToPostBulkrc.add(DebitCredit.get(1).toString());
        dataInToPostBulkrc.add(theBulkDetails.get(0).toString());
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
        dataInToPostBulkrc.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkrc);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        
        
                 case "Drawing":
   DebitCredit.add("04408000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulkrcd=new ArrayList(); 
        dataInToPostBulkrcd.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkrcd.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkrcd.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkrcd.add(theBulkDetails.get(4));//
        dataInToPostBulkrcd.add(theBulkDetails.get(5));
        dataInToPostBulkrcd.add(theBulkDetails.get(6));
        dataInToPostBulkrcd.add(theBulkDetails.get(7));
        dataInToPostBulkrcd.add(theBulkDetails.get(8));
        dataInToPostBulkrcd.add(theBulkDetails.get(9));
        dataInToPostBulkrcd.add(theBulkDetails.get(10));
        dataInToPostBulkrcd.add(theBulkDetails.get(11));
        dataInToPostBulkrcd.add(DebitCredit.get(0).toString());
        dataInToPostBulkrcd.add(DebitCredit.get(1).toString());
        dataInToPostBulkrcd.add(theBulkDetails.get(0).toString());
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
        dataInToPostBulkrcd.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkrcd);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose(); 
        break;
        case "ClearReceivable":

DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
 DebitCredit.add("01131000110");
         List dataInToPostBulkrcv=new ArrayList(); 
        dataInToPostBulkrcv.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkrcv.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkrcv.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkrcv.add(theBulkDetails.get(4));//
        dataInToPostBulkrcv.add(theBulkDetails.get(5));
        dataInToPostBulkrcv.add(theBulkDetails.get(6));
        dataInToPostBulkrcv.add(theBulkDetails.get(7));
        dataInToPostBulkrcv.add(theBulkDetails.get(8));
        dataInToPostBulkrcv.add(theBulkDetails.get(9));
        dataInToPostBulkrcv.add(theBulkDetails.get(10));
        dataInToPostBulkrcv.add(theBulkDetails.get(11));
        dataInToPostBulkrcv.add(DebitCredit.get(0).toString());
        dataInToPostBulkrcv.add(DebitCredit.get(1).toString());
        dataInToPostBulkrcv.add(theBulkDetails.get(0).toString());
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
        dataInToPostBulkrcv.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkrcv);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "Salary":
             DebitCredit.add("02253000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulksa=new ArrayList(); 
        dataInToPostBulksa.add(theBulkDetails.get(1));//trn date
        dataInToPostBulksa.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulksa.add(theBulkDetails.get(3));//trn code
        dataInToPostBulksa.add(theBulkDetails.get(4));//
        dataInToPostBulksa.add(theBulkDetails.get(5));
        dataInToPostBulksa.add(theBulkDetails.get(6));
        dataInToPostBulksa.add(theBulkDetails.get(7));
        dataInToPostBulksa.add(theBulkDetails.get(8));
        dataInToPostBulksa.add(theBulkDetails.get(9));
        dataInToPostBulksa.add(theBulkDetails.get(10));
        dataInToPostBulksa.add(theBulkDetails.get(11));
        dataInToPostBulksa.add(DebitCredit.get(0).toString());
        dataInToPostBulksa.add(DebitCredit.get(1).toString());
        dataInToPostBulksa.add(theBulkDetails.get(0).toString());
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
        dataInToPostBulksa.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulksa);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "DepositPartPay":
 DebitCredit.add("01123000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulkpp=new ArrayList(); 
        dataInToPostBulkpp.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkpp.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkpp.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkpp.add(theBulkDetails.get(4));//
        dataInToPostBulkpp.add(theBulkDetails.get(5));
        dataInToPostBulkpp.add(theBulkDetails.get(6));
        dataInToPostBulkpp.add(theBulkDetails.get(7));
        dataInToPostBulkpp.add(theBulkDetails.get(8));
        dataInToPostBulkpp.add(theBulkDetails.get(9));
        dataInToPostBulkpp.add(theBulkDetails.get(10));
        dataInToPostBulkpp.add(theBulkDetails.get(11));
        dataInToPostBulkpp.add(DebitCredit.get(0).toString());
        dataInToPostBulkpp.add(DebitCredit.get(1).toString());
        dataInToPostBulkpp.add(theBulkDetails.get(0).toString());
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
        dataInToPostBulkpp.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkpp);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "WithdrawDepositPartPay":

DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
DebitCredit.add("01123000110");
         List dataInToPostBulkppw=new ArrayList(); 
        dataInToPostBulkppw.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkppw.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkppw.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkppw.add(theBulkDetails.get(4));//
        dataInToPostBulkppw.add(theBulkDetails.get(5));
        dataInToPostBulkppw.add(theBulkDetails.get(6));
        dataInToPostBulkppw.add(theBulkDetails.get(7));
        dataInToPostBulkppw.add(theBulkDetails.get(8));
        dataInToPostBulkppw.add(theBulkDetails.get(9));
        dataInToPostBulkppw.add(theBulkDetails.get(10));
        dataInToPostBulkppw.add(theBulkDetails.get(11));
        dataInToPostBulkppw.add(DebitCredit.get(0).toString());
        dataInToPostBulkppw.add(DebitCredit.get(1).toString());
        dataInToPostBulkppw.add(theBulkDetails.get(0).toString());
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
        dataInToPostBulkppw.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkppw);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "Savings":
DebitCredit.add("01123000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulksav=new ArrayList(); 
        dataInToPostBulksav.add(theBulkDetails.get(1));//trn date
        dataInToPostBulksav.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulksav.add(theBulkDetails.get(3));//trn code
        dataInToPostBulksav.add(theBulkDetails.get(4));//
        dataInToPostBulksav.add(theBulkDetails.get(5));
        dataInToPostBulksav.add(theBulkDetails.get(6));
        dataInToPostBulksav.add(theBulkDetails.get(7));
        dataInToPostBulksav.add(theBulkDetails.get(8));
        dataInToPostBulksav.add(theBulkDetails.get(9));
        dataInToPostBulksav.add(theBulkDetails.get(10));
        dataInToPostBulksav.add(theBulkDetails.get(11));
        dataInToPostBulksav.add(DebitCredit.get(0).toString());
        dataInToPostBulksav.add(DebitCredit.get(1).toString());
        dataInToPostBulksav.add(theBulkDetails.get(0).toString());
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
        dataInToPostBulksav.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulksav);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "WithdrawSavings":
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
DebitCredit.add("01123000110");
         List dataInToPostBulkppws=new ArrayList(); 
        dataInToPostBulkppws.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkppws.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkppws.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkppws.add(theBulkDetails.get(4));//
        dataInToPostBulkppws.add(theBulkDetails.get(5));
        dataInToPostBulkppws.add(theBulkDetails.get(6));
        dataInToPostBulkppws.add(theBulkDetails.get(7));
        dataInToPostBulkppws.add(theBulkDetails.get(8));
        dataInToPostBulkppws.add(theBulkDetails.get(9));
        dataInToPostBulkppws.add(theBulkDetails.get(10));
        dataInToPostBulkppws.add(theBulkDetails.get(11));
        dataInToPostBulkppws.add(DebitCredit.get(0).toString());
        dataInToPostBulkppws.add(DebitCredit.get(1).toString());
        dataInToPostBulkppws.add(theBulkDetails.get(0).toString());
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
        dataInToPostBulkppws.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkppws);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "Capitalisation":
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
DebitCredit.add("04400000110");
         List dataInToPostBulkppwsc=new ArrayList(); 
        dataInToPostBulkppwsc.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkppwsc.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkppwsc.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkppwsc.add(theBulkDetails.get(4));//
        dataInToPostBulkppwsc.add(theBulkDetails.get(5));
        dataInToPostBulkppwsc.add(theBulkDetails.get(6));
        dataInToPostBulkppwsc.add(theBulkDetails.get(7));
        dataInToPostBulkppwsc.add(theBulkDetails.get(8));
        dataInToPostBulkppwsc.add(theBulkDetails.get(9));
        dataInToPostBulkppwsc.add(theBulkDetails.get(10));
        dataInToPostBulkppwsc.add(theBulkDetails.get(11));
        dataInToPostBulkppwsc.add(DebitCredit.get(0).toString());
        dataInToPostBulkppwsc.add(DebitCredit.get(1).toString());
        dataInToPostBulkppwsc.add(theBulkDetails.get(0).toString());
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
        dataInToPostBulkppwsc.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkppwsc);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "Decaptalisation":
            DebitCredit.add("04400000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulkde=new ArrayList(); 
        dataInToPostBulkde.add(theBulkDetails.get(1));//trn date
        dataInToPostBulkde.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulkde.add(theBulkDetails.get(3));//trn code
        dataInToPostBulkde.add(theBulkDetails.get(4));//
        dataInToPostBulkde.add(theBulkDetails.get(5));
        dataInToPostBulkde.add(theBulkDetails.get(6));
        dataInToPostBulkde.add(theBulkDetails.get(7));
        dataInToPostBulkde.add(theBulkDetails.get(8));
        dataInToPostBulkde.add(theBulkDetails.get(9));
        dataInToPostBulkde.add(theBulkDetails.get(10));
        dataInToPostBulkde.add(theBulkDetails.get(11));
        dataInToPostBulkde.add(DebitCredit.get(0).toString());
        dataInToPostBulkde.add(DebitCredit.get(1).toString());
        dataInToPostBulkde.add(theBulkDetails.get(0).toString());
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
        dataInToPostBulkde.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulkde);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "RecoverInterest":
 
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
DebitCredit.add("03301000110");
         List dataInToPostBulInt=new ArrayList(); 
        dataInToPostBulInt.add(theBulkDetails.get(1));//trn date
        dataInToPostBulInt.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulInt.add(theBulkDetails.get(3));//trn code
        dataInToPostBulInt.add(theBulkDetails.get(4));//
        dataInToPostBulInt.add(theBulkDetails.get(5));
        dataInToPostBulInt.add(theBulkDetails.get(6));
        dataInToPostBulInt.add(theBulkDetails.get(7));
        dataInToPostBulInt.add(theBulkDetails.get(8));
        dataInToPostBulInt.add(theBulkDetails.get(9));
        dataInToPostBulInt.add(theBulkDetails.get(10));
        dataInToPostBulInt.add(theBulkDetails.get(11));
        dataInToPostBulInt.add(DebitCredit.get(0).toString());
        dataInToPostBulInt.add(DebitCredit.get(1).toString());
        dataInToPostBulInt.add(theBulkDetails.get(0).toString());
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
        dataInToPostBulInt.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulInt);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "WriteOffInterest":
            DebitCredit.add("03301000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulIntw=new ArrayList(); 
        dataInToPostBulIntw.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntw.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntw.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntw.add(theBulkDetails.get(4));//
        dataInToPostBulIntw.add(theBulkDetails.get(5));
        dataInToPostBulIntw.add(theBulkDetails.get(6));
        dataInToPostBulIntw.add(theBulkDetails.get(7));
        dataInToPostBulIntw.add(theBulkDetails.get(8));
        dataInToPostBulIntw.add(theBulkDetails.get(9));
        dataInToPostBulIntw.add(theBulkDetails.get(10));
        dataInToPostBulIntw.add(theBulkDetails.get(11));
        dataInToPostBulIntw.add(DebitCredit.get(0).toString());
        dataInToPostBulIntw.add(DebitCredit.get(1).toString());
        dataInToPostBulIntw.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
        dataInToPostBulIntw.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntw);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

    dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "RecoverPenalty":

DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
DebitCredit.add("03312000110");
         List dataInToPostBulIntwP=new ArrayList(); 
        dataInToPostBulIntwP.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntwP.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntwP.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntwP.add(theBulkDetails.get(4));//
        dataInToPostBulIntwP.add(theBulkDetails.get(5));
        dataInToPostBulIntwP.add(theBulkDetails.get(6));
        dataInToPostBulIntwP.add(theBulkDetails.get(7));
        dataInToPostBulIntwP.add(theBulkDetails.get(8));
        dataInToPostBulIntwP.add(theBulkDetails.get(9));
        dataInToPostBulIntwP.add(theBulkDetails.get(10));
        dataInToPostBulIntwP.add(theBulkDetails.get(11));
        dataInToPostBulIntwP.add(DebitCredit.get(0).toString());
        dataInToPostBulIntwP.add(DebitCredit.get(1).toString());
        dataInToPostBulIntwP.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
        dataInToPostBulIntwP.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntwP);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

   dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "WriteOffPenalty":
            DebitCredit.add("03312000110");
DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulIntwPW=new ArrayList(); 
        dataInToPostBulIntwPW.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntwPW.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntwPW.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntwPW.add(theBulkDetails.get(4));//
        dataInToPostBulIntwPW.add(theBulkDetails.get(5));
        dataInToPostBulIntwPW.add(theBulkDetails.get(6));
        dataInToPostBulIntwPW.add(theBulkDetails.get(7));
        dataInToPostBulIntwPW.add(theBulkDetails.get(8));
        dataInToPostBulIntwPW.add(theBulkDetails.get(9));
        dataInToPostBulIntwPW.add(theBulkDetails.get(10));
        dataInToPostBulIntwPW.add(theBulkDetails.get(11));
        dataInToPostBulIntwPW.add(DebitCredit.get(0).toString());
        dataInToPostBulIntwPW.add(DebitCredit.get(1).toString());
        dataInToPostBulIntwPW.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
        dataInToPostBulIntwPW.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntwPW);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

   dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "RecoverAccumulatedInterest":
         DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
DebitCredit.add("03311000110");
         List dataInToPostBulIntwPAI=new ArrayList(); 
        dataInToPostBulIntwPAI.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntwPAI.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntwPAI.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntwPAI.add(theBulkDetails.get(4));//
        dataInToPostBulIntwPAI.add(theBulkDetails.get(5));
        dataInToPostBulIntwPAI.add(theBulkDetails.get(6));
        dataInToPostBulIntwPAI.add(theBulkDetails.get(7));
        dataInToPostBulIntwPAI.add(theBulkDetails.get(8));
        dataInToPostBulIntwPAI.add(theBulkDetails.get(9));
        dataInToPostBulIntwPAI.add(theBulkDetails.get(10));
        dataInToPostBulIntwPAI.add(theBulkDetails.get(11));
        dataInToPostBulIntwPAI.add(DebitCredit.get(0).toString());
        dataInToPostBulIntwPAI.add(DebitCredit.get(1).toString());
        dataInToPostBulIntwPAI.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
        dataInToPostBulIntwPAI.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntwPAI);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

   dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "WriteOffAccumulatedInterest":
            DebitCredit.add("03311000110");
  DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());

         List dataInToPostBulIntwPAIW=new ArrayList(); 
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(4));//
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(5));
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(6));
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(7));
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(8));
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(9));
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(10));
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(11));
        dataInToPostBulIntwPAIW.add(DebitCredit.get(0).toString());
        dataInToPostBulIntwPAIW.add(DebitCredit.get(1).toString());
        dataInToPostBulIntwPAIW.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
        dataInToPostBulIntwPAIW.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntwPAIW);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

   dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "BadLoansRecovered":

  DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
 DebitCredit.add("03318000110");
         List dataInToPostBulIntwbd=new ArrayList(); 
        dataInToPostBulIntwbd.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntwbd.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntwbd.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntwbd.add(theBulkDetails.get(4));//
        dataInToPostBulIntwbd.add(theBulkDetails.get(5));
        dataInToPostBulIntwbd.add(theBulkDetails.get(6));
        dataInToPostBulIntwbd.add(theBulkDetails.get(7));
        dataInToPostBulIntwbd.add(theBulkDetails.get(8));
        dataInToPostBulIntwbd.add(theBulkDetails.get(9));
        dataInToPostBulIntwbd.add(theBulkDetails.get(10));
        dataInToPostBulIntwbd.add(theBulkDetails.get(11));
        dataInToPostBulIntwbd.add(DebitCredit.get(0).toString());
        dataInToPostBulIntwbd.add(DebitCredit.get(1).toString());
        dataInToPostBulIntwbd.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
        dataInToPostBulIntwbd.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntwbd);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

   dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
        case "HEFROI":
            DebitCredit.add("02277000110");
 DebitCredit.add(jTable1.getModel().getValueAt(jTable1.convertRowIndexToModel(selectedRow), 2).toString().trim());
 
         List dataInToPostBulIntwRi=new ArrayList(); 
        dataInToPostBulIntwRi.add(theBulkDetails.get(1));//trn date
        dataInToPostBulIntwRi.add(theBulkDetails.get(2));//trn Type
        dataInToPostBulIntwRi.add(theBulkDetails.get(3));//trn code
        dataInToPostBulIntwRi.add(theBulkDetails.get(4));//
        dataInToPostBulIntwRi.add(theBulkDetails.get(5));
        dataInToPostBulIntwRi.add(theBulkDetails.get(6));
        dataInToPostBulIntwRi.add(theBulkDetails.get(7));
        dataInToPostBulIntwRi.add(theBulkDetails.get(8));
        dataInToPostBulIntwRi.add(theBulkDetails.get(9));
        dataInToPostBulIntwRi.add(theBulkDetails.get(10));
        dataInToPostBulIntwRi.add(theBulkDetails.get(11));
        dataInToPostBulIntwRi.add(DebitCredit.get(0).toString());
        dataInToPostBulIntwRi.add(DebitCredit.get(1).toString());
        dataInToPostBulIntwRi.add(theBulkDetails.get(0).toString());
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
        dataInToPostBulIntwRi.add("NA");
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(1).toString());
        dbq.addItemBulkUpload(dataInToPostBulIntwRi);
//        JOptionPane.showMessageDialog(this, theBulkDetails.get(0).toString());
        dbq.updateTheId(theBulkDetails.get(0).toString());
        
        dbq.loadAllBulkUploadsSecond(posting.jTable9);

   dbq.loadAllBulkUploads(posting.jTable10);
    
          this.dispose();
        break;
   }    
               
               
               
               
               
           }        
               
               
               
               
        
           }}
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {
     
    }

    @Override
    public void mouseEntered(MouseEvent e) {
      
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    @Override
    public void updateText(String text) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    
    }
}
