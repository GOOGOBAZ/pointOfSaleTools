package googo.pmms.project2.frames;


import googo.pmms.project2.accountsHelper.BatchPosting;
import googo.pmms.project2.accountsHelper.BatchPosting2;
import googo.pmms.project2.accountsHelper.BatchPostingHelper;
import googo.pmms.project2.accountsHelper.BatchRefNumber;
import googo.pmms.project2.accountsHelper.BiodataHelperRenderer;
import googo.pmms.project2.accountsHelper.CreatingFolders;
import googo.pmms.project2.reportsHelper.BalanceSheet;
import googo.pmms.project2.accountsHelper.Formartter;
import googo.pmms.project2.accountsHelper.FormattingUrlData;
import googo.pmms.project2.frameHelper.IUpdateText;
import googo.pmms.project2.accountsHelper.PostingFieldValues;
import googo.pmms.project2.accountsHelper.PostingMain;
import googo.pmms.project2.accountsHelper.PostingModal;
import googo.pmms.project2.accountsHelper.SendSms;
import googo.pmms.project2.databases.ReportsDatabase;
import googo.pmms.project2.databases.DatabaseQuaries;
import googo.pmms.project2.databases.AccountNumberCreationDataBase;
import googo.pmms.project2.databases.loanDatabaseQuaries;
import googo.pmms.project2.accountsHelper.fileInputOutPutStreams;
import googo.pmms.project2.accountsHelper.updateLoans;
import googo.pmms.project2.databaseConnectors.JdbcConnector;
import googo.pmms.project2.databases.BackUpRestoreDB;
import googo.pmms.project2.email.SmsUtility;
import googo.pmms.project2.email.TestConnectivity;
import googo.pmms.project2.excel.CreateExcelWorkBook;
import googo.pmms.project2.frameHelper.HeaderRenderer;
import googo.pmms.project2.frameHelper.ListDataModel;
import googo.pmms.project2.frameHelper.ListDataModel_11;
import googo.pmms.project2.frameHelper.ListDataModel_12;
import googo.pmms.project2.frameHelper.PureListModel;
import googo.pmms.project2.frameHelper.Resource;
import googo.pmms.project2.frameHelper.bulkUploadPostingModel;
import googo.pmms.project2.frameHelper.listComboModel;
import googo.pmms.project2.loanHelper.Amortization;
import googo.pmms.project2.reportsHelper.LoanSavingsSharesOthers;
import googo.pmms.project2.reportsHelper.OtherLoanReports;
import googo.pmms.project2.reportsHelper.SmsEndOfDayReport;
import googo.pmms.project2.reportsHelper.trialBalance;
import googo.pmms.project2.smallFrames.BorrowingCharacteristics;
import googo.pmms.project2.smallFrames.ClosingNotes;
import googo.pmms.project2.smallFrames.PrintReceiptAuto;
import googo.pmms.project2.smallFrames.QuickReports;
import java.awt.*;
import static java.awt.Component.CENTER_ALIGNMENT;
import static java.awt.Component.LEFT_ALIGNMENT;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import java.text.*;
import java.time.YearMonth;
import java.util.*;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *    
 * @author Stanchart
 */
public class PostingEntryWindow extends JFrame implements BatchRefNumber, MouseListener, IUpdateText, ActionListener, KeyListener,Runnable,WindowListener,PostingFieldValues {
    BackUpRestoreDB dbBackup=new BackUpRestoreDB();
    Boolean finished=false;
    String userId,closingNotes="1;General Comments;Not Specified:2;Payment promptness;Not Specified:3;Self Reminding;Not Specified:4;Top Ups;Not Specified:5;Others (Please Specify);Not Specified";
     List debitLP =null,creditLP=null;
JFrame reflection;
BiodataHelperRenderer theBio= new BiodataHelperRenderer();
   CreateExcelWorkBook writeExcel= new CreateExcelWorkBook();
    SimpleDateFormat sdk =new SimpleDateFormat("dd.MM.yyyy");
    List amortDetails,accountDetails, customerDetails;
    SmsUtility sms= new SmsUtility();
    DecimalFormat NumberFormat =new DecimalFormat("#,###");
        SimpleDateFormat sdf =new SimpleDateFormat("dd/MM/yyyy");
    fileInputOutPutStreams fios= new fileInputOutPutStreams();
    Formartter fmt = new Formartter();
    Date Trndate,valuedate;
   ArrayList<String> data4, column1;
List data5;
  List<List> uniqueListPost;
    String text,position;
 Integer Value,Value1,compuM=1;
    GregorianCalendar cal = new GregorianCalendar(); 
      ListDataModel_11 modelxxxxx;
     SendSms sendsms= new SendSms();
     FormattingUrlData smsForm=new FormattingUrlData();
     int banks=0,thePeriodSet=0;
         BatchPostingHelper bPost=new BatchPostingHelper(); 
//         DecimalFormat df2 = new DecimalFormat("#");
     JdbcConnector csx = new JdbcConnector(fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "AccountDBDetails.txt"))); ; 
    DatabaseQuaries dbq =new DatabaseQuaries();
    loanDatabaseQuaries loan=new loanDatabaseQuaries();
    AccountNumberCreationDataBase ancdb=new AccountNumberCreationDataBase();
   ReportsDatabase rdb =new ReportsDatabase();
    BalanceSheet bsheet= new BalanceSheet();
    PostingMain post= new PostingMain(PostingEntryWindow.this);
//    BackUpRestoreDB dbBackUp= new BackUpRestoreDB();
    CreatingFolders filesW= new CreatingFolders();
//   private ProcessLoanRepayment laonPay;
  String completeStatus="Not Complete",flag="Not Flagged"; int temper=0;
    String batchNumber;
    OtherLoanReports otherLoans=new  OtherLoanReports();
     LoanSavingsSharesOthers loanSaveShare=new LoanSavingsSharesOthers();
         ListDataModel model1;
         ListDataModel result;
         String theAccount="";
         String loansOfficer="Select Portfolio Owner",computeType="SELECT COMPUTATION TYPE";
listComboModel modelComboBox;
     
    List loanPaymentOrder;

          JOptionPane p;
    PostingModal model ;
    JFrame fi, f,fa,fb,fc;
    Date date;
  SimpleDateFormat df;
TestConnectivity conn=new TestConnectivity();
 SendSms sendS=new SendSms();
  private java.util.Timer timer = null,timer1 = null;
  private java.util.TimerTask  myNewTask = null,myNewTask1 = null;  
    
   List amortDetailsx;
 
  
  
  public PostingEntryWindow(String userID,List amortDetailsg) {
     
this.userId=userID;
   this.amortDetails=amortDetailsg;
        initComponents();
   
jTable3.addMouseListener(this);
jTable4.addMouseListener(this);
jTable1.addMouseListener(this);
//jTable5.addMouseListener(this);
jTable7.addMouseListener(this);
jTable10.addMouseListener(this);
jTable9.addMouseListener(this);
jTable8.addMouseListener(this);
jTable11.addMouseListener(this);
jTable14.addMouseListener(this);

 jTable3.setAlignmentX(LEFT_ALIGNMENT);
jTable3.setAlignmentY(CENTER_ALIGNMENT);
jTable3.setAutoscrolls(true);
jTable3.setShowHorizontalLines(true);
jTable3.setShowGrid(true);
jTable3.setRowHeight(30);
jTable3.setGridColor(Color.gray);

 jTable4.setAlignmentX(LEFT_ALIGNMENT);
jTable4.setAlignmentY(CENTER_ALIGNMENT);
jTable4.setAutoscrolls(true);
jTable4.setShowHorizontalLines(true);
jTable4.setShowGrid(true);
jTable4.setRowHeight(30);
jTable4.setGridColor(Color.gray);

    
 jTable6.setAlignmentX(LEFT_ALIGNMENT);
jTable6.setAlignmentY(CENTER_ALIGNMENT);
jTable6.setAutoscrolls(true);
jTable6.setShowHorizontalLines(true);
jTable6.setShowGrid(true);
jTable6.setRowHeight(30);
jTable6.setGridColor(Color.gray); 

   jTable7.setAlignmentX(LEFT_ALIGNMENT);
jTable7.setAlignmentY(CENTER_ALIGNMENT);
jTable7.setAutoscrolls(true);
jTable7.setShowHorizontalLines(true);
jTable7.setShowGrid(true);
jTable7.setRowHeight(30);
jTable7.setGridColor(Color.gray); 


 jTable10.setAlignmentX(LEFT_ALIGNMENT);
jTable10.setAlignmentY(CENTER_ALIGNMENT);
jTable10.setAutoscrolls(true);
jTable10.setShowHorizontalLines(true);
jTable10.setShowGrid(true);
jTable10.setRowHeight(30);
jTable10.setGridColor(Color.gray); 
jTable10.setRowSelectionAllowed(true);

 jTable9.setAlignmentX(LEFT_ALIGNMENT);
jTable9.setAlignmentY(CENTER_ALIGNMENT);
jTable9.setAutoscrolls(true);
jTable9.setShowHorizontalLines(true);
jTable9.setShowGrid(true);
jTable9.setRowHeight(30);
jTable9.setGridColor(Color.gray); 
jTable9.setRowSelectionAllowed(true);

 jTable8.setAlignmentX(LEFT_ALIGNMENT);
jTable8.setAlignmentY(CENTER_ALIGNMENT);
jTable8.setAutoscrolls(true);
jTable8.setShowHorizontalLines(true);
jTable8.setShowGrid(true);
jTable8.setRowHeight(30);
jTable8.setGridColor(Color.gray); 
jTable8.setRowSelectionAllowed(true);

 jTable11.setAlignmentX(LEFT_ALIGNMENT);
jTable11.setAlignmentY(CENTER_ALIGNMENT);
jTable11.setAutoscrolls(true);
jTable11.setShowHorizontalLines(true);
jTable11.setShowGrid(true);
jTable11.setRowHeight(45);
jTable11.setGridColor(Color.gray); 
jTable11.setRowSelectionAllowed(true);

 jTable13.setAlignmentX(LEFT_ALIGNMENT);
jTable13.setAlignmentY(CENTER_ALIGNMENT);
jTable13.setAutoscrolls(true);
jTable13.setShowHorizontalLines(true);
jTable13.setShowGrid(true);
jTable13.setRowHeight(30);
jTable13.setGridColor(Color.gray); 
jTable13.setRowSelectionAllowed(true);

 jTable14.setAlignmentX(LEFT_ALIGNMENT);
jTable14.setAlignmentY(CENTER_ALIGNMENT);
jTable14.setAutoscrolls(true);
jTable14.setShowHorizontalLines(true);
jTable14.setShowGrid(true);
jTable14.setRowHeight(30);
jTable14.setGridColor(Color.gray); 
jTable14.setRowSelectionAllowed(true);

 jTable12.setAlignmentX(LEFT_ALIGNMENT);
jTable12.setAlignmentY(CENTER_ALIGNMENT);
jTable12.setAutoscrolls(true);
//jTable12.setShowHorizontalLines(true);
//jTable12.setShowGrid(true);
jTable12.setRowHeight(25);
jTable12.setGridColor(Color.gray); 
jTable12.setRowSelectionAllowed(true);
//jTable10.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      java.awt.Image img = new ImageIcon(System.getProperty("user.dir")+"/"+"ICON_LOGO.jpg").getImage();
      this.setIconImage(img);
      this.setTitle("MAIN POSTING MODULE-"+dbq.title(userId)); 
        this.addWindowListener(this);
        this.getRootPane().addKeyListener(this);
   
        valueDate1.setText(sdf.format(new Date(System.currentTimeMillis())));

valueDate.setText(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "open_day.txt")));
   if( !sdf.format(new Date(System.currentTimeMillis())).equals(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "open_day.txt"))))
   {openDay.setEnabled(true);
   rejectButton.setEnabled(false);
   }else{openDay.setEnabled(false);
   rejectButton.setEnabled(true);
   }
            
        
                
        new Timer(1000,this).start();
        
         jTable1.setAlignmentX(LEFT_ALIGNMENT);
jTable1.setAlignmentY(CENTER_ALIGNMENT);
jTable1.setAutoscrolls(true);
jTable1.setShowHorizontalLines(true);
jTable1.setShowGrid(true);
jTable1.setRowHeight(25);
jTable1.setGridColor(Color.gray);
jTable1.setAutoCreateRowSorter(true);      
               
jTable2.setAlignmentX(LEFT_ALIGNMENT);
jTable2.setAlignmentY(CENTER_ALIGNMENT);
jTable2.setAutoscrolls(true);
jTable2.setShowHorizontalLines(true);
jTable2.setShowGrid(true);
jTable2.setRowHeight(20);
jTable2.setGridColor(Color.gray);
jTable2.setAutoCreateRowSorter(true);
 jTree2.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
       jTree2.addMouseListener( this);
        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
     
        jTFuserId1.setText(this.userId);
  
          jTFuserId1.setText(userId);
        jTFLoginTime1.setText((dbq.getDBCurrentTime())+"");
         Resource rscs=new Resource(userId);
        switch(dbq.title(userId)){
            
            case "Cashier":
                rscs.cashierAccessRights(jTree2);
              rejectButton.setEnabled(false);
              amountCredit1.setEnabled(false);
            jCheckBox72.setEnabled(false);
            jButton12.setEnabled(false);
            break;
            case "Accountant":
                amountCredit1.setEnabled(false);
            jCheckBox72.setEnabled(false);
                rscs.accountantAccessRights(jTree2);
                rejectButton.setEnabled(false);
                break;
            case "Supervisor":rscs.supervisorAccessRights(jTree2);break;
        
        }

  }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        clock = new javax.swing.JFormattedTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        postingHeaderButtons = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        responseButton = new javax.swing.JButton();
        reverseButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        validateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        rejectButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        openDay1 = new javax.swing.JButton();
        openDay = new javax.swing.JButton();
        postingSubHeaderButtons = new javax.swing.JPanel();
        jLTrnSqNo = new javax.swing.JLabel();
        jTFTrnSqNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jLuserId = new javax.swing.JLabel();
        jTFuserId1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        JBTrnSqNo1 = new javax.swing.JButton();
        jComboTransactionType = new javax.swing.JComboBox();
        valueDate = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jTFLoginTime1 = new javax.swing.JTextField();
        mainPanel = new javax.swing.JPanel();
        creditingPanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jTFuserId4 = new javax.swing.JTextField();
        JBTrnSqNo2 = new javax.swing.JButton();
        creditAccountField = new javax.swing.JFormattedTextField();
        jLabel17 = new javax.swing.JLabel();
        creditAccountName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        creditNarration1 = new javax.swing.JTextField();
        creditNarration2 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        creditRefNumber = new javax.swing.JTextField();
        amountCredit = new javax.swing.JFormattedTextField();
        jPanel5 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox69 = new javax.swing.JCheckBox();
        jCheckBox70 = new javax.swing.JCheckBox();
        jCheckBox71 = new javax.swing.JCheckBox();
        jButton13 = new javax.swing.JButton();
        jCheckBox72 = new javax.swing.JCheckBox();
        amountCredit1 = new javax.swing.JFormattedTextField();
        jCheckBox73 = new javax.swing.JCheckBox();
        debitPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTFuserId2 = new javax.swing.JTextField();
        JBTrnSqNo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        debitAccountField = new javax.swing.JFormattedTextField();
        jFormattedTextField3S = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        chequeNumber = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jFormattedTextField3S3 = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        debitAccountName = new javax.swing.JTextField();
        reference1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        amountFieldDebit1 = new javax.swing.JFormattedTextField();
        valueDate1 = new javax.swing.JTextField();
        jCheckBox13 = new javax.swing.JCheckBox();
        cashRecon = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jButton17 = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jLabel29 = new javax.swing.JLabel();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jLabel30 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jCheckBox25 = new javax.swing.JCheckBox();
        jCheckBox26 = new javax.swing.JCheckBox();
        jCheckBox27 = new javax.swing.JCheckBox();
        jCheckBox28 = new javax.swing.JCheckBox();
        jCheckBox29 = new javax.swing.JCheckBox();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox32 = new javax.swing.JCheckBox();
        jCheckBox34 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        allAccountsPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jTextField15 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jLabel49 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        JpanelSummuryPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanelDetailedPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel16 = new javax.swing.JPanel();
        openDay2 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton54 = new javax.swing.JButton();
        jButton55 = new javax.swing.JButton();
        jButton64 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        jTextField17 = new javax.swing.JTextField();
        jButton57 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jComboBox7 = new javax.swing.JComboBox<>();
        jTextField21 = new javax.swing.JTextField();
        jButton61 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField16 = new javax.swing.JTextField();
        jButton56 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jComboBox8 = new javax.swing.JComboBox<>();
        jTextField22 = new javax.swing.JTextField();
        jButton58 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jTextField18 = new javax.swing.JTextField();
        jButton59 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jComboBox6 = new javax.swing.JComboBox<>();
        jTextField20 = new javax.swing.JTextField();
        jButton63 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jComboBox5 = new javax.swing.JComboBox<>();
        jTextField19 = new javax.swing.JTextField();
        jButton60 = new javax.swing.JButton();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox30 = new javax.swing.JCheckBox();
        jCheckBox33 = new javax.swing.JCheckBox();
        jCheckBox35 = new javax.swing.JCheckBox();
        jCheckBox38 = new javax.swing.JCheckBox();
        jButton53 = new javax.swing.JButton();
        jComboBox9 = new javax.swing.JComboBox<>();
        jTextField24 = new javax.swing.JTextField();
        jButton62 = new javax.swing.JButton();
        jCheckBox36 = new javax.swing.JCheckBox();
        jButton100 = new javax.swing.JButton();
        jComboBox10 = new javax.swing.JComboBox<>();
        jTextField26 = new javax.swing.JTextField();
        jButton101 = new javax.swing.JButton();
        jCheckBox37 = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jTextField71 = new javax.swing.JTextField();
        jTextField76 = new javax.swing.JTextField();
        jComboBox56 = new javax.swing.JComboBox<>();
        jComboBox68 = new javax.swing.JComboBox<>();
        jButton74 = new javax.swing.JButton();
        jButton72 = new javax.swing.JButton();
        jLabel65 = new javax.swing.JLabel();
        jTextField68 = new javax.swing.JTextField();
        openDay3 = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jPanel26 = new javax.swing.JPanel();
        jButton80 = new javax.swing.JButton();
        jButton81 = new javax.swing.JButton();
        jButton83 = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel33 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable12 = new javax.swing.JTable();
        jPanel29 = new javax.swing.JPanel();
        jButton82 = new javax.swing.JButton();
        jButton66 = new javax.swing.JButton();
        creditAccountField72 = new javax.swing.JFormattedTextField();
        creditAccountField71 = new javax.swing.JFormattedTextField();
        jLabel56 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jTextField61 = new javax.swing.JTextField();
        jTextField62 = new javax.swing.JTextField();
        jButton67 = new javax.swing.JButton();
        jLabel60 = new javax.swing.JLabel();
        jTextField67 = new javax.swing.JTextField();
        jButton77 = new javax.swing.JButton();
        jButton68 = new javax.swing.JButton();
        jButton71 = new javax.swing.JButton();
        jButton84 = new javax.swing.JButton();
        amountCredit2 = new javax.swing.JFormattedTextField();
        repaymentCycle = new javax.swing.JComboBox<>();
        jTextField23 = new javax.swing.JTextField();
        jButton98 = new javax.swing.JButton();
        InterestRegimeComboBox = new javax.swing.JComboBox<>();
        jComboBox26 = new javax.swing.JComboBox<>();
        jLabel67 = new javax.swing.JLabel();
        jComboBox27 = new javax.swing.JComboBox();
        jTextField25 = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jButton99 = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        amountCredit3 = new javax.swing.JFormattedTextField();
        jButton65 = new javax.swing.JButton();
        jTextField60 = new javax.swing.JTextField();
        portfolioOwner = new javax.swing.JComboBox<>();
        portfolioOwner1 = new javax.swing.JComboBox<>();
        jPanel30 = new javax.swing.JPanel();
        openDay4 = new javax.swing.JButton();
        jButton88 = new javax.swing.JButton();
        jButton89 = new javax.swing.JButton();
        jCheckBox39PostAnAdjustment = new javax.swing.JCheckBox();
        jButton103 = new javax.swing.JButton();
        jButton104 = new javax.swing.JButton();
        jButton105 = new javax.swing.JButton();
        jButton106 = new javax.swing.JButton();
        jButton107 = new javax.swing.JButton();
        jButton108 = new javax.swing.JButton();
        jButton109 = new javax.swing.JButton();
        jLabel58 = new javax.swing.JLabel();
        jCheckBox39PostAnAdjustment1 = new javax.swing.JCheckBox();
        jButton110 = new javax.swing.JButton();
        jCheckBox39PostAnAdjustment2 = new javax.swing.JCheckBox();
        jCheckBox39PostAnAdjustment3 = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jButton75 = new javax.swing.JButton();
        batchPosingButton = new javax.swing.JButton();
        jLabel59 = new javax.swing.JLabel();
        jTextField66 = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jLabel66 = new javax.swing.JLabel();
        jTextField69 = new javax.swing.JTextField();
        openDay5 = new javax.swing.JButton();
        jPanel31 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        jLabel64 = new javax.swing.JLabel();
        jTextField70 = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jTextField65 = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jCheckBox65 = new javax.swing.JCheckBox();
        jLabel61 = new javax.swing.JLabel();
        titleJCbox2 = new javax.swing.JComboBox();
        jLabel62 = new javax.swing.JLabel();
        firstName3 = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        lastName2 = new javax.swing.JTextField();
        jButton69 = new javax.swing.JButton();
        jButton70 = new javax.swing.JButton();
        openDay6 = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jLabel52 = new javax.swing.JLabel();
        jTextField73 = new javax.swing.JTextField();
        jPanel34 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable14 = new javax.swing.JTable();
        jPanel36 = new javax.swing.JPanel();
        jButton90 = new javax.swing.JButton();
        jButton91 = new javax.swing.JButton();
        jButton92 = new javax.swing.JButton();
        jButton93 = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        jTextField72 = new javax.swing.JTextField();
        jPanel38 = new javax.swing.JPanel();
        jButton85 = new javax.swing.JButton();
        jButton86 = new javax.swing.JButton();
        jButton87 = new javax.swing.JButton();
        jButton94 = new javax.swing.JButton();
        jPanel39 = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel42 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jButton95 = new javax.swing.JButton();
        jButton96 = new javax.swing.JButton();
        jButton97 = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTable15 = new javax.swing.JTable();
        jPanel46 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTable16 = new javax.swing.JTable();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel17 = new javax.swing.JPanel();
        jPanel49 = new javax.swing.JPanel();
        jPanel47 = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jButton40 = new javax.swing.JButton();
        jButton48 = new javax.swing.JButton();
        jButton46 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jButton44 = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton43 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();
        jButton35 = new javax.swing.JButton();
        jButton45 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton38 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton47 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton49 = new javax.swing.JButton();
        jButton50 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jButton73 = new javax.swing.JButton();
        jButton78 = new javax.swing.JButton();
        jButton79 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusCycleRoot(false);
        setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(204, 255, 204));
        jPanel1.setLayout(null);

        clock.setBackground(java.awt.SystemColor.activeCaption);
        clock.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        clock.setForeground(new java.awt.Color(0, 153, 51));
        clock.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance())));
        clock.setCaretColor(new java.awt.Color(0, 153, 51));
        clock.setMaximumSize(new java.awt.Dimension(150, 20));
        clock.setPreferredSize(new java.awt.Dimension(150, 20));
        clock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockActionPerformed(evt);
            }
        });
        jPanel1.add(clock);
        clock.setBounds(2, 544, 180, 150);
        clock .setEditable(false);

        jTree2.setBackground(java.awt.SystemColor.activeCaption);
        jTree2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTree2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Log Out");
        jTree2.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane3.setViewportView(jTree2);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(0, 0, 180, 550);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 180, 700);

        jTabbedPane1.setBackground(java.awt.SystemColor.activeCaption);
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPane1MousePressed(evt);
            }
        });

        jPanel6.setBackground(java.awt.SystemColor.activeCaption);
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        postingHeaderButtons.setBackground(java.awt.SystemColor.activeCaption);
        postingHeaderButtons.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        postingHeaderButtons.setLayout(null);

        newButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(newButton);
        newButton.setBounds(0, 0, 60, 38);

        responseButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        responseButton.setText("Response");
        responseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(responseButton);
        responseButton.setBounds(60, 0, 100, 38);

        reverseButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        reverseButton.setText("Reverse");
        reverseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(reverseButton);
        reverseButton.setBounds(160, 0, 90, 38);

        viewButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(viewButton);
        viewButton.setBounds(248, 0, 70, 38);

        validateButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        validateButton.setText("Validate");
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(validateButton);
        validateButton.setBounds(315, 0, 90, 38);
        validateButton .setEnabled(false);

        cancelButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(cancelButton);
        cancelButton.setBounds(470, 0, 90, 38);
        cancelButton.setEnabled(false);

        rejectButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        rejectButton.setText("Close Day");
        rejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(rejectButton);
        rejectButton.setBounds(560, 0, 97, 38);
        rejectButton.setEnabled(false);

        saveButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(saveButton);
        saveButton.setBounds(400, 0, 68, 38);
        saveButton.setEnabled(false);

        openDay1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        openDay1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDay1ActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(openDay1);
        openDay1.setBounds(760, 0, 40, 38);
        openDay.setEnabled(false);

        openDay.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay.setText("Open Day");
        openDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDayActionPerformed(evt);
            }
        });
        postingHeaderButtons.add(openDay);
        openDay.setBounds(650, 0, 110, 38);
        openDay.setEnabled(false);

        jPanel6.add(postingHeaderButtons);
        postingHeaderButtons.setBounds(10, 10, 800, 40);

        postingSubHeaderButtons.setBackground(java.awt.SystemColor.activeCaption);
        postingSubHeaderButtons.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postingSubHeaderButtons.setForeground(new java.awt.Color(153, 51, 0));
        postingSubHeaderButtons.setLayout(null);

        jLTrnSqNo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLTrnSqNo.setForeground(new java.awt.Color(0, 51, 204));
        jLTrnSqNo.setText("Trn Sq No");
        jLTrnSqNo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postingSubHeaderButtons.add(jLTrnSqNo);
        jLTrnSqNo.setBounds(10, 2, 70, 30);

        jTFTrnSqNo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTFTrnSqNo.setForeground(new java.awt.Color(0, 204, 102));
        jTFTrnSqNo.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 51, 255), null));
        postingSubHeaderButtons.add(jTFTrnSqNo);
        jTFTrnSqNo.setBounds(90, 2, 100, 30);
        jTFTrnSqNo.addKeyListener(this);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setText("Log in Time");
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postingSubHeaderButtons.add(jLabel3);
        jLabel3.setBounds(486, 2, 110, 30);

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        postingSubHeaderButtons.add(jButton14);
        jButton14.setBounds(448, 2, 18, 30);

        jLuserId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLuserId.setForeground(new java.awt.Color(0, 51, 204));
        jLuserId.setText("User ID");
        jLuserId.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postingSubHeaderButtons.add(jLuserId);
        jLuserId.setBounds(248, 2, 80, 30);

        jTFuserId1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTFuserId1.setForeground(new java.awt.Color(0, 153, 102));
        postingSubHeaderButtons.add(jTFuserId1);
        jTFuserId1.setBounds(348, 2, 100, 30);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Trn Type");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postingSubHeaderButtons.add(jLabel5);
        jLabel5.setBounds(248, 35, 80, 30);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Tn Date");
        jLabel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postingSubHeaderButtons.add(jLabel10);
        jLabel10.setBounds(10, 34, 70, 30);

        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        postingSubHeaderButtons.add(jButton18);
        jButton18.setBounds(190, 35, 20, 30);
        jButton18.setEnabled(false);

        JBTrnSqNo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        postingSubHeaderButtons.add(JBTrnSqNo1);
        JBTrnSqNo1.setBounds(190, 0, 20, 30);

        jComboTransactionType.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboTransactionType.setToolTipText("Select Transaction Type");
        jComboTransactionType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboTransactionTypeActionPerformed(evt);
            }
        });
        postingSubHeaderButtons.add(jComboTransactionType);
        jComboTransactionType.setBounds(348, 35, 250, 30);
        jComboTransactionType.setEnabled(false);

        valueDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        valueDate.setForeground(new java.awt.Color(0, 204, 102));
        valueDate.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 51, 255), null));
        valueDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueDateActionPerformed(evt);
            }
        });
        postingSubHeaderButtons.add(valueDate);
        valueDate.setBounds(90, 35, 100, 30);
        valueDate.setEditable(false);

        jButton12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/print.jpg"))); // NOI18N
        jButton12.setText("Posting Settings");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        postingSubHeaderButtons.add(jButton12);
        jButton12.setBounds(610, 30, 140, 30);

        jTFLoginTime1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTFLoginTime1.setForeground(new java.awt.Color(0, 153, 102));
        postingSubHeaderButtons.add(jTFLoginTime1);
        jTFLoginTime1.setBounds(610, 0, 140, 30);

        jPanel6.add(postingSubHeaderButtons);
        postingSubHeaderButtons.setBounds(10, 50, 800, 70);

        mainPanel.setBackground(java.awt.SystemColor.activeCaption);
        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        mainPanel.setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));
        mainPanel.setLayout(null);

        creditingPanel.setBackground(java.awt.SystemColor.activeCaption);
        creditingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditingPanel.setLayout(null);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 51, 255));
        jLabel16.setText("Cr. Account No.");
        jLabel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.add(jLabel16);
        jLabel16.setBounds(10, 20, 110, 30);

        jTFuserId4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTFuserId4.setForeground(new java.awt.Color(0, 153, 102));
        jTFuserId4.setText("UGX");
        creditingPanel.add(jTFuserId4);
        jTFuserId4.setBounds(130, 20, 40, 30);

        JBTrnSqNo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        JBTrnSqNo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBTrnSqNo2ActionPerformed(evt);
            }
        });
        creditingPanel.add(JBTrnSqNo2);
        JBTrnSqNo2.setBounds(170, 20, 18, 30);

        creditAccountField.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 51, 255), null));
        creditAccountField.setForeground(new java.awt.Color(0, 102, 51));
        try {
            creditAccountField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-#######-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        creditAccountField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditAccountField.setValue(null);
        creditAccountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditAccountFieldActionPerformed(evt);
            }
        });
        creditAccountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                creditAccountFieldKeyPressed(evt);
            }
        });
        creditingPanel.add(creditAccountField);
        creditAccountField.setBounds(190, 20, 120, 30);
        creditAccountField.addKeyListener(this);

        jLabel17.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 51, 255));
        jLabel17.setText(" Account Name");
        jLabel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.add(jLabel17);
        jLabel17.setBounds(320, 20, 110, 30);

        creditAccountName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditAccountName.setForeground(new java.awt.Color(0, 153, 102));
        creditingPanel.add(creditAccountName);
        creditAccountName.setBounds(440, 20, 290, 30);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel18.setText("Cr. Amount");
        jLabel18.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.add(jLabel18);
        jLabel18.setBounds(10, 60, 110, 30);

        jLabel19.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 51, 255));
        jLabel19.setText("Narrative 1");
        jLabel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.add(jLabel19);
        jLabel19.setBounds(10, 100, 110, 30);

        jLabel20.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel20.setText("Narrative 2");
        jLabel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.add(jLabel20);
        jLabel20.setBounds(10, 150, 110, 30);

        creditNarration1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditNarration1.setForeground(new java.awt.Color(0, 153, 102));
        creditNarration1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditNarration1ActionPerformed(evt);
            }
        });
        creditingPanel.add(creditNarration1);
        creditNarration1.setBounds(130, 100, 600, 30);

        creditNarration2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditNarration2.setForeground(new java.awt.Color(0, 153, 102));
        creditingPanel.add(creditNarration2);
        creditNarration2.setBounds(130, 150, 600, 30);

        jLabel21.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel21.setText("Ref. No.");
        jLabel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        creditingPanel.add(jLabel21);
        jLabel21.setBounds(310, 60, 70, 30);

        creditRefNumber.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditRefNumber.setForeground(new java.awt.Color(0, 153, 102));
        creditingPanel.add(creditRefNumber);
        creditRefNumber.setBounds(380, 60, 160, 30);

        amountCredit.setForeground(new java.awt.Color(0, 102, 51));
        amountCredit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###,###,###,###"))));
        amountCredit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        amountCredit.setValue(null);
        amountCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountCreditActionPerformed(evt);
            }
        });
        creditingPanel.add(amountCredit);
        amountCredit.setBounds(120, 60, 150, 30);
        amountCredit.addKeyListener(this);

        mainPanel.add(creditingPanel);
        creditingPanel.setBounds(0, 300, 800, 240);
        creditingPanel.setVisible(false);

        jPanel5.setBackground(java.awt.SystemColor.activeCaption);
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setForeground(new java.awt.Color(153, 51, 0));
        jPanel5.setLayout(null);

        jButton9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/tick.png"))); // NOI18N
        jButton9.setText("Sign Verify");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton9);
        jButton9.setBounds(390, 0, 120, 40);
        jButton9.setEnabled(false);

        jButton11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/charges.gif"))); // NOI18N
        jButton11.setText("Charges");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton11);
        jButton11.setBounds(660, 0, 120, 40);
        jButton11.setEnabled(false);

        jButton15.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        jButton15.setText("Reconcile Cash");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton15);
        jButton15.setBounds(240, 0, 150, 40);

        jButton10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/submit.png"))); // NOI18N
        jButton10.setText("Print Voucher");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton10);
        jButton10.setBounds(510, 0, 150, 40);
        jButton10.setEnabled(false);

        mainPanel.add(jPanel5);
        jPanel5.setBounds(0, 0, 800, 40);

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        jCheckBox69.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox69.setText("Manage Cash Automatically");
        jCheckBox69.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox69ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox69);
        jCheckBox69.setBounds(10, 10, 370, 30);

        jCheckBox70.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox70.setText("Post Sacco Loans");
        jCheckBox70.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox70ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox70);
        jCheckBox70.setBounds(10, 90, 370, 30);

        jCheckBox71.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox71.setText("Post Sacco Savings");
        jCheckBox71.setToolTipText("<html>When you check this box, the the customer will leave the queue once the transaction is completed for that day.</html> \n<html>This help to track whether all the transactions for the listed customer have been effected.</html> ");
        jCheckBox71.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox71ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox71);
        jCheckBox71.setBounds(10, 50, 370, 30);

        jButton13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/print.jpg"))); // NOI18N
        jButton13.setText("Submit");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton13);
        jButton13.setBounds(350, 210, 140, 40);

        jCheckBox72.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox72.setText("Set Savings Withdraw Charges");
        jCheckBox72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox72ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox72);
        jCheckBox72.setBounds(150, 170, 230, 30);

        amountCredit1.setForeground(new java.awt.Color(0, 102, 51));
        amountCredit1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###,###,###,###"))));
        amountCredit1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        amountCredit1.setValue(null);
        amountCredit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountCredit1ActionPerformed(evt);
            }
        });
        jPanel2.add(amountCredit1);
        amountCredit1.setBounds(10, 170, 140, 30);
        fios.forceFileExistance(fios.createFileName("persistence", "interestAccount", "withDrawCharges.txt"));
        amountCredit1.setValue(parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "withDrawCharges.txt"))));

        jCheckBox73.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox73.setText("Post Sacco Shares");
        jCheckBox73.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox73ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox73);
        jCheckBox73.setBounds(10, 130, 370, 30);

        mainPanel.add(jPanel2);
        jPanel2.setBounds(0, 110, 390, 190);
        jPanel2.setVisible(false);

        debitPanel.setBackground(java.awt.SystemColor.activeCaption);
        debitPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Dr. Amount");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel2);
        jLabel2.setBounds(450, 120, 90, 30);

        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/calender.png"))); // NOI18N
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        debitPanel.add(jButton16);
        jButton16.setBounds(200, 5, 20, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 255));
        jLabel6.setText("Value Date");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel6);
        jLabel6.setBounds(10, 5, 90, 30);

        jTFuserId2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTFuserId2.setForeground(new java.awt.Color(0, 153, 102));
        jTFuserId2.setText("UGX");
        debitPanel.add(jTFuserId2);
        jTFuserId2.setBounds(120, 84, 40, 30);

        JBTrnSqNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        JBTrnSqNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBTrnSqNoActionPerformed(evt);
            }
        });
        debitPanel.add(JBTrnSqNo);
        JBTrnSqNo.setBounds(160, 84, 18, 30);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 255));
        jLabel7.setText("Dr. Account No.");
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel7);
        jLabel7.setBounds(10, 84, 110, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("Value of Shares");
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel8);
        jLabel8.setBounds(200, 120, 120, 30);

        jTextField3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(0, 153, 102));
        debitPanel.add(jTextField3);
        jTextField3.setBounds(100, 160, 630, 30);

        debitAccountField.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 51, 255), null));
        debitAccountField.setForeground(new java.awt.Color(0, 51, 255));
        try {
            debitAccountField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-#######-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        debitAccountField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        debitAccountField.setValue(null);
        debitAccountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debitAccountFieldActionPerformed(evt);
            }
        });
        debitAccountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                debitAccountFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                debitAccountFieldKeyReleased(evt);
            }
        });
        debitPanel.add(debitAccountField);
        debitAccountField.setBounds(180, 84, 130, 30);
        debitAccountField.addKeyListener(this);

        jFormattedTextField3S.setForeground(new java.awt.Color(0, 102, 51));
        jFormattedTextField3S.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###,###"))));
        jFormattedTextField3S.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jFormattedTextField3S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField3SActionPerformed(evt);
            }
        });
        debitPanel.add(jFormattedTextField3S);
        jFormattedTextField3S.setBounds(120, 120, 70, 30);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("Narrative 2");
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel9);
        jLabel9.setBounds(10, 200, 80, 30);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Ref. No.");
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel11);
        jLabel11.setBounds(20, 40, 90, 30);

        jTextField4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(0, 153, 102));
        debitPanel.add(jTextField4);
        jTextField4.setBounds(100, 200, 630, 30);

        chequeNumber.setForeground(new java.awt.Color(0, 153, 102));
        debitPanel.add(chequeNumber);
        chequeNumber.setBounds(110, 40, 90, 30);
        chequeNumber.setVisible(false);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 255));
        jLabel12.setText("Narrative 1");
        jLabel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel12);
        jLabel12.setBounds(10, 160, 80, 30);

        jLabel13.setText("Cheque No.");
        jLabel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel13);
        jLabel13.setBounds(10, 40, 90, 30);
        jLabel13.setVisible(false);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel14.setText("No. of Shares");
        jLabel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel14);
        jLabel14.setBounds(10, 120, 100, 30);

        jFormattedTextField3S3.setForeground(new java.awt.Color(0, 102, 51));
        jFormattedTextField3S3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###,###"))));
        jFormattedTextField3S3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jFormattedTextField3S3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField3S3ActionPerformed(evt);
            }
        });
        debitPanel.add(jFormattedTextField3S3);
        jFormattedTextField3S3.setBounds(320, 120, 120, 30);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 51, 255));
        jLabel15.setText(" Account Name");
        jLabel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        debitPanel.add(jLabel15);
        jLabel15.setBounds(320, 80, 110, 30);

        debitAccountName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        debitAccountName.setForeground(new java.awt.Color(0, 153, 102));
        debitAccountName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debitAccountNameActionPerformed(evt);
            }
        });
        debitPanel.add(debitAccountName);
        debitAccountName.setBounds(450, 80, 280, 30);

        reference1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        reference1.setForeground(new java.awt.Color(0, 153, 102));
        debitPanel.add(reference1);
        reference1.setBounds(110, 40, 280, 30);
        reference1.addKeyListener(this);

        jTable2.setBackground(new java.awt.Color(240, 240, 240));
        jTable2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable2.setForeground(new java.awt.Color(0, 102, 51));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTable2);

        debitPanel.add(jScrollPane4);
        jScrollPane4.setBounds(440, 10, 290, 60);

        amountFieldDebit1.setForeground(new java.awt.Color(0, 102, 51));
        amountFieldDebit1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###,###,###,###"))));
        amountFieldDebit1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        amountFieldDebit1.setValue(null);
        amountFieldDebit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountFieldDebit1ActionPerformed(evt);
            }
        });
        debitPanel.add(amountFieldDebit1);
        amountFieldDebit1.setBounds(550, 120, 130, 30);
        amountFieldDebit1.addKeyListener(this);

        valueDate1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        valueDate1.setForeground(new java.awt.Color(0, 204, 102));
        valueDate1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 51, 255), null));
        valueDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueDate1ActionPerformed(evt);
            }
        });
        debitPanel.add(valueDate1);
        valueDate1.setBounds(110, 5, 90, 30);

        jCheckBox13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox13.setText("Waive Interest");
        jCheckBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox13ActionPerformed(evt);
            }
        });
        debitPanel.add(jCheckBox13);
        jCheckBox13.setBounds(680, 120, 120, 30);
        jCheckBox13.setVisible(false);

        mainPanel.add(debitPanel);
        debitPanel.setBounds(0, 40, 800, 260);
        debitPanel.setVisible(false);
        debitPanel.addKeyListener(this);

        cashRecon.setBackground(java.awt.SystemColor.activeCaption);
        cashRecon.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cashRecon.setLayout(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        jLabel1.setText("UGX 20,000");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel1);
        jLabel1.setBounds(20, 70, 90, 30);
        jPanel3.add(jTextField1);
        jTextField1.setBounds(120, 190, 80, 30);

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox1);
        jCheckBox1.setBounds(210, 70, 40, 30);

        jLabel4.setText("UGX 10,000");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel4);
        jLabel4.setBounds(20, 100, 90, 30);

        jLabel22.setText("UGX 5,000");
        jLabel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel22);
        jLabel22.setBounds(20, 130, 90, 30);

        jLabel23.setText("UGX 2,000");
        jLabel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel23);
        jLabel23.setBounds(20, 160, 90, 30);

        jLabel24.setText("UGX 1,000");
        jLabel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel24);
        jLabel24.setBounds(20, 190, 90, 30);

        jLabel26.setText("Check ");
        jLabel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel26);
        jLabel26.setBounds(210, 5, 50, 30);

        jLabel27.setText("UGX 5");
        jLabel27.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel27);
        jLabel27.setBounds(270, 190, 70, 30);

        jLabel31.setText("UGX 50,000");
        jLabel31.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel31);
        jLabel31.setBounds(20, 40, 90, 30);

        jLabel32.setText("Cash At Hand");
        jLabel32.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel32);
        jLabel32.setBounds(470, 80, 110, 30);

        jLabel33.setText("Number");
        jLabel33.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel33);
        jLabel33.setBounds(120, 5, 80, 30);

        jLabel34.setText("Notes");
        jLabel34.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel34);
        jLabel34.setBounds(20, 5, 90, 30);

        jLabel35.setText("Coins");
        jLabel35.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel35);
        jLabel35.setBounds(270, 5, 70, 30);

        jLabel36.setText("Number");
        jLabel36.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel36);
        jLabel36.setBounds(350, 5, 80, 30);
        jPanel3.add(jTextField2);
        jTextField2.setBounds(350, 40, 80, 30);
        jPanel3.add(jTextField5);
        jTextField5.setBounds(120, 70, 80, 30);
        jPanel3.add(jTextField6);
        jTextField6.setBounds(120, 100, 80, 30);
        jPanel3.add(jTextField7);
        jTextField7.setBounds(120, 130, 80, 30);
        jPanel3.add(jTextField8);
        jTextField8.setBounds(120, 160, 80, 30);

        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox2);
        jCheckBox2.setBounds(210, 100, 40, 30);

        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox3);
        jCheckBox3.setBounds(210, 130, 40, 30);

        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox4);
        jCheckBox4.setBounds(210, 160, 40, 30);

        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox5);
        jCheckBox5.setBounds(210, 190, 40, 30);

        jCheckBox6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox6);
        jCheckBox6.setBounds(440, 190, 30, 30);

        jLabel37.setText("UGX 500");
        jLabel37.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel37);
        jLabel37.setBounds(270, 40, 70, 30);

        jLabel38.setText("UGX 200");
        jLabel38.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel38);
        jLabel38.setBounds(270, 70, 70, 30);

        jLabel39.setText("UGX 100");
        jLabel39.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel39);
        jLabel39.setBounds(270, 100, 70, 30);

        jLabel40.setText("UGX 50");
        jLabel40.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel40);
        jLabel40.setBounds(270, 130, 70, 30);

        jLabel41.setText("UGX 20");
        jLabel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel41);
        jLabel41.setBounds(270, 160, 70, 30);

        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });
        jPanel3.add(jTextField9);
        jTextField9.setBounds(120, 40, 80, 30);
        jPanel3.add(jTextField10);
        jTextField10.setBounds(350, 190, 80, 30);
        jPanel3.add(jTextField11);
        jTextField11.setBounds(350, 70, 80, 30);
        jPanel3.add(jTextField12);
        jTextField12.setBounds(350, 100, 80, 30);
        jPanel3.add(jTextField13);
        jTextField13.setBounds(350, 130, 80, 30);
        jPanel3.add(jTextField14);
        jTextField14.setBounds(350, 160, 80, 30);

        jCheckBox7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox7);
        jCheckBox7.setBounds(210, 40, 30, 30);

        jCheckBox8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox8);
        jCheckBox8.setBounds(440, 40, 30, 30);

        jCheckBox9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox9ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox9);
        jCheckBox9.setBounds(440, 70, 30, 30);

        jCheckBox10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox10ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox10);
        jCheckBox10.setBounds(440, 100, 30, 30);

        jCheckBox11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox11);
        jCheckBox11.setBounds(440, 130, 30, 30);

        jCheckBox12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox12ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox12);
        jCheckBox12.setBounds(440, 160, 30, 30);

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/print.jpg"))); // NOI18N
        jButton17.setText("Reconcile");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton17);
        jButton17.setBounds(510, 5, 210, 30);

        jLabel42.setText("Check");
        jLabel42.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel42);
        jLabel42.setBounds(440, 5, 60, 30);

        jLabel43.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel43);
        jLabel43.setBounds(20, 220, 710, 20);

        jLabel44.setText("Cash Bal Posted");
        jLabel44.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel44);
        jLabel44.setBounds(470, 40, 110, 30);

        jLabel45.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel45);
        jLabel45.setBounds(590, 40, 140, 30);

        jLabel46.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(jLabel46);
        jLabel46.setBounds(590, 80, 140, 30);

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/print.jpg"))); // NOI18N
        jButton19.setText("View Transactions");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton19);
        jButton19.setBounds(500, 170, 210, 30);
        jButton19.setVisible(false);

        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/print.jpg"))); // NOI18N
        jButton20.setText("Complete Reconcile");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton20);
        jButton20.setBounds(500, 130, 210, 30);
        jButton20.setVisible(false);

        cashRecon.add(jPanel3);
        jPanel3.setBounds(10, 10, 740, 240);

        mainPanel.add(cashRecon);
        cashRecon.setBounds(0, 40, 800, 260);
        cashRecon.setVisible(false);

        jPanel4.setBackground(java.awt.SystemColor.activeCaption);
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        jLabel28.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel28.setForeground(java.awt.SystemColor.controlLtHighlight);
        jLabel28.setText("Principal");
        jLabel28.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jLabel28);
        jLabel28.setBounds(10, 170, 140, 30);

        jCheckBox17.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox17.setText("2");
        jCheckBox17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox17ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox17);
        jCheckBox17.setBounds(220, 130, 40, 30);
        jCheckBox17.setEnabled(false);

        jCheckBox18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBox18.setText("3");
        jCheckBox18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox18ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox18);
        jCheckBox18.setBounds(270, 170, 40, 30);
        jCheckBox18.setEnabled(false);

        jCheckBox19.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox19.setText("4");
        jCheckBox19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox19ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox19);
        jCheckBox19.setBounds(320, 130, 40, 30);
        jCheckBox19.setEnabled(false);

        jCheckBox20.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox20.setText("1");
        jCheckBox20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox20ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox20);
        jCheckBox20.setBounds(170, 130, 40, 30);
        jCheckBox20.setEnabled(false);

        jCheckBox21.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox21.setText("1");
        jCheckBox21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox21ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox21);
        jCheckBox21.setBounds(170, 50, 40, 30);

        jLabel29.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel29.setForeground(java.awt.SystemColor.controlLtHighlight);
        jLabel29.setText("Interest");
        jLabel29.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jLabel29);
        jLabel29.setBounds(10, 50, 140, 30);

        jCheckBox22.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox22.setText("2");
        jCheckBox22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox22ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox22);
        jCheckBox22.setBounds(220, 50, 40, 30);

        jCheckBox23.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox23.setText("3");
        jCheckBox23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox23ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox23);
        jCheckBox23.setBounds(270, 50, 40, 30);

        jCheckBox24.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox24.setText("4");
        jCheckBox24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox24ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox24);
        jCheckBox24.setBounds(320, 50, 40, 30);

        jLabel30.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel30.setForeground(java.awt.SystemColor.controlLtHighlight);
        jLabel30.setText("Accumulated Interest");
        jLabel30.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jLabel30);
        jLabel30.setBounds(10, 90, 140, 30);

        jLabel47.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel47.setForeground(java.awt.SystemColor.controlLtHighlight);
        jLabel47.setText("Loan Penalty");
        jLabel47.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jLabel47);
        jLabel47.setBounds(10, 130, 140, 30);

        jCheckBox25.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox25.setText("1");
        jCheckBox25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox25ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox25);
        jCheckBox25.setBounds(170, 170, 40, 30);
        jCheckBox25.setEnabled(false);

        jCheckBox26.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox26.setText("1");
        jCheckBox26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox26ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox26);
        jCheckBox26.setBounds(170, 90, 40, 30);
        jCheckBox26.setEnabled(false);

        jCheckBox27.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox27.setText("2");
        jCheckBox27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox27ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox27);
        jCheckBox27.setBounds(220, 170, 40, 30);
        jCheckBox27.setEnabled(false);

        jCheckBox28.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox28.setText("2");
        jCheckBox28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox28ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox28);
        jCheckBox28.setBounds(220, 90, 40, 30);
        jCheckBox28.setEnabled(false);

        jCheckBox29.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox29.setText("3");
        jCheckBox29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox29ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox29);
        jCheckBox29.setBounds(270, 90, 40, 30);
        jCheckBox29.setEnabled(false);

        jCheckBox31.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox31.setText("4");
        jCheckBox31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox31ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox31);
        jCheckBox31.setBounds(320, 170, 40, 30);
        jCheckBox31.setEnabled(false);

        jCheckBox32.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox32.setText("4");
        jCheckBox32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox32ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox32);
        jCheckBox32.setBounds(320, 90, 40, 30);
        jCheckBox32.setEnabled(false);

        jCheckBox34.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox34.setText("3");
        jCheckBox34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox34ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox34);
        jCheckBox34.setBounds(270, 130, 40, 30);
        jCheckBox34.setEnabled(false);

        jButton1.setBackground(java.awt.SystemColor.activeCaption);
        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 102));
        jButton1.setText("Reset Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);
        jButton1.setBounds(170, 210, 190, 40);

        jLabel48.setBackground(new java.awt.Color(0, 204, 204));
        jLabel48.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(0, 143, 119));
        jLabel48.setText("Order  Loan Repayment by Checking");
        jLabel48.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jLabel48);
        jLabel48.setBounds(10, 10, 350, 30);

        jButton2.setBackground(java.awt.SystemColor.activeCaption);
        jButton2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 102, 102));
        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);
        jButton2.setBounds(0, 210, 140, 40);

        mainPanel.add(jPanel4);
        jPanel4.setBounds(-4, 40, 804, 260);
        jPanel4.setVisible(false);

        jPanel6.add(mainPanel);
        mainPanel.setBounds(10, 120, 800, 550);

        allAccountsPanel.setBackground(java.awt.SystemColor.activeCaption);
        allAccountsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        allAccountsPanel.setForeground(new java.awt.Color(0, 0, 102));
        allAccountsPanel.setLayout(null);

        jTable3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable3.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(jTable3);

        allAccountsPanel.add(jScrollPane5);
        jScrollPane5.setBounds(10, 10, 800, 610);

        jTextField15.setToolTipText("Search Using The First Letters Of The Second Name Or Last Letters Of The First Name");
        jTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField15KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField15KeyReleased(evt);
            }
        });
        allAccountsPanel.add(jTextField15);
        jTextField15.setBounds(280, 610, 380, 30);

        jLabel25.setText("Search By Account Name");
        jLabel25.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        allAccountsPanel.add(jLabel25);
        jLabel25.setBounds(80, 610, 190, 30);

        jPanel6.add(allAccountsPanel);
        allAccountsPanel.setBounds(10, 0, 800, 650);
        allAccountsPanel.setVisible(false);

        jTabbedPane1.addTab("Transaction Posting", jPanel6);

        jPanel8.setLayout(null);

        jPanel11.setBackground(java.awt.SystemColor.activeCaption);
        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel11.setLayout(null);

        jPanel13.setBackground(java.awt.SystemColor.activeCaption);
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setLayout(null);

        jButton7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton7.setText("REFRESH");
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.SystemColor.activeCaption, java.awt.SystemColor.activeCaption, java.awt.SystemColor.activeCaption, java.awt.SystemColor.activeCaption));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton7);
        jButton7.setBounds(840, 10, 150, 40);

        jComboBox1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loan", "Savings", "Shares" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel13.add(jComboBox1);
        jComboBox1.setBounds(200, 10, 160, 40);
        jComboBox1.setVisible(false);

        jButton6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton6.setText("CREATE TRANSACTION");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton6);
        jButton6.setBounds(10, 10, 190, 40);

        jLabel49.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel49.setText("SELECT TXN TYPE");
        jLabel49.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.add(jLabel49);
        jLabel49.setBounds(10, 10, 160, 40);
        jLabel49.setVisible(false);

        jButton8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton8.setText("SUBMIT TXN");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton8);
        jButton8.setBounds(200, 10, 160, 40);
        jButton8.setEnabled(false);

        jButton22.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton22.setText("EDIT  ITEM");
        jPanel13.add(jButton22);
        jButton22.setBounds(480, 10, 120, 40);
        jButton22.setEnabled(false);

        jButton23.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton23.setText("POST TXN");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton23);
        jButton23.setBounds(720, 10, 120, 40);
        jButton23.setEnabled(false);

        jButton25.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton25.setText("ADD ITEM");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton25);
        jButton25.setBounds(600, 10, 120, 40);
        jButton25.setEnabled(false);

        jButton26.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton26.setText("REJECT TXN");
        jPanel13.add(jButton26);
        jButton26.setBounds(360, 10, 120, 40);
        jButton26.setEnabled(false);

        jButton21.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton21.setText("DELETE TXN");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton21);
        jButton21.setBounds(360, 10, 120, 40);
        jButton21.setEnabled(false);

        jPanel11.add(jPanel13);
        jPanel13.setBounds(0, 640, 1030, 60);

        JpanelSummuryPanel.setBackground(java.awt.SystemColor.activeCaption);
        JpanelSummuryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        JpanelSummuryPanel.setLayout(null);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable4MouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(jTable4);

        JpanelSummuryPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 0, 1030, 600);

        jPanel11.add(JpanelSummuryPanel);
        JpanelSummuryPanel.setBounds(0, 30, 1030, 610);

        jPanelDetailedPanel.setBackground(java.awt.SystemColor.activeCaption);
        jPanelDetailedPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelDetailedPanel.setLayout(null);

        jTable1.setBackground(java.awt.SystemColor.activeCaption);
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanelDetailedPanel.add(jScrollPane1);
        jScrollPane1.setBounds(0, 30, 1030, 550);

        jPanel11.add(jPanelDetailedPanel);
        jPanelDetailedPanel.setBounds(0, 30, 1030, 610);
        jPanelDetailedPanel.setVisible(false);

        jPanel8.add(jPanel11);
        jPanel11.setBounds(0, -30, 1030, 700);

        jTabbedPane1.addTab("Sacco Posting", jPanel8);

        jPanel9.setLayout(null);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jPanel16.setBackground(java.awt.SystemColor.activeCaption);
        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.SystemColor.activeCaptionBorder, java.awt.SystemColor.activeCaptionBorder));
        jPanel16.setLayout(null);

        openDay2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        openDay2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDay2ActionPerformed(evt);
            }
        });
        jPanel16.add(openDay2);
        openDay2.setBounds(980, 10, 40, 38);
        openDay.setEnabled(false);

        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel14.setLayout(null);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(jTable5);

        jPanel14.add(jScrollPane6);
        jScrollPane6.setBounds(0, 0, 980, 490);

        jButton54.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton54.setText("CANCEL");
        jPanel14.add(jButton54);
        jButton54.setBounds(340, 500, 150, 40);

        jButton55.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton55.setText("SAVE");
        jButton55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton55ActionPerformed(evt);
            }
        });
        jPanel14.add(jButton55);
        jButton55.setBounds(40, 500, 150, 40);

        jButton64.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton64.setText("REPLACE DATA");
        jButton64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton64ActionPerformed(evt);
            }
        });
        jPanel14.add(jButton64);
        jButton64.setBounds(190, 500, 150, 40);

        jPanel16.add(jPanel14);
        jPanel14.setBounds(0, 10, 980, 590);
        jPanel14.setVisible(false);

        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel12.setLayout(null);

        jButton4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton4.setText("UPLOAD");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton4);
        jButton4.setBounds(10, 10, 200, 40);
        jButton4.setEnabled(false);

        jComboBox3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox3);
        jComboBox3.setBounds(210, 10, 190, 40);
        jComboBox3.setEnabled(false);

        jTextField17.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField17);
        jTextField17.setBounds(400, 10, 190, 40);
        jTextField17.setEnabled(false);

        jButton57.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton57.setText("TEMPLATE");
        jButton57.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton57ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton57);
        jButton57.setBounds(590, 10, 120, 40);
        jButton57.setEnabled(false);

        jButton28.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton28.setText("UPLOAD");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton28);
        jButton28.setBounds(10, 50, 200, 40);
        jButton28.setEnabled(false);

        jComboBox7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox7ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox7);
        jComboBox7.setBounds(210, 50, 190, 40);
        jComboBox7.setEnabled(false);

        jTextField21.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField21);
        jTextField21.setBounds(400, 50, 190, 40);
        jTextField21.setEnabled(false);

        jButton61.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton61.setText("TEMPLATE");
        jButton61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton61ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton61);
        jButton61.setBounds(590, 50, 120, 40);
        jButton61.setEnabled(false);

        jButton3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton3.setText("UPLOAD");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton3);
        jButton3.setBounds(10, 130, 200, 40);
        jButton3.setEnabled(false);

        jComboBox2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox2);
        jComboBox2.setBounds(210, 130, 190, 40);
        jComboBox2.setEnabled(false);

        jTextField16.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField16);
        jTextField16.setBounds(400, 130, 190, 40);
        jTextField16.setEnabled(false);

        jButton56.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton56.setText("TEMPLATE");
        jButton56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton56ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton56);
        jButton56.setBounds(590, 130, 120, 40);
        jButton56.setEnabled(false);

        jButton52.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton52.setText("UPLOAD");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton52);
        jButton52.setBounds(10, 170, 200, 40);
        jButton52.setEnabled(false);

        jComboBox8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox8ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox8);
        jComboBox8.setBounds(210, 170, 190, 40);
        jComboBox8.setEnabled(false);

        jTextField22.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField22);
        jTextField22.setBounds(400, 170, 190, 40);
        jTextField22.setEnabled(false);

        jButton58.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton58.setText("TEMPLATE");
        jButton58.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton58ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton58);
        jButton58.setBounds(590, 170, 120, 40);
        jButton58.setEnabled(false);

        jButton5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton5.setText("UPLOAD");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton5);
        jButton5.setBounds(10, 210, 200, 40);
        jButton5.setEnabled(false);

        jComboBox4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox4);
        jComboBox4.setBounds(210, 210, 190, 40);
        jComboBox4.setEnabled(false);

        jTextField18.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField18);
        jTextField18.setBounds(400, 210, 190, 40);
        jTextField18.setEnabled(false);

        jButton59.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton59.setText("TEMPLATE");
        jButton59.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton59ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton59);
        jButton59.setBounds(590, 210, 120, 40);
        jButton59.setEnabled(false);

        jButton27.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton27.setText("UPLOAD");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton27);
        jButton27.setBounds(10, 250, 200, 40);
        jButton27.setEnabled(false);

        jComboBox6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox6);
        jComboBox6.setBounds(210, 250, 190, 40);
        jComboBox6.setEnabled(false);

        jTextField20.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField20);
        jTextField20.setBounds(400, 250, 190, 40);
        jTextField20.setEnabled(false);

        jButton63.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton63.setText("TEMPLATE");
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton63);
        jButton63.setBounds(590, 90, 120, 40);
        jButton63.setEnabled(false);

        jButton24.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton24.setText("UPLOAD");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton24);
        jButton24.setBounds(10, 90, 200, 40);
        jButton24.setEnabled(false);

        jComboBox5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox5);
        jComboBox5.setBounds(210, 90, 190, 40);
        jComboBox5.setEnabled(false);

        jTextField19.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField19);
        jTextField19.setBounds(400, 90, 190, 40);
        jTextField19.setEnabled(false);

        jButton60.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton60.setText("TEMPLATE");
        jButton60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton60ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton60);
        jButton60.setBounds(590, 250, 120, 40);
        jButton60.setEnabled(false);

        jCheckBox14.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox14.setText("WITHDRAW SAVINGS");
        jCheckBox14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox14ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox14);
        jCheckBox14.setBounds(710, 50, 210, 40);

        jCheckBox15.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox15.setText("UPLOAD LOAN PYTS");
        jCheckBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox15ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox15);
        jCheckBox15.setBounds(710, 90, 210, 40);

        jCheckBox16.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox16.setText("CAPITALISATION");
        jCheckBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox16ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox16);
        jCheckBox16.setBounds(710, 130, 210, 40);

        jCheckBox30.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox30.setText("DECAPITALISATION");
        jCheckBox30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox30ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox30);
        jCheckBox30.setBounds(710, 170, 210, 40);

        jCheckBox33.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox33.setText("UPLOAD DEPOSITS");
        jCheckBox33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox33ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox33);
        jCheckBox33.setBounds(710, 210, 210, 40);

        jCheckBox35.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox35.setText("WITHDRAW DEPOSITS");
        jCheckBox35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox35ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox35);
        jCheckBox35.setBounds(710, 250, 210, 40);

        jCheckBox38.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox38.setText("UPLOAD SAVINGS");
        jCheckBox38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox38ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox38);
        jCheckBox38.setBounds(710, 10, 210, 40);

        jButton53.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton53.setText("UPLOAD");
        jButton53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton53ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton53);
        jButton53.setBounds(10, 290, 200, 40);
        jButton53.setEnabled(false);

        jComboBox9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox9ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox9);
        jComboBox9.setBounds(210, 290, 190, 40);
        jComboBox9.setEnabled(false);

        jTextField24.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField24);
        jTextField24.setBounds(400, 290, 190, 40);
        jTextField24.setEnabled(false);

        jButton62.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton62.setText("TEMPLATE");
        jButton62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton62ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton62);
        jButton62.setBounds(590, 290, 120, 40);
        jButton62.setEnabled(false);

        jCheckBox36.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox36.setText("ROI PAYMENTS");
        jCheckBox36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox36ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox36);
        jCheckBox36.setBounds(710, 290, 210, 40);

        jButton100.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton100.setText("UPLOAD");
        jButton100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton100ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton100);
        jButton100.setBounds(10, 330, 200, 40);
        jButton100.setEnabled(false);

        jComboBox10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox10ActionPerformed(evt);
            }
        });
        jPanel12.add(jComboBox10);
        jComboBox10.setBounds(210, 330, 190, 40);
        jComboBox10.setEnabled(false);

        jTextField26.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel12.add(jTextField26);
        jTextField26.setBounds(400, 330, 190, 40);
        jTextField26.setEnabled(false);

        jButton101.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton101.setText("TEMPLATE");
        jButton101.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton101ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton101);
        jButton101.setBounds(590, 330, 120, 40);
        jButton101.setEnabled(false);

        jCheckBox37.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox37.setText("LOAN DIR DISBURSEMENTS");
        jCheckBox37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox37ActionPerformed(evt);
            }
        });
        jPanel12.add(jCheckBox37);
        jCheckBox37.setBounds(710, 330, 210, 40);

        jPanel16.add(jPanel12);
        jPanel12.setBounds(40, 50, 940, 380);

        jTabbedPane2.addTab("BULK SIMILAR ITEMS UPLOADS", jPanel16);

        jPanel15.setLayout(null);

        jPanel23.setBackground(java.awt.SystemColor.activeCaption);
        jPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel23.setLayout(null);

        jPanel27.setBackground(java.awt.SystemColor.activeCaption);
        jPanel27.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel27.setLayout(null);

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane11.setViewportView(jTable10);

        jPanel27.add(jScrollPane11);
        jScrollPane11.setBounds(0, 40, 1020, 190);

        jTextField71.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel27.add(jTextField71);
        jTextField71.setBounds(280, 10, 190, 30);

        jTextField76.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel27.add(jTextField76);
        jTextField76.setBounds(470, 10, 180, 30);

        jComboBox56.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox56.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "General", "Expense", "NewLoan", "LoanPyt", "Withdrawal", "Deposit", "Payable", "ClearPayable", "Receivable", "ClearReceivable", "Salary", "DepositPartPay", "WithdrawDepositPartPay", "Savings", "WithdrawSavings", "Capitalisation", "Decaptalisation", "RecoverInterest", "WriteOffInterest", "RecoverPenalty", "WriteOffPenalty", "RecoverAccumulatedInterest", "WriteOffAccumulatedInterest", "BadLoansRecovered" }));
        jComboBox56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox56ActionPerformed(evt);
            }
        });
        jPanel27.add(jComboBox56);
        jComboBox56.setBounds(470, 0, 180, 10);

        jComboBox68.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox68ActionPerformed(evt);
            }
        });
        jPanel27.add(jComboBox68);
        jComboBox68.setBounds(280, 0, 190, 10);
        jComboBox68.setEnabled(true);

        jButton74.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton74.setText("UPLOAD ANALYSIS");
        jButton74.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton74ActionPerformed(evt);
            }
        });
        jPanel27.add(jButton74);
        jButton74.setBounds(140, 0, 140, 40);

        jButton72.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton72.setText("UPLOAD ITEMS");
        jButton72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton72ActionPerformed(evt);
            }
        });
        jPanel27.add(jButton72);
        jButton72.setBounds(0, 0, 140, 40);

        jLabel65.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel65.setText("SEARCH HERE");
        jLabel65.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel27.add(jLabel65);
        jLabel65.setBounds(660, 10, 110, 30);

        jTextField68.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel27.add(jTextField68);
        jTextField68.setBounds(770, 10, 190, 30);

        openDay3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        openDay3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDay3ActionPerformed(evt);
            }
        });
        jPanel27.add(openDay3);
        openDay3.setBounds(969, 8, 40, 30);
        openDay.setEnabled(false);

        jPanel23.add(jPanel27);
        jPanel27.setBounds(0, 0, 1020, 230);

        jPanel24.setBackground(java.awt.SystemColor.activeCaption);
        jPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel24.setLayout(null);
        jPanel23.add(jPanel24);
        jPanel24.setBounds(0, 230, 1020, 10);

        jPanel25.setBackground(java.awt.SystemColor.activeCaption);
        jPanel25.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel25.setLayout(null);

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane10.setViewportView(jTable9);

        jPanel25.add(jScrollPane10);
        jScrollPane10.setBounds(0, 0, 1020, 350);

        jPanel23.add(jPanel25);
        jPanel25.setBounds(0, 240, 1020, 350);

        jPanel26.setBackground(java.awt.SystemColor.activeCaption);
        jPanel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel26.setLayout(null);

        jButton80.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton80.setText("REMOVE TXN");
        jButton80.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton80ActionPerformed(evt);
            }
        });
        jPanel26.add(jButton80);
        jButton80.setBounds(130, 0, 130, 40);
        jButton80.setEnabled(false);

        jButton81.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton81.setText("SAVE");
        jButton81.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton81ActionPerformed(evt);
            }
        });
        jPanel26.add(jButton81);
        jButton81.setBounds(10, 0, 120, 40);

        jButton83.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton83.setText("SKIP TXN");
        jButton83.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton83ActionPerformed(evt);
            }
        });
        jPanel26.add(jButton83);
        jButton83.setBounds(260, 0, 120, 40);
        jButton83.setEnabled(false);

        jPanel23.add(jPanel26);
        jPanel26.setBounds(0, 590, 1020, 50);

        jPanel15.add(jPanel23);
        jPanel23.setBounds(0, 0, 1020, 640);

        jTabbedPane2.addTab("BULK DIFFERENT ITEMS UPLOADS", jPanel15);

        jPanel9.add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 0, 1030, 670);

        jTabbedPane1.addTab("Upload Posting", jPanel9);

        jPanel32.setLayout(null);

        jTabbedPane3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jPanel33.setLayout(null);

        jPanel35.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel35.setLayout(null);

        jPanel20.setBackground(java.awt.SystemColor.activeCaption);
        jPanel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel20.setLayout(null);

        jPanel10.setBackground(java.awt.SystemColor.activeCaption);
        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel10.setLayout(null);

        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane13.setViewportView(jTable12);

        jPanel10.add(jScrollPane13);
        jScrollPane13.setBounds(670, 70, 370, 150);

        jPanel29.setBackground(java.awt.SystemColor.activeCaption);
        jPanel29.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.setLayout(null);

        jButton82.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton82.setText("TXN TYPE");
        jButton82.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton82ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton82);
        jButton82.setBounds(0, 0, 200, 30);

        jButton66.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        jButton66.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jButton66HierarchyChanged(evt);
            }
        });
        jButton66.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton66ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton66);
        jButton66.setBounds(0, 30, 20, 30);
        jButton66.setVisible(false);

        creditAccountField72.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 51, 255), null));
        creditAccountField72.setForeground(new java.awt.Color(0, 102, 51));
        try {
            creditAccountField72.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-#######-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        creditAccountField72.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditAccountField72.setValue(null);
        creditAccountField72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditAccountField72ActionPerformed(evt);
            }
        });
        creditAccountField72.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                creditAccountField72KeyPressed(evt);
            }
        });
        jPanel29.add(creditAccountField72);
        creditAccountField72.setBounds(20, 30, 120, 30);
        creditAccountField.addKeyListener(this);
        creditAccountField72.setVisible(false);

        creditAccountField71.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 51, 255), null));
        creditAccountField71.setForeground(new java.awt.Color(0, 102, 51));
        try {
            creditAccountField71.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-#######-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        creditAccountField71.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        creditAccountField71.setValue(null);
        creditAccountField71.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditAccountField71ActionPerformed(evt);
            }
        });
        creditAccountField71.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                creditAccountField71KeyPressed(evt);
            }
        });
        jPanel29.add(creditAccountField71);
        creditAccountField71.setBounds(160, 30, 130, 30);
        creditAccountField.addKeyListener(this);
        creditAccountField71.setVisible(false);

        jLabel56.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel56.setText("ANNUAL RATE");
        jLabel56.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.add(jLabel56);
        jLabel56.setBounds(170, 30, 100, 30);
        jLabel56.setVisible(false);

        jLabel53.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel53.setText("TENURE");
        jLabel53.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.add(jLabel53);
        jLabel53.setBounds(310, 30, 60, 30);
        jLabel53.setVisible(false);

        jTextField61.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel29.add(jTextField61);
        jTextField61.setBounds(370, 30, 30, 30);
        jTextField25.setText("");
        jTextField61.setVisible(false);

        jTextField62.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel29.add(jTextField62);
        jTextField62.setBounds(400, 30, 90, 30);
        jTextField62.setVisible(false);

        jButton67.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/calender.png"))); // NOI18N
        jButton67.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton67ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton67);
        jButton67.setBounds(490, 30, 20, 30);
        jButton67.setVisible(false);

        jLabel60.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel60.setText("NARRATION");
        jLabel60.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.add(jLabel60);
        jLabel60.setBounds(140, 90, 100, 30);
        jLabel60.setVisible(false);

        jTextField67.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel29.add(jTextField67);
        jTextField67.setBounds(240, 90, 230, 30);
        jTextField67.setVisible(false);

        jButton77.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton77.setText("ADD TXN");
        jButton77.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton77ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton77);
        jButton77.setBounds(0, 120, 100, 30);

        jButton68.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton68.setText("REMOVE TXN");
        jButton68.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton68ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton68);
        jButton68.setBounds(100, 120, 130, 30);
        ;

        jButton71.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton71.setText("CANCEL TXN");
        jButton71.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton71ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton71);
        jButton71.setBounds(230, 120, 120, 30);

        jButton84.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton84.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/budget-icon.jpg"))); // NOI18N
        jButton84.setToolTipText("Add Security");
        jButton84.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton84ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton84);
        jButton84.setBounds(510, 30, 10, 30);
        jButton84.setVisible(false);

        amountCredit2.setForeground(new java.awt.Color(0, 102, 51));
        amountCredit2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###,###,###,###"))));
        amountCredit2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        amountCredit2.setValue(null);
        amountCredit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountCredit2ActionPerformed(evt);
            }
        });
        jPanel29.add(amountCredit2);
        amountCredit2.setBounds(0, 90, 140, 30);
        amountCredit.addKeyListener(this);
        amountCredit2.setVisible(false);

        repaymentCycle.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        repaymentCycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Repayment Cycle", "Daily", "Weekly", "Fortnightly", "Monthly", "Quaterly", "Half Yearly", "Annually", "Biennially" }));
        repaymentCycle.setToolTipText("Loan Repayment Frequency");
        repaymentCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repaymentCycleActionPerformed(evt);
            }
        });
        jPanel29.add(repaymentCycle);
        repaymentCycle.setBounds(520, 30, 150, 30);
        repaymentCycle.setVisible(false);

        jTextField23.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel29.add(jTextField23);
        jTextField23.setBounds(420, 0, 100, 30);
        jTextField23.setVisible(false);
        jTextField23.setText("");

        jButton98.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/calender.png"))); // NOI18N
        jButton98.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton98ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton98);
        jButton98.setBounds(520, 0, 20, 30);
        jButton98.setVisible(false);

        InterestRegimeComboBox.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        InterestRegimeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Interest Regime", "Flat", "Reducing With Equal Period Instalments", "Reducing With Reducing Instalments" }));
        InterestRegimeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InterestRegimeComboBoxActionPerformed(evt);
            }
        });
        jPanel29.add(InterestRegimeComboBox);
        InterestRegimeComboBox.setBounds(310, 0, 360, 30);
        InterestRegimeComboBox.setVisible(false);

        jComboBox26.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox26.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "P&I", "CloseLoan", "I", "AI", "LP", "P", "P&I&AI", "P&I&AI&LP", " " }));
        jComboBox26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox26ActionPerformed(evt);
            }
        });
        jPanel29.add(jComboBox26);
        jComboBox26.setBounds(200, 0, 110, 30);
        jComboBox26.setVisible(false);

        jLabel67.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel67.setText("FOR PERIOD");
        jLabel67.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.add(jLabel67);
        jLabel67.setBounds(310, 0, 110, 30);
        jLabel67.setVisible(false);

        jComboBox27.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox27.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Instalments To Process", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "73", " " }));
        jComboBox27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox27ActionPerformed(evt);
            }
        });
        jPanel29.add(jComboBox27);
        jComboBox27.setBounds(200, 0, 260, 30);
        jComboBox27.setVisible(false);

        jTextField25.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel29.add(jTextField25);
        jTextField25.setBounds(520, 90, 30, 30);
        jTextField25.setText("");
        jTextField25.setVisible(false);

        jLabel54.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel54.setText("Period");
        jLabel54.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.add(jLabel54);
        jLabel54.setBounds(470, 90, 50, 30);
        jLabel54.setVisible(false);

        jButton99.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton99.setText("Loan Xtics");
        jPanel29.add(jButton99);
        jButton99.setBounds(550, 90, 120, 30);
        jButton99.setVisible(false);

        jLabel55.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel55.setText("Fixed Interest");
        jLabel55.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel29.add(jLabel55);
        jLabel55.setBounds(140, 30, 90, 30);
        jLabel55.setVisible(false);

        amountCredit3.setForeground(new java.awt.Color(0, 102, 51));
        amountCredit3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###,###,###,###"))));
        amountCredit3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        amountCredit3.setValue(null);
        amountCredit3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountCredit3ActionPerformed(evt);
            }
        });
        jPanel29.add(amountCredit3);
        amountCredit3.setBounds(230, 30, 80, 30);
        amountCredit3.addKeyListener(this);
        amountCredit3.setVisible(false);

        jButton65.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/find-icon.png"))); // NOI18N
        jButton65.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton65ActionPerformed(evt);
            }
        });
        jPanel29.add(jButton65);
        jButton65.setBounds(140, 30, 20, 30);
        jButton65.setVisible(false);

        jTextField60.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField60.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField60FocusLost(evt);
            }
        });
        jPanel29.add(jTextField60);
        jTextField60.setBounds(270, 30, 40, 30);
        jTextField60.setVisible(false);

        portfolioOwner.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        portfolioOwner.setToolTipText("Loan Repayment Frequency");
        portfolioOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portfolioOwnerActionPerformed(evt);
            }
        });
        jPanel29.add(portfolioOwner);
        portfolioOwner.setBounds(350, 120, 270, 30);
        repaymentCycle.setVisible(false);

        portfolioOwner1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        portfolioOwner1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT COMPUTATION TYPE", "Simple Interest", "Compound Interest" }));
        portfolioOwner1.setToolTipText("SELECT COMPUTATION TYPE");
        portfolioOwner1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portfolioOwner1ActionPerformed(evt);
            }
        });
        jPanel29.add(portfolioOwner1);
        portfolioOwner1.setBounds(0, 60, 270, 30);
        portfolioOwner1.setVisible(false);

        jPanel10.add(jPanel29);
        jPanel29.setBounds(0, 70, 670, 160);

        jPanel30.setBackground(java.awt.SystemColor.activeCaption);
        jPanel30.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel30.setLayout(null);

        openDay4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        openDay4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDay4ActionPerformed(evt);
            }
        });
        jPanel30.add(openDay4);
        openDay4.setBounds(1010, 0, 30, 40);
        openDay.setEnabled(false);

        jButton88.setBackground(new java.awt.Color(153, 51, 0));
        jButton88.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton88.setForeground(new java.awt.Color(255, 255, 255));
        jButton88.setText("BCK UP LOAN");
        jButton88.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton88ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton88);
        jButton88.setBounds(887, 0, 123, 40);
        jButton88.setEnabled(false);

        jButton89.setBackground(new java.awt.Color(0, 153, 153));
        jButton89.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton89.setText("Print ");
        jButton89.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton89ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton89);
        jButton89.setBounds(540, 0, 80, 40);

        jCheckBox39PostAnAdjustment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox39PostAnAdjustment.setText("Post An Adjustment");
        jCheckBox39PostAnAdjustment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox39PostAnAdjustmentActionPerformed(evt);
            }
        });
        jPanel30.add(jCheckBox39PostAnAdjustment);
        jCheckBox39PostAnAdjustment.setBounds(690, 40, 190, 30);
        jCheckBox39PostAnAdjustment.setVisible(false);

        jButton103.setBackground(new java.awt.Color(0, 0, 0));
        jButton103.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton103.setForeground(new java.awt.Color(0, 204, 204));
        jButton103.setText("Aging Analysis");
        jPanel30.add(jButton103);
        jButton103.setBounds(420, 0, 120, 40);
        jButton103.setVisible(false);

        jButton104.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton104.setForeground(new java.awt.Color(204, 0, 0));
        jButton104.setText("ACTIVATE BCKUP");
        jButton104.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton104ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton104);
        jButton104.setBounds(620, 0, 150, 40);

        jButton105.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton105.setForeground(new java.awt.Color(255, 102, 0));
        jButton105.setText("Cash");
        jButton105.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton105ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton105);
        jButton105.setBounds(0, 0, 80, 40);
        jButton105.setVisible(false);

        jButton106.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton106.setForeground(new java.awt.Color(0, 51, 153));
        jButton106.setText("Historical ");
        jPanel30.add(jButton106);
        jButton106.setBounds(170, 0, 110, 40);
        jButton106.setVisible(false);

        jButton107.setBackground(new java.awt.Color(0, 0, 0));
        jButton107.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton107.setForeground(java.awt.SystemColor.controlLtHighlight);
        jButton107.setText("Loan Statement");
        jButton107.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton107ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton107);
        jButton107.setBounds(280, 0, 140, 40);
        jButton107.setVisible(false);

        jButton108.setBackground(new java.awt.Color(153, 0, 153));
        jButton108.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jButton108.setForeground(java.awt.SystemColor.controlLtHighlight);
        jButton108.setText("QUICK REPORTS");
        jButton108.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton108ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton108);
        jButton108.setBounds(880, 40, 160, 30);

        jButton109.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton109.setForeground(new java.awt.Color(255, 51, 255));
        jButton109.setText("Summury ");
        jPanel30.add(jButton109);
        jButton109.setBounds(80, 0, 95, 40);
        jButton109.setVisible(false);

        jLabel58.setBackground(new java.awt.Color(153, 0, 153));
        jLabel58.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel58.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        jLabel58.setText("BIASHARA MAIN ACCOUNT");
        jLabel58.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel30.add(jLabel58);
        jLabel58.setBounds(0, 40, 10, 30);
        jLabel58.setVisible(false);

        jCheckBox39PostAnAdjustment1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox39PostAnAdjustment1.setText("Print Receipts Automatically");
        jCheckBox39PostAnAdjustment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox39PostAnAdjustment1ActionPerformed(evt);
            }
        });
        jPanel30.add(jCheckBox39PostAnAdjustment1);
        jCheckBox39PostAnAdjustment1.setBounds(450, 40, 240, 30);
        jCheckBox39PostAnAdjustment.setVisible(false);

        jButton110.setBackground(new java.awt.Color(0, 102, 102));
        jButton110.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton110.setForeground(new java.awt.Color(255, 255, 255));
        jButton110.setText("BCK UP A/C");
        jButton110.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton110ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton110);
        jButton110.setBounds(770, 0, 120, 40);
        jButton110.setEnabled(false);

        jCheckBox39PostAnAdjustment2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox39PostAnAdjustment2.setText("None Compound Interest");
        jCheckBox39PostAnAdjustment2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox39PostAnAdjustment2ActionPerformed(evt);
            }
        });
        jPanel30.add(jCheckBox39PostAnAdjustment2);
        jCheckBox39PostAnAdjustment2.setBounds(180, 40, 190, 30);
        jCheckBox39PostAnAdjustment.setVisible(false);

        jCheckBox39PostAnAdjustment3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCheckBox39PostAnAdjustment3.setText("Compound  Interest");
        jCheckBox39PostAnAdjustment3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox39PostAnAdjustment3ActionPerformed(evt);
            }
        });
        jPanel30.add(jCheckBox39PostAnAdjustment3);
        jCheckBox39PostAnAdjustment3.setBounds(10, 40, 170, 30);
        jCheckBox39PostAnAdjustment.setVisible(false);

        jPanel10.add(jPanel30);
        jPanel30.setBounds(0, 0, 1040, 70);

        jPanel20.add(jPanel10);
        jPanel10.setBounds(0, 0, 1040, 220);

        jPanel19.setBackground(java.awt.SystemColor.activeCaption);
        jPanel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel19.setLayout(null);

        jPanel18.setBackground(java.awt.SystemColor.activeCaption);
        jPanel18.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel18.setLayout(null);

        jButton75.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton75.setText("CANCEL BATCH");
        jButton75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton75ActionPerformed(evt);
            }
        });
        jPanel18.add(jButton75);
        jButton75.setBounds(150, 0, 150, 40);

        batchPosingButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        batchPosingButton.setText("SAVE");
        batchPosingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchPosingButtonActionPerformed(evt);
            }
        });
        jPanel18.add(batchPosingButton);
        batchPosingButton.setBounds(20, 0, 130, 40);

        jLabel59.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel59.setText("Search Here");
        jLabel59.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel18.add(jLabel59);
        jLabel59.setBounds(300, 0, 730, 40);

        jTextField66.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel18.add(jTextField66);
        jTextField66.setBounds(520, 0, 510, 40);

        jPanel19.add(jPanel18);
        jPanel18.setBounds(0, 180, 750, 40);

        jTable6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(jTable6);

        jPanel19.add(jScrollPane7);
        jScrollPane7.setBounds(0, 0, 1040, 180);

        jPanel20.add(jPanel19);
        jPanel19.setBounds(0, 220, 1040, 220);

        jPanel28.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel28.setLayout(null);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane12.setViewportView(jTable11);

        jPanel28.add(jScrollPane12);
        jScrollPane12.setBounds(0, 20, 920, 350);

        jLabel66.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel66.setText("SEARCH HERE");
        jLabel66.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel28.add(jLabel66);
        jLabel66.setBounds(0, 370, 190, 40);

        jTextField69.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel28.add(jTextField69);
        jTextField69.setBounds(190, 370, 360, 40);

        openDay5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        openDay5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDay5ActionPerformed(evt);
            }
        });
        jPanel28.add(openDay5);
        openDay5.setBounds(1000, 370, 40, 40);
        openDay.setEnabled(false);

        jPanel20.add(jPanel28);
        jPanel28.setBounds(0, 10, 1040, 430);
        jPanel28.setVisible(false);

        jPanel31.setBackground(java.awt.SystemColor.activeCaption);
        jPanel31.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel31.setLayout(null);

        jTable13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane14.setViewportView(jTable13);

        jPanel31.add(jScrollPane14);
        jScrollPane14.setBounds(10, 0, 1030, 160);

        jLabel64.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel64.setText("Search Here");
        jLabel64.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel31.add(jLabel64);
        jLabel64.setBounds(10, 160, 220, 40);

        jTextField70.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel31.add(jTextField70);
        jTextField70.setBounds(230, 160, 320, 40);

        jPanel20.add(jPanel31);
        jPanel31.setBounds(0, 440, 1040, 200);

        jPanel35.add(jPanel20);
        jPanel20.setBounds(0, 0, 1040, 640);

        jPanel21.setBackground(java.awt.SystemColor.activeCaption);
        jPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.setLayout(null);

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(jTable7);

        jPanel21.add(jScrollPane8);
        jScrollPane8.setBounds(0, 0, 1020, 590);

        jTextField65.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel21.add(jTextField65);
        jTextField65.setBounds(910, 590, 90, 40);
        jTextField61.setVisible(false);

        jLabel57.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel57.setText("Search ");
        jLabel57.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.add(jLabel57);
        jLabel57.setBounds(850, 590, 60, 40);
        jLabel53.setVisible(false);

        jCheckBox65.setText("CREATE NEW CUSTOMER");
        jCheckBox65.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox65ActionPerformed(evt);
            }
        });
        jPanel21.add(jCheckBox65);
        jCheckBox65.setBounds(10, 590, 260, 40);
        jCheckBox65.setText("CREATE NEW CUSTOMER/SUB-LEDGER");

        jLabel61.setBackground(java.awt.SystemColor.activeCaption);
        jLabel61.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(0, 153, 102));
        jLabel61.setText("Title");
        jLabel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.add(jLabel61);
        jLabel61.setBounds(270, 590, 40, 40);
        jLabel61.setVisible(false);

        titleJCbox2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        titleJCbox2.setForeground(new java.awt.Color(0, 51, 204));
        titleJCbox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mr.", "Mrs.", "Ms.", "Hon.", "Dr.", "Prof.", "Sir" }));
        jPanel21.add(titleJCbox2);
        titleJCbox2.setBounds(310, 590, 40, 40);
        titleJCbox2.setVisible(false);

        jLabel62.setBackground(java.awt.SystemColor.controlLtHighlight);
        jLabel62.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(54, 149, 42));
        jLabel62.setText("Phone Number");
        jLabel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.add(jLabel62);
        jLabel62.setBounds(350, 590, 100, 40);
        jLabel62.setVisible(false);

        firstName3.setForeground(new java.awt.Color(0, 153, 51));
        firstName3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        firstName3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstName3ActionPerformed(evt);
            }
        });
        jPanel21.add(firstName3);
        firstName3.setBounds(450, 590, 130, 40);
        firstName3.setVisible(false);

        jLabel63.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(57, 146, 31));
        jLabel63.setText("Full Name");
        jLabel63.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.add(jLabel63);
        jLabel63.setBounds(580, 590, 80, 40);
        jLabel63.setVisible(false);

        lastName2.setForeground(new java.awt.Color(0, 153, 51));
        lastName2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.add(lastName2);
        lastName2.setBounds(660, 590, 120, 40);
        lastName2.setVisible(false);

        jButton69.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/submit.png"))); // NOI18N
        jButton69.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton69ActionPerformed(evt);
            }
        });
        jPanel21.add(jButton69);
        jButton69.setBounds(780, 590, 30, 40);
        jButton69.setVisible(false);

        jButton70.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/images.jpg"))); // NOI18N
        jButton70.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton70ActionPerformed(evt);
            }
        });
        jPanel21.add(jButton70);
        jButton70.setBounds(820, 590, 30, 40);
        jButton69.setVisible(false);

        openDay6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openDay6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        openDay6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDay6ActionPerformed(evt);
            }
        });
        jPanel21.add(openDay6);
        openDay6.setBounds(1000, 590, 20, 40);
        openDay.setEnabled(false);

        jPanel35.add(jPanel21);
        jPanel21.setBounds(0, 0, 1040, 640);
        jPanel21.setVisible(false);

        jPanel22.setBackground(java.awt.SystemColor.activeCaption);
        jPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel22.setLayout(null);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane9.setViewportView(jTable8);

        jPanel22.add(jScrollPane9);
        jScrollPane9.setBounds(10, 10, 1000, 590);

        jLabel52.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel52.setText("SEARCH HERE:");
        jLabel52.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel22.add(jLabel52);
        jLabel52.setBounds(560, 600, 170, 40);

        jTextField73.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel22.add(jTextField73);
        jTextField73.setBounds(730, 600, 280, 40);

        jPanel35.add(jPanel22);
        jPanel22.setBounds(20, 0, 1020, 640);
        jPanel22.setVisible(false);

        jPanel33.add(jPanel35);
        jPanel35.setBounds(0, 0, 1040, 640);

        jTabbedPane3.addTab("POSTING", jPanel33);

        jPanel34.setLayout(null);

        jPanel7.setBackground(java.awt.SystemColor.activeCaption);
        jPanel7.setLayout(null);

        jPanel37.setBackground(java.awt.SystemColor.activeCaption);
        jPanel37.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel37.setLayout(null);

        jTable14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane15.setViewportView(jTable14);

        jPanel37.add(jScrollPane15);
        jScrollPane15.setBounds(0, 0, 1030, 560);

        jPanel36.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel36.setLayout(null);

        jButton90.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton90.setText("EXCEL");
        jPanel36.add(jButton90);
        jButton90.setBounds(430, 5, 140, 40);

        jButton91.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton91.setText("PRINT");
        jPanel36.add(jButton91);
        jButton91.setBounds(0, 5, 150, 40);

        jButton92.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton92.setText("PDF");
        jPanel36.add(jButton92);
        jButton92.setBounds(150, 5, 140, 40);

        jButton93.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton93.setText("EMAIL");
        jPanel36.add(jButton93);
        jButton93.setBounds(290, 5, 140, 40);

        jLabel51.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel51.setText("SEARCH HERE");
        jLabel51.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel36.add(jLabel51);
        jLabel51.setBounds(570, 5, 120, 40);

        jTextField72.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel36.add(jTextField72);
        jTextField72.setBounds(690, 5, 330, 40);

        jPanel37.add(jPanel36);
        jPanel36.setBounds(0, 560, 1030, 50);

        jPanel7.add(jPanel37);
        jPanel37.setBounds(0, 30, 1030, 610);

        jPanel38.setBackground(java.awt.SystemColor.activeCaption);
        jPanel38.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel38.setLayout(null);

        jButton85.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton85.setText("DELETE");
        jButton85.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton85ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton85);
        jButton85.setBounds(320, 0, 160, 30);
        jButton85.setEnabled(false);

        jButton86.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton86.setText("UPDATE");
        jButton86.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton86ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton86);
        jButton86.setBounds(160, 0, 160, 30);
        jButton86.setEnabled(false);

        jButton87.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton87.setText("CREATE");
        jButton87.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton87ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton87);
        jButton87.setBounds(0, 0, 160, 30);

        jButton94.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton94.setIcon(new javax.swing.ImageIcon(getClass().getResource("/googo/pmms/project2/images/refresh.png"))); // NOI18N
        jButton94.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton94ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton94);
        jButton94.setBounds(1000, 0, 30, 30);
        jButton85.setEnabled(false);

        jPanel7.add(jPanel38);
        jPanel38.setBounds(0, 0, 1030, 30);

        jPanel34.add(jPanel7);
        jPanel7.setBounds(0, 0, 1040, 640);

        jTabbedPane3.addTab("LOAN BALANCE", jPanel34);

        jPanel39.setLayout(null);

        jPanel40.setBackground(java.awt.SystemColor.activeCaption);
        jPanel40.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel40.setLayout(null);

        jTabbedPane4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jPanel42.setBackground(java.awt.SystemColor.activeCaption);
        jPanel42.setLayout(null);

        jPanel41.setBackground(java.awt.SystemColor.activeCaption);
        jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel41.setLayout(null);

        jButton95.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton95.setText("VIEW VOURCHER");
        jPanel41.add(jButton95);
        jButton95.setBounds(320, 0, 170, 40);

        jButton96.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton96.setText("VIEW TXN");
        jPanel41.add(jButton96);
        jButton96.setBounds(0, 0, 150, 40);

        jButton97.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton97.setText("PRINT VOURCHER");
        jPanel41.add(jButton97);
        jButton97.setBounds(150, 0, 170, 40);

        jPanel42.add(jPanel41);
        jPanel41.setBounds(0, 0, 1030, 70);

        jTable15.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane16.setViewportView(jTable15);

        jPanel42.add(jScrollPane16);
        jScrollPane16.setBounds(0, 70, 1030, 460);

        jPanel46.setLayout(null);
        jPanel42.add(jPanel46);
        jPanel46.setBounds(0, 530, 1030, 80);

        jTabbedPane4.addTab("POSTED VOUCHERS", jPanel42);

        jPanel43.setLayout(null);

        jPanel44.setBackground(java.awt.SystemColor.activeCaption);
        jPanel44.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel44.setLayout(null);

        jPanel45.setBackground(java.awt.SystemColor.activeCaption);
        jPanel44.add(jPanel45);
        jPanel45.setBounds(0, 0, 1030, 150);

        jTable16.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable16.setToolTipText("");
        jScrollPane17.setViewportView(jTable16);

        jPanel44.add(jScrollPane17);
        jScrollPane17.setBounds(0, 150, 1030, 402);

        jPanel43.add(jPanel44);
        jPanel44.setBounds(0, 0, 1030, 610);

        jTabbedPane4.addTab("CREATE EXPENSE VOUCHER", jPanel43);

        jPanel40.add(jTabbedPane4);
        jTabbedPane4.setBounds(0, 0, 1030, 640);

        jPanel39.add(jPanel40);
        jPanel40.setBounds(0, 0, 1030, 640);

        jTabbedPane3.addTab("VOUCHER MANAGEMENT", jPanel39);

        jTabbedPane5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jPanel17.setBackground(java.awt.SystemColor.activeCaption);
        jPanel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel17.setLayout(null);

        jPanel49.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel17.add(jPanel49);
        jPanel49.setBounds(0, 0, 720, 210);

        jTabbedPane5.addTab("RETURN ON SAVINGS", jPanel17);

        jPanel47.setBackground(java.awt.SystemColor.activeCaption);
        jPanel47.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel47.setLayout(null);

        jPanel48.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel48.setLayout(null);
        jPanel47.add(jPanel48);
        jPanel48.setBounds(10, 10, 530, 190);

        jTabbedPane5.addTab("RETURN ON SHARES", jPanel47);

        jTabbedPane3.addTab("RETURN ON INVESTMENTS", jTabbedPane5);

        jPanel32.add(jTabbedPane3);
        jTabbedPane3.setBounds(0, 0, 1050, 670);

        jTabbedPane1.addTab("Batch Posting", jPanel32);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(180, 0, 1050, 700);

        jButton40.setBackground(java.awt.SystemColor.activeCaption);
        jButton40.setText("Blue");
        getContentPane().add(jButton40);
        jButton40.setBounds(1810, 190, 53, 23);

        jButton48.setBackground(new java.awt.Color(201, 222, 223));
        jButton48.setText("Blue");
        getContentPane().add(jButton48);
        jButton48.setBounds(1870, 170, 53, 23);

        jButton46.setBackground(java.awt.SystemColor.activeCaption);
        jButton46.setText("Blue");
        getContentPane().add(jButton46);
        jButton46.setBounds(1870, 190, 53, 23);

        jButton41.setBackground(java.awt.SystemColor.activeCaption);
        jButton41.setText("Blue");
        getContentPane().add(jButton41);
        jButton41.setBounds(1920, 190, 53, 23);

        jButton36.setBackground(java.awt.SystemColor.activeCaption);
        jButton36.setText("Blue");
        getContentPane().add(jButton36);
        jButton36.setBounds(1810, 210, 53, 23);

        jButton44.setBackground(new java.awt.Color(204, 165, 165));
        jButton44.setText("Blue");
        getContentPane().add(jButton44);
        jButton44.setBounds(1870, 210, 53, 23);

        jButton39.setBackground(new java.awt.Color(204, 204, 255));
        jButton39.setText("Blue");
        getContentPane().add(jButton39);
        jButton39.setBounds(1920, 210, 53, 23);

        jButton30.setBackground(new java.awt.Color(0, 153, 255));
        jButton30.setText("Blue");
        getContentPane().add(jButton30);
        jButton30.setBounds(1810, 230, 53, 23);

        jButton43.setBackground(new java.awt.Color(204, 204, 204));
        jButton43.setText("Blue");
        getContentPane().add(jButton43);
        jButton43.setBounds(1870, 230, 53, 23);

        jButton42.setBackground(new java.awt.Color(0, 204, 102));
        jButton42.setText("Blue");
        getContentPane().add(jButton42);
        jButton42.setBounds(1920, 230, 53, 23);

        jButton35.setBackground(new java.awt.Color(255, 204, 204));
        jButton35.setText("Blue");
        getContentPane().add(jButton35);
        jButton35.setBounds(1810, 250, 53, 23);

        jButton45.setBackground(new java.awt.Color(255, 255, 204));
        jButton45.setText("Blue");
        getContentPane().add(jButton45);
        jButton45.setBounds(1870, 250, 53, 23);

        jButton34.setBackground(new java.awt.Color(0, 204, 255));
        jButton34.setText("Blue");
        getContentPane().add(jButton34);
        jButton34.setBounds(1920, 250, 53, 23);

        jButton33.setBackground(new java.awt.Color(152, 198, 94));
        jButton33.setText("Blue");
        getContentPane().add(jButton33);
        jButton33.setBounds(1810, 270, 53, 23);

        jButton37.setBackground(new java.awt.Color(204, 153, 255));
        jButton37.setText("Blue");
        getContentPane().add(jButton37);
        jButton37.setBounds(1870, 270, 53, 23);

        jButton29.setBackground(new java.awt.Color(0, 204, 204));
        jButton29.setText("Blue");
        getContentPane().add(jButton29);
        jButton29.setBounds(1920, 270, 53, 23);

        jButton38.setBackground(new java.awt.Color(204, 204, 0));
        jButton38.setText("Blue");
        getContentPane().add(jButton38);
        jButton38.setBounds(1810, 290, 53, 23);

        jButton32.setBackground(new java.awt.Color(0, 153, 153));
        jButton32.setText("Blue");
        getContentPane().add(jButton32);
        jButton32.setBounds(1870, 290, 53, 23);

        jButton47.setBackground(new java.awt.Color(204, 255, 204));
        jButton47.setText("Blue");
        getContentPane().add(jButton47);
        jButton47.setBounds(1930, 290, 53, 23);

        jButton31.setBackground(new java.awt.Color(255, 204, 153));
        jButton31.setText("Blue");
        getContentPane().add(jButton31);
        jButton31.setBounds(1810, 310, 53, 23);

        jButton49.setBackground(new java.awt.Color(255, 204, 204));
        jButton49.setText("jButton5");
        getContentPane().add(jButton49);
        jButton49.setBounds(1870, 320, 73, 23);

        jButton50.setBackground(java.awt.SystemColor.controlLtHighlight);
        jButton50.setText("jButton5");
        getContentPane().add(jButton50);
        jButton50.setBounds(1790, 330, 73, 23);

        jButton51.setBackground(new java.awt.Color(0, 51, 51));
        jButton51.setText("jButton5");
        getContentPane().add(jButton51);
        jButton51.setBounds(1800, 360, 73, 23);

        jButton73.setBackground(java.awt.SystemColor.controlLtHighlight);
        jButton73.setText("jButton5");
        getContentPane().add(jButton73);
        jButton73.setBounds(1800, 410, 73, 23);

        jButton78.setBackground(new java.awt.Color(255, 204, 204));
        jButton78.setText("jButton5");
        getContentPane().add(jButton78);
        jButton78.setBounds(1880, 400, 73, 23);

        jButton79.setBackground(new java.awt.Color(0, 51, 51));
        jButton79.setText("jButton5");
        getContentPane().add(jButton79);
        jButton79.setBounds(1810, 440, 73, 23);

        jMenu1.setText("Navigation Guide");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        jMenuItem1.setText("Loan management Module");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Processing");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("New");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clockActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
       newButton(); 
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        LoanManagmentWindow f = new LoanManagmentWindow(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed

    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      int i=1;
     while(i<=5){
     
     JOptionPane.showMessageDialog(this, "SYSTEM LOG OUT ERROR!!!!!!!!!");
     }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
loan.fillWithPortfolioNames(portfolioOwner);
          if(loan.getMethod(this)==2){
          jCheckBox39PostAnAdjustment2.setSelected(false);
      jCheckBox39PostAnAdjustment3.setSelected(true);
        }else if(loan.getMethod(this)==1){
        
          jCheckBox39PostAnAdjustment2.setSelected(true);
      jCheckBox39PostAnAdjustment3.setSelected(false);
        }
        
        
        
        
        jTextField25.setText(jTextField61.getText());
        
        
         if(dbq.isBackUpedUp("pmms",this)){
           jButton110.setEnabled(false);

}
         
         if(dbq.isBackUpedUp("pmms_loans",this)){
           jButton88.setEnabled(false);

}   
         
        if(dbq.getNumberFromTo()==333){
        jCheckBox39PostAnAdjustment1.setSelected(true);
        }else if(dbq.getNumberFromTo()==777){
        
         jCheckBox39PostAnAdjustment1.setSelected(false);
        }
        
        
        amortDetails=new ArrayList();
//JOptionPane.showMessageDialog(this, "wwwwww");
        if(!dbq.statTableNotEmpety()){
////        JOptionPane.showMessageDialog(this, "wwwwwwff");
        dbq.initializeSummuryTable();
        }

fios.intFileWriterReplace(fios.createFileName("postingEntry", "generalTrn", "budgetEstimateNo.txt"), rdb.getnumberOfBudgetPeriods()+"");

 SwingWorker<Void,Void> initialiseSavingsValueTotalCompletedWrittenOff = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
//dbq.initialiseDepositValueTotal();
//dbq.initialiseDepositValueTotal2();
//dbq.initialiseSharesValueTotal();
//dbq.initialiseLoanValueNumber();
//dbq.initialiseLoanValueNumberCompletedWrittenOff();
//dbq.initialiseLoanArrearsSummury();
//dbq.totalValueOfLoanBook();
//dbq.initialiseSummuryStatAccounts();
//dbq.countTheAccounts();
//dbq.countTheAccounts();
//dbq.initialiseSavingsValueTotal();
//dbq.initialiseSavingsValueTotal2();
//dbq.countTheCustomers();
//dbq.countTheAccounts();



            return null;   
            } };

            initialiseSavingsValueTotalCompletedWrittenOff.execute();


//                     StartSmsTimer();


// 
 SwingWorker<Void,Void> processSms = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
if(conn.testInet()){
         sms.processTheSMS();//When the acculation of the interest is completed in the store, proceed to further processing
}
            return null;   
            } };


            processSms.execute();
 
 
        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), "Not Yet Select");
           fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvGG"+this.userId+".txt"), "Not Yet Select");
              fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvKK"+this.userId+".txt"), "Not Yet Select");
        
         if(fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "changeWindowValueBX.txt"))==77){ 
         
           fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", "windowChange"+this.userId+".txt"), jTabbedPane1.getSelectedIndex()+"");
        cancelButton.setEnabled(true);
        //        if(dbq.nocashposted(userId)){
            //
            //        JOptionPane.showMessageDialog(this, "No cash posted by you today");
            //        return;
            //        } else{
            jPanel2.setVisible(false);
            debitPanel.setVisible(false);
            creditingPanel.setVisible(false);
            cashRecon.setVisible(true);
            data5=new ArrayList();
            //  
         
         
      fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "changeWindowValueBX.txt"), "89");
         
         }
        
        
        
        trialBalance trial=new trialBalance();
//  if(fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "changeValueStartTrial.txt"))==77){   
    
//        if(!trial.isTrialBalanceBalanceing(this)){
//        
//         Object[] optionsSF = {"Yes",  "No"};
//        int nSF = JOptionPane.showOptionDialog(this,  "There is an imbalance in your accounts!!\n\n Total Debits And Credits are not tallying.\n\nDo you want to continue??",
//        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSF, optionsSF[0]);
//        if(nSF==JOptionPane.YES_OPTION){
//  fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "changeValueStartTrial.txt"), "49");
//        }
//        else if (nSF==JOptionPane.NO_OPTION){ 
//            
//         
//        
//       Login fq = new Login();
//        fq.setVisible(true);
//        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
//        fq.setSize(screen.getSize());
//        fq.pack();
//        this.dispose();   
//
//        }
//        
//        
//        
//        }
//        
//  }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        dbq.bioDataPupulated(jTable14);
     
        theBio.renderTheTable(jTable14, dbq.biodataSize());
      
        rdb.dailyCashLedger(jTable13);
        
         sortTable(jTable13,jTextField70); 
         
         
   HeaderRenderer header = new HeaderRenderer(jTable13.getTableHeader().getDefaultRenderer());
        int hc=0;

jTable13.setShowHorizontalLines(true);
jTable13.setShowGrid(true);
        jTable13.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hc<jTable13.getColumnModel().getColumnCount()){
        jTable13.getColumnModel().getColumn(hc).setHeaderRenderer(header);

        if(hc==0){
        jTable13.getColumnModel().getColumn(hc).setMinWidth(0);
        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(100);

        }
        if(hc==1){
        jTable13.getColumnModel().getColumn(hc).setMinWidth(0);
        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(100);
        }
        if(hc==2){
        jTable13.getColumnModel().getColumn(hc).setMinWidth(0);
        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(300);
        }if(hc==3){
        jTable13.getColumnModel().getColumn(hc).setMinWidth(4);
        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(100);
         }if(hc==4){
        jTable13.getColumnModel().getColumn(hc).setMinWidth(4);
        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(100);
        }if(hc==5){
        jTable13.getColumnModel().getColumn(hc).setMinWidth(4);
        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(100);
        }
        
//        
//        if(hc==6){
//        jTable13.getColumnModel().getColumn(hc).setMinWidth(4);
//        jTable13.getColumnModel().getColumn(hc).setMaxWidth(1500);
//        jTable13.getColumnModel().getColumn(hc).setPreferredWidth(4);
//        }
        
        hc++;

        }
        jTable13.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT);


//        if(row==table.getRowCount()-1){
//        this.setFont(new Font("Arial",Font.BOLD,20));
//        }else{
        this.setFont(new Font("Arial",Font.PLAIN,18));
//        }
// this.setText(value.toString());
        
if(col>=3&&col<=5){
            String text="";
       
        if(!(value.toString().equals("-")||value.toString().equals("")||value.toString().equals("0002x"))){
            
            if(parseDouble(value.toString().replaceAll(",", "").replaceAll(";", ""))<0){
            
             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", ""))+")" ;
            }else{
        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", "") );
        }
        }
        this.setText(text);
       this.setHorizontalAlignment(RIGHT);
        }else{
        this.setText(value.toString());
        }
         if (row%2==0) {
        setBackground(jButton78.getBackground());
        setForeground(jButton79.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton73.getBackground());
        setForeground(jButton79.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }   


        return this;
        }   
        });
        
        dbq.updateTransactionDetailsTable(jTable12);
         HeaderRenderer header5cv2 = new HeaderRenderer(jTable12.getTableHeader().getDefaultRenderer());
       
          int cv=0;
//        this.setHorizontalAlignment(JLabel.LEFT);
//jTable12.setShowHorizontalLines(true);
//jTable12.setShowGrid(true);
        jTable12.getColumnModel().getColumns().nextElement().setResizable(false);
        while(cv<jTable12.getColumnModel().getColumnCount()){
        jTable12.getColumnModel().getColumn(cv).setHeaderRenderer(header5cv2);

        if(cv==0){
        jTable12.getColumnModel().getColumn(cv).setMinWidth(0);
        jTable12.getColumnModel().getColumn(cv).setMaxWidth(1500);
        jTable12.getColumnModel().getColumn(cv).setPreferredWidth(220);
        }
        if(cv==1){
        jTable12.getColumnModel().getColumn(cv).setMinWidth(0);
        jTable12.getColumnModel().getColumn(cv).setMaxWidth(1500);
        jTable12.getColumnModel().getColumn(cv).setPreferredWidth(120);
        }

        cv++;

        }
   sortTable(jTable12,jTextField69);  
  

       jTable12.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
          
        this.setHorizontalAlignment(JLabel.LEFT);
        
         this.setFont(new Font("Arial",Font.PLAIN,18));

                           
        
        
        
  if(col>=1){
      this.setHorizontalAlignment(JLabel.RIGHT);
                    Number c = (Number)parseDouble(value.toString());
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
//        this.setText(value.toString());
//        }
        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }   


        return this;
        }   
        }); 
        if(jTable10.getModel().getRowCount()>1){
       jButton72.setEnabled(false);
        
        }
          dbq.loadAllTxnTypes(jTable11);
     
          HeaderRenderer header5cv = new HeaderRenderer(jTable11.getTableHeader().getDefaultRenderer());
       
          int hckx3cv=0;
//        this.setHorizontalAlignment(JLabel.LEFT);
jTable11.setShowHorizontalLines(true);
jTable11.setShowGrid(true);
        jTable11.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hckx3cv<jTable11.getColumnModel().getColumnCount()){
        jTable11.getColumnModel().getColumn(hckx3cv).setHeaderRenderer(header5cv);

        if(hckx3cv==0){
        jTable11.getColumnModel().getColumn(hckx3cv).setMinWidth(0);
        jTable11.getColumnModel().getColumn(hckx3cv).setMaxWidth(1500);
        jTable11.getColumnModel().getColumn(hckx3cv).setPreferredWidth(30);
        }
        if(hckx3cv==1){
        jTable11.getColumnModel().getColumn(hckx3cv).setMinWidth(0);
        jTable11.getColumnModel().getColumn(hckx3cv).setMaxWidth(1500);
        jTable11.getColumnModel().getColumn(hckx3cv).setPreferredWidth(210);
        }
        if(hckx3cv==2){
        jTable11.getColumnModel().getColumn(hckx3cv).setMinWidth(0);
        jTable11.getColumnModel().getColumn(hckx3cv).setMaxWidth(1500);
        jTable11.getColumnModel().getColumn(hckx3cv).setPreferredWidth(400);
        }
//        if(hckx3cv==3){
//        jTable11.getColumnModel().getColumn(hckx3cv).setMinWidth(0);
//        jTable11.getColumnModel().getColumn(hckx3cv).setMaxWidth(1500);
//        jTable11.getColumnModel().getColumn(hckx3cv).setPreferredWidth(150);
//        }
//        if(hckx3c==10){
//        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
//        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
//        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(50);
//        }
        hckx3cv++;

        }
   sortTable(jTable11,jTextField69);  
  

       jTable11.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
          
        this.setHorizontalAlignment(JLabel.LEFT);
        
         this.setFont(new Font("Arial",Font.PLAIN,24));

                           
//        
//        
//        
//  if(col>=5&&col<=9){
//      this.setHorizontalAlignment(JLabel.RIGHT);
//                    Number c = (Number)parseDouble(value.toString());
//                    String text = NumberFormat.format(c );
//                    this.setText(text);
//                }else{
//                    this.setText(value.toString());
//                }
        this.setText(value.toString());
//        }
         if (row%2==0) {
        setBackground(jButton78.getBackground());
        setForeground(jButton79.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton73.getBackground());
        setForeground(jButton79.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }   

        return this;
        }   
        }); 
        
        dbq.loadAllBulkUploadsSecond(jTable9);
        
        dbq.loadAllBulkUploads(jTable10);

         HeaderRenderer header5c = new HeaderRenderer(jTable10.getTableHeader().getDefaultRenderer());
       
          int hckx3c=0;
//        this.setHorizontalAlignment(JLabel.LEFT);
jTable10.setShowHorizontalLines(true);
jTable10.setShowGrid(true);
        jTable10.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hckx3c<jTable10.getColumnModel().getColumnCount()){
        jTable10.getColumnModel().getColumn(hckx3c).setHeaderRenderer(header5c);

        if(hckx3c==0){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(60);
        }
        if(hckx3c==1){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(150);
        }
        if(hckx3c==2){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(250);
        }if(hckx3c==3){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(150);
        }if(hckx3c==4){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(100);
        }
        
        if(hckx3c==5){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(150);
        }
        if(hckx3c==6){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(150);
        }
        if(hckx3c==7){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(100);
        }
         if(hckx3c==8){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(100);
        } if(hckx3c==9){
        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(150);
        }
//        if(hckx3c==10){
//        jTable10.getColumnModel().getColumn(hckx3c).setMinWidth(0);
//        jTable10.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
//        jTable10.getColumnModel().getColumn(hckx3c).setPreferredWidth(50);
//        }
        hckx3c++;

        }
   sortTable(jTable10,jTextField68);  
  

       jTable10.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
          
        this.setHorizontalAlignment(JLabel.LEFT);
        
         this.setFont(new Font("Arial",Font.PLAIN,15));

                           
        
        
        
  if(col>=5&&col<=9){
      this.setHorizontalAlignment(JLabel.RIGHT);
                    Number c = (Number)parseDouble(value.toString());
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
//        this.setText(value.toString());
//        }
        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }   


        return this;
        }   
        }); 
        

            HeaderRenderer header5c9 = new HeaderRenderer(jTable9.getTableHeader().getDefaultRenderer());

            int hckx3c9=0;
            //        this.setHorizontalAlignment(JLabel.LEFT);
            jTable9.setShowHorizontalLines(true);
            jTable9.setShowGrid(true);
            jTable9.getColumnModel().getColumns().nextElement().setResizable(false);
            while(hckx3c9<jTable9.getColumnModel().getColumnCount()){
            jTable9.getColumnModel().getColumn(hckx3c9).setHeaderRenderer(header5c9);

            if(hckx3c9==0){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(50);
            }
            if(hckx3c9==1){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(100);
            }
            if(hckx3c9==2){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(120);
            }if(hckx3c9==3){
            jTable9.getColumnModel().getColumn(hckx3c).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c).setPreferredWidth(150);
            }if(hckx3c9==4){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(100);
            }

            if(hckx3c9==5){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(100);
            }
            if(hckx3c9==6){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(100);
            }
            if(hckx3c9==7){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(80);
            }
            if(hckx3c9==8){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(80);
            } if(hckx3c9==9){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(80);
            }
            if(hckx3c9==10){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(160);
            }
            if(hckx3c9==11){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(160);
            }
           if(hckx3c9==12){
            jTable9.getColumnModel().getColumn(hckx3c9).setMinWidth(0);
            jTable9.getColumnModel().getColumn(hckx3c9).setMaxWidth(1500);
            jTable9.getColumnModel().getColumn(hckx3c9).setPreferredWidth(150);
            }
            hckx3c9++;

            }
            sortTable(jTable9,jTextField68);  


            jTable9.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            this.setHorizontalAlignment(JLabel.LEFT);

            this.setFont(new Font("Arial",Font.PLAIN,13));





            if((col>=5&&col<=6)||(col>=12)){
            this.setHorizontalAlignment(JLabel.RIGHT);
            Number c = (Number)parseDouble(value.toString());
            String text = NumberFormat.format(c );
            this.setText(text);
            }else{
            this.setText(value.toString());
            }
            //        this.setText(value.toString());
            //        }
            if (row%2==0) {
            setBackground(jButton78.getBackground());
            setForeground(jButton79.getBackground());
            if(isSelected){setBackground(Color.CYAN);}
            } else {
            setBackground(jButton73.getBackground());
            setForeground(jButton79.getBackground());
            if(isSelected){setBackground(Color.CYAN);}
            }   


            return this;
            }   
            }); 


        
        
        
        List titles=new ArrayList();
        titles.add("S/N");
        titles.add("TXN TYPE");
        titles.add("TXN CODE");
        titles.add("DR A/C");
        titles.add("CR A/C");
        titles.add("NARRATION");
        titles.add("AMOUNT");
        titles.add("INT/RATE");
        titles.add("TENURE");
        titles.add("DATE");
   List<List<Object>> items=new ArrayList();

       modelxxxxx=new ListDataModel_11(items,titles);
       
        jTable6.setModel(modelxxxxx);
               
HeaderRenderer header5 = new HeaderRenderer(jTable6.getTableHeader().getDefaultRenderer());

int hckx3=0;
//        this.setHorizontalAlignment(JLabel.LEFT);
jTable6.setShowHorizontalLines(true);
jTable6.setShowGrid(true);
jTable6.getColumnModel().getColumns().nextElement().setResizable(false);
while(hckx3<jTable6.getColumnModel().getColumnCount()){
jTable6.getColumnModel().getColumn(hckx3).setHeaderRenderer(header5);

if(hckx3==0){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(60);
}
if(hckx3==1){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(100);
}
if(hckx3==2){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(100);
}if(hckx3==3){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(150);
}if(hckx3==4){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(150);
}

if(hckx3==5){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(250);
}
if(hckx3==6){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(150);
}
if(hckx3==7){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(100);
}
if(hckx3==8){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(100);
} if(hckx3==9){
jTable6.getColumnModel().getColumn(hckx3).setMinWidth(0);
jTable6.getColumnModel().getColumn(hckx3).setMaxWidth(1500);
jTable6.getColumnModel().getColumn(hckx3).setPreferredWidth(100);
}

hckx3++;

}
sortTable(jTable6,jTextField66);  


jTable6.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
@Override
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

this.setHorizontalAlignment(JLabel.LEFT);




if(row==table.getRowCount()-1){

this.setFont(new Font("Arial",Font.BOLD,18));

}else{

this.setFont(new Font("Arial",Font.PLAIN,16));

}



//  if(col==6){
//                    Number c = (Number)parseDouble(value.toString());
//                    String text = NumberFormat.fmt(c );
//                    this.setText(text);
//                }else{
//                    this.setText(value.toString());
//                }
        this.setText(value.toString());
//        }
        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }   


        return this;
        }   
        }); 
        
        uniqueListPost=new ArrayList(); 

          jTabbedPane1.setSelectedIndex(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", "windowChange"+this.userId+".txt")));
          
          
             
          
         jCheckBox21.setEnabled(true);
jCheckBox28.setEnabled(true);
jCheckBox34.setEnabled(true);
jCheckBox31.setEnabled(true);

 jCheckBox21.setVisible(true);
jCheckBox28.setVisible(true);
jCheckBox34.setVisible(true);
jCheckBox31.setVisible(true);
        
jCheckBox21.setSelected(true);
jCheckBox28.setSelected(true);
jCheckBox34.setSelected(true);
jCheckBox31.setSelected(true);

jCheckBox22.setEnabled(false);
jCheckBox23.setEnabled(false);
jCheckBox24.setEnabled(false);

        switch(Math.round(Math.random()*20)+""){

                case "1":
                 jButton49.setBackground(jButton29.getBackground());
                    break;
                case "2":
                    jButton49.setBackground(jButton30.getBackground()); 
                    
                    break;
                case "3":
                     jButton49.setBackground(jButton31.getBackground());
                    break;
                case "4":
                    jButton49.setBackground(jButton32.getBackground()); 
                    break;
                case "5":
                    jButton49.setBackground(jButton33.getBackground()); 
                    break;
                case "6":
                  jButton49.setBackground(jButton34.getBackground());   
                    break;
                case "7":
                   jButton49.setBackground(jButton35.getBackground());  
                    break;
                case "8":
                  jButton49.setBackground(jButton36.getBackground());   
                    break;
                case "9":
                   jButton49.setBackground(jButton37.getBackground());  
                    break;  
                case "10":
                    jButton49.setBackground(jButton38.getBackground()); 
                    break;
                case "11":
                     jButton49.setBackground(jButton39.getBackground());
                    break;
                case "12":
                    jButton49.setBackground(jButton40.getBackground()); 
                    break; 
                case "13":
                     jButton49.setBackground(jButton41.getBackground());
                    break;  
                case "14":
                   jButton49.setBackground(jButton42.getBackground());  
                    break; 
                case "15":
                     jButton49.setBackground(jButton43.getBackground());
                    break;
                case "16":
                  jButton49.setBackground(jButton44.getBackground());   
                    break;  
                case "17":
                     jButton49.setBackground(jButton45.getBackground());
                    break;
                case "18":
                     jButton49.setBackground(jButton46.getBackground());
                    break; 
                case "19":
                     jButton49.setBackground(jButton47.getBackground());
                    break;
                case "20":
                  jButton49.setBackground(jButton48.getBackground());   
                    break;  
             
                        
                    

}
      
        
        
        
        
        
        Resource rscs=new Resource(userId);
        switch(dbq.title(userId)){
            case "Cashier":
                rscs.CashierPostingRights(jComboTransactionType);
               jButton12.setEnabled(false);
                openDay.setEnabled(false);
                rejectButton.setEnabled(false);
                break;
            case "Accountant":
           
             rscs.accountantPostingRightsh(jComboTransactionType);   
//               jButton12.setEnabled(true);
                openDay.setEnabled(false);
//                rejectButton.setEnabled(true);
                  jPanelDetailedPanel.setVisible(false);
            JpanelSummuryPanel.setVisible(true);
            
               jTable4.setModel(otherLoans.createAllOutstandingLaonPaymentsSummury());
               
         TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(result);
         
                            jTable4.setRowSorter(sorter); 
                            
                             HeaderRenderer headertv = new HeaderRenderer(jTable4.getTableHeader().getDefaultRenderer());
       
          int hckx=0;
//        this.setHorizontalAlignment(JLabel.LEFT);
jTable4.setShowHorizontalLines(true);
jTable4.setShowGrid(true);
        jTable4.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hckx<jTable4.getColumnModel().getColumnCount()){
        jTable4.getColumnModel().getColumn(hckx).setHeaderRenderer(headertv);

        if(hckx==0){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(60);
        }
        if(hckx==1){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(250);
        }
        if(hckx==2){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(200);
        }if(hckx==3){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
        }if(hckx==4){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
        }
        
        if(hckx==5){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
        }
        if(hckx==6){
        jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
        jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
        jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
        }
       
        
        hckx++;

        }
   sortTable(jTable4,jTextField1);  
  

       jTable4.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
          
        this.setHorizontalAlignment(JLabel.LEFT);


        if(row==table.getRowCount()-1){
            
        this.setFont(new Font("Arial",Font.BOLD,20));
        
        }else{
            
        this.setFont(new Font("Arial",Font.PLAIN,18));
        
        }
        
 this.setText(value.toString());
        

        this.setText(value.toString());

        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }   


        return this;
        }   
        }); 
     jButton26  .setVisible(false);
     jButton21  .setVisible(true);
                
                break;
            case "Supervisor":
            
                   jButton26  .setVisible(true);
     jButton21  .setVisible(false);
                jButton4.setEnabled(false);
jComboBox3.setEnabled(false);
jTextField17.setEnabled(false);
jButton3.setEnabled(false);
jComboBox2.setEnabled(false);
jTextField16.setEnabled(false);
jButton5.setEnabled(false);
jComboBox4.setEnabled(false);
jTextField18.setEnabled(false);
jButton24.setEnabled(false);
jComboBox5.setEnabled(false);
jTextField19.setEnabled(false);
            jButton8.setText("APPROVE TXN"); 
            rscs.supervisorPostingRights(jComboTransactionType);
            //               jButton12.setEnabled(true);
            //                openDay.setEnabled(true);
            //                rejectButton.setEnabled(true);
            jButton6.setVisible(false);
            jTable4.setModel(otherLoans.createAllOutstandingLaonPaymentsSummurySub());

            TableRowSorter<ListDataModel> sorterS = new TableRowSorter<>(result);

            jTable4.setRowSorter(sorterS); 

             HeaderRenderer headerS = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());

            int hckxS=0;

            jTable4.setShowHorizontalLines(true);
            jTable4.setShowGrid(true);
            jTable4.getColumnModel().getColumns().nextElement().setResizable(false);
            while(hckxS<jTable4.getColumnModel().getColumnCount()){
            jTable4.getColumnModel().getColumn(hckxS).setHeaderRenderer(headerS);

            if(hckxS==0){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(60);
            }
            if(hckxS==1){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(250);
            }
            if(hckxS==2){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(200);
            }if(hckxS==3){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(150);
            }if(hckxS==4){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(150);
            }

            if(hckxS==5){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(150);
            }
            if(hckxS==6){
            jTable4.getColumnModel().getColumn(hckxS).setMinWidth(0);
            jTable4.getColumnModel().getColumn(hckxS).setMaxWidth(1500);
            jTable4.getColumnModel().getColumn(hckxS).setPreferredWidth(150);
            }


            hckxS++;

            }
            sortTable(jTable4,jTextField1);  


            jTable4.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            this.setHorizontalAlignment(JLabel.LEFT);


            if(row==table.getRowCount()-1){

            this.setFont(new Font("Arial",Font.BOLD,20));

            }else{

            this.setFont(new Font("Arial",Font.PLAIN,18));

            }
        
 this.setText(value.toString());
this.setText(value.toString());
if (row%2==0) {
setBackground(jButton49.getBackground());
setForeground(jButton51.getBackground());
if(isSelected){setBackground(Color.CYAN);}
} else {
setBackground(jButton50.getBackground());
setForeground(jButton51.getBackground());
if(isSelected){setBackground(Color.CYAN);}
}   


return this;
}   
}); 
       
       
                
                break;
                case "Manager":
                    rscs.managerPostingRights(jComboTransactionType);
//               jButton12.setEnabled(true);
//                openDay.setEnabled(true);
//                rejectButton.setEnabled(true);
                break;
                    case "Loans Office":
                         rscs.loansOfficerPostingRights(jComboTransactionType);
//                   jButton12.setEnabled(true);
                openDay.setEnabled(false);
//                rejectButton.setEnabled(true);
                break;
                        case "System Admin":
                            
              rscs.systemsAdminPostingRights(jComboTransactionType);
                  jButton12.setEnabled(false);
                openDay.setEnabled(false);
                rejectButton.setEnabled(false);
                break;
        
        }
        
        if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "autoManageCash.txt"))==46){
        
        jCheckBox69.setSelected(true);
        
        }else if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "autoManageCash.txt"))!=46){
        
        
         jCheckBox69.setSelected(false);
        
        }
        if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"))==46){
        
        jCheckBox71.setSelected(true);
        
        }else if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"))!=46){
        
        
         jCheckBox71.setSelected(false);
        
        }
        
           if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){
        
        jCheckBox70.setSelected(true);
        
        }else if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))!=46){
        
        
         jCheckBox70.setSelected(false);
        
        }
          if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){
        
        jCheckBox73.setSelected(true);
        
        }else if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))!=46){
        
        
         jCheckBox73.setSelected(false);
        
        } 
                     
       if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"))==15 ){
jCheckBox72.setSelected(true);
}else if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"))==5 ){
jCheckBox72.setSelected(false);
amountCredit1.setValue(null);
}
       
 
     

       
    }//GEN-LAST:event_formWindowOpened

    private void jTabbedPane1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MousePressed

        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;}else{

           

            if(jTabbedPane1.getSelectedIndex()==0){
          JOptionPane.showMessageDialog(this, "Window Not Supported!!!");
          
           PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                f.setVisible(true);
                Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                f.setSize(screen.getSize());
                f.pack();
                this.dispose();
          
            return;
            }else{
            
             fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", "windowChange"+this.userId+".txt"), jTabbedPane1.getSelectedIndex()+"");
            
            }

//            dbq.feelWithCashAndBank(jComboBox3);
//            dbq.feelWithCapitalNames(jComboBox2);
//            dbq.feelWithCashAndBank(jComboBox4);
//            dbq.feelWithCashAndBankLoans(jComboBox5);
//            dbq.feelWithCashAndBank(jComboBox6);
//            dbq.feelWithCashAndBank(jComboBox7);
//            dbq.feelWithCapitalNames(jComboBox8);
//            dbq.feelWithCapitalNames(jComboBox9);
        }
    }//GEN-LAST:event_jTabbedPane1MousePressed

    private void jTable4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable4MouseEntered

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        String theBatchId=fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt"));
        switch(jButton21.getText()){

            case "DELETE TXN":
            Object[] optionsSGS1nhh = {"Continue",  "Cancel"};
            int nSGS1nhh = JOptionPane.showOptionDialog(this,  "Are you sure about deleting this transaction??",
                "DELETE TXN!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS1nhh, optionsSGS1nhh[0]);
            if(nSGS1nhh==JOptionPane.YES_OPTION){

                dbq.deleteBatchTxn1(PostingEntryWindow.this,theBatchId);

                dbq.deleteBatchTxn2(PostingEntryWindow.this,theBatchId);

                PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                f.setVisible(true);
                Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                f.setSize(screen.getSize());
                f.pack();
                this.dispose();
            }
            else if (nSGS1nhh==JOptionPane.NO_OPTION){
                PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                f.setVisible(true);
                Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                f.setSize(screen.getSize());
                f.pack();
                this.dispose();

            }

            break;

            case "DELETE ITEM":

            Object[] optionOne = {"YES",  "NO"};
            int nOne = JOptionPane.showOptionDialog(this,  "Are you sure about deleting this Item??",
                "DELETE TXN!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionOne, optionOne[0]);
            if(nOne==JOptionPane.YES_OPTION){
                String theBatchIdItem=fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintItmNo.txt"));

                dbq.deleteBatchTxn1tem(PostingEntryWindow.this,theBatchIdItem);
                dbq.updateTheBatchStatus(theBatchId);
                jTable1.setModel( otherLoans.createAllOutstandingSharesPaymentsSpecialxc(theBatchId));
                jTable1.repaint();

            }
            else if (nOne==JOptionPane.NO_OPTION){
                PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                f.setVisible(true);
                Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                f.setSize(screen.getSize());
                f.pack();
                this.dispose();

            }

            break;
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed

        AddBatch f = new AddBatch(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();

    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;}else{

        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String batchNumberc="";
        int selectedRow =jTable4.getSelectedRow();

        int selectedColumn =jTable4.getSelectedColumn();

        if (selectedRow > -1&&selectedColumn>-1)
        {
            batchNumberc= jTable4.getModel().getValueAt(jTable4.convertRowIndexToModel(selectedRow), 2).toString();
        }

        switch(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", batchNumberc+"batchPosint.txt"))){

            case "Created":
            dbq.batchChangeStatus("Submitted",fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt")));
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", batchNumberc+"batchPosint.txt"), "Submitted");
            jButton8.setEnabled(false);
            jButton26.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Transaction was successfully Submitted");
            break;
            case "Submitted":
            dbq.batchChangeStatus("Approved",fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt")));
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", batchNumberc+"batchPosint.txt"), "Approved");
            jButton8.setEnabled(false);
            jButton26.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Transaction was successfully Approved");
            break;
            case "Approved":

            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", batchNumberc+"batchPosint.txt"), "Approved");
            break;

        }
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;}else{      
            jButton6.setVisible(false);
            jButton8.setVisible(false);
            jButton26.setVisible(false);
            jLabel49.setVisible(true);
            jComboBox1.setVisible(true);    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        HeaderRenderer header = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());

        switch(jComboBox1.getSelectedItem().toString()){

            case "Loan":
            //
            reflection=PostingEntryWindow.this;

            JOptionPane.showMessageDialog(this, "Wait!!! Wait!!....Loan Transactions Statement is beeing generated!!!");

            SwingWorker<ListDataModel,Void>pAnLWorker=new SwingWorker() {

                @Override
                protected ListDataModel doInBackground() throws Exception {

                    return  otherLoans.createAllOutstandingLaonPayments();

                }

                @Override
                protected void done() {
                    try {
                        result = (ListDataModel) get();
                    } catch (InterruptedException | ExecutionException ex) {
                        Logger.getLogger(Reportx.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //          if(result!=null){
                        //
                        //
                        //          }

                    if(result!=null){

                        SwingWorker<Void,Void>inertLoan=new SwingWorker(){
                            @Override
                            protected Object doInBackground() throws Exception {
                                bPost.createNewPostingItem(result, "Loan");
                                return null;
                            }
                        };
                        inertLoan.execute();

                        JOptionPane.showMessageDialog(reflection, "The Statement of Loan Transactions was succesfully generated");
                        jPanelDetailedPanel.setVisible(false);
                        JpanelSummuryPanel.setVisible(true);

                        jTable4.setModel(otherLoans.createAllOutstandingLaonPaymentsSummury());

                        TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(result);

                        jTable4.setRowSorter(sorter);

                    }  else{
                        JOptionPane.showMessageDialog(reflection, "The Statement of  Loan Transactions is empty");

                    }
                    int hckx=0;
                    //        this.setHorizontalAlignment(JLabel.LEFT);
                    jTable4.setShowHorizontalLines(true);
                    jTable4.setShowGrid(true);
                    jTable4.getColumnModel().getColumns().nextElement().setResizable(false);
                    while(hckx<jTable4.getColumnModel().getColumnCount()){
                        jTable4.getColumnModel().getColumn(hckx).setHeaderRenderer(header);

                        if(hckx==0){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(60);
                        }
                        if(hckx==1){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(250);
                        }
                        if(hckx==2){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(200);
                        }if(hckx==3){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }if(hckx==4){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }

                        if(hckx==5){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }
                        if(hckx==6){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }

                        hckx++;

                    }
                    sortTable(jTable4,jTextField1);

                    jTable4.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                            this.setHorizontalAlignment(JLabel.LEFT);

                            if(row==table.getRowCount()-1){

                                this.setFont(new Font("Arial",Font.BOLD,20));

                            }else{

                                this.setFont(new Font("Arial",Font.PLAIN,18));

                            }

                            this.setText(value.toString());

                            //if(col>=3&&col<=7){
                                //            String text="";
                                //
                                //        if(!(value.toString().equals("-")||value.toString().equals("")||value.toString().equals("N/A"))){
                                    //
                                    //            if(parseDouble(value.toString().replaceAll(",", "").replaceAll(";", ""))<0){
                                        //
                                        //             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", ""))+")" ;
                                        //            }else{
                                        //        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", "") );
                                        //        }
                                    //        }
                                //        this.setText(text);
                                //       this.setHorizontalAlignment(RIGHT);
                                //        }else{
                                this.setText(value.toString());
                                //        }
                            if (row%2==0) {
                                setBackground(jButton49.getBackground());
                                setForeground(jButton51.getBackground());
                                if(isSelected){setBackground(Color.CYAN);}
                            } else {
                                setBackground(jButton50.getBackground());
                                setForeground(jButton51.getBackground());
                                if(isSelected){setBackground(Color.CYAN);}
                            }

                            return this;
                        }
                    });

                    PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                    f.setVisible(true);
                    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                    f.setSize(screen.getSize());
                    f.pack();
                    reflection.dispose();

                }
            };
            pAnLWorker.execute();

            twistButtonsSelectionTxn();

            break;

            case "Savings":

            reflection=PostingEntryWindow.this;

            JOptionPane.showMessageDialog(this, "Wait!!! Wait!!....Savings Transactions Statement is beeing generated!!!");

            SwingWorker<ListDataModel,Void>savingsTrn=new SwingWorker() {

                @Override
                protected ListDataModel doInBackground() throws Exception {

                    return  otherLoans.createAllOutstandingSavingsPayments();

                }

                @Override
                protected void done() {
                    try {
                        result = (ListDataModel) get();
                    } catch (InterruptedException | ExecutionException ex) {
                        Logger.getLogger(Reportx.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //          if(result!=null){
                        //
                        //
                        //          }

                    if(result!=null){

                        SwingWorker<Void,Void>inertLoan=new SwingWorker(){
                            @Override
                            protected Object doInBackground() throws Exception {
                                bPost.createNewPostingItem(result, "Savings");
                                return null;
                            }
                        };
                        inertLoan.execute();

                        JOptionPane.showMessageDialog(reflection, "The Statement of Savings Transactions was succesfully generated");
                        jPanelDetailedPanel.setVisible(false);
                        JpanelSummuryPanel.setVisible(true);

                        jTable4.setModel(otherLoans.createAllOutstandingLaonPaymentsSummury());

                        TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(result);

                        jTable4.setRowSorter(sorter);

                    }  else{
                        JOptionPane.showMessageDialog(reflection, "The Statement of  Loan Transactions is empty");

                    }
                    int hckx=0;
                    //        this.setHorizontalAlignment(JLabel.LEFT);
                    jTable4.setShowHorizontalLines(true);
                    jTable4.setShowGrid(true);
                    jTable4.getColumnModel().getColumns().nextElement().setResizable(false);
                    while(hckx<jTable4.getColumnModel().getColumnCount()){
                        jTable4.getColumnModel().getColumn(hckx).setHeaderRenderer(header);

                        if(hckx==0){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(60);
                        }
                        if(hckx==1){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(250);
                        }
                        if(hckx==2){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(200);
                        }if(hckx==3){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }if(hckx==4){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }

                        if(hckx==5){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }
                        if(hckx==6){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }

                        hckx++;

                    }
                    sortTable(jTable4,jTextField1);

                    jTable4.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                            this.setHorizontalAlignment(JLabel.LEFT);

                            if(row==table.getRowCount()-1){

                                this.setFont(new Font("Arial",Font.BOLD,20));

                            }else{

                                this.setFont(new Font("Arial",Font.PLAIN,18));

                            }

                            this.setText(value.toString());

                            //if(col>=3&&col<=7){
                                //            String text="";
                                //
                                //        if(!(value.toString().equals("-")||value.toString().equals("")||value.toString().equals("N/A"))){
                                    //
                                    //            if(parseDouble(value.toString().replaceAll(",", "").replaceAll(";", ""))<0){
                                        //
                                        //             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", ""))+")" ;
                                        //            }else{
                                        //        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", "") );
                                        //        }
                                    //        }
                                //        this.setText(text);
                                //       this.setHorizontalAlignment(RIGHT);
                                //        }else{
                                this.setText(value.toString());
                                //        }
                            if (row%2==0) {
                                setBackground(jButton49.getBackground());
                                setForeground(jButton51.getBackground());
                                if(isSelected){setBackground(Color.CYAN);}
                            } else {
                                setBackground(jButton50.getBackground());
                                setForeground(jButton51.getBackground());
                                if(isSelected){setBackground(Color.CYAN);}
                            }

                            return this;
                        }
                    });

                    PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                    f.setVisible(true);
                    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                    f.setSize(screen.getSize());
                    f.pack();
                    reflection.dispose();

                }
            };
            savingsTrn.execute();

            twistButtonsSelectionTxn();

            break;

            case "Shares":

            reflection=PostingEntryWindow.this;

            JOptionPane.showMessageDialog(this, "Wait!!! Wait!!....Shares Transactions Statement is beeing generated!!!");

            SwingWorker<ListDataModel,Void>sharesTrn=new SwingWorker() {

                @Override
                protected ListDataModel doInBackground() throws Exception {

                    return  otherLoans.createAllOutstandingSharesPayments();

                }

                @Override
                protected void done() {
                    try {
                        result = (ListDataModel) get();
                    } catch (InterruptedException | ExecutionException ex) {
                        Logger.getLogger(Reportx.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //          if(result!=null){
                        //
                        //
                        //          }

                    if(result!=null){

                        SwingWorker<Void,Void>inertLoan=new SwingWorker(){
                            @Override
                            protected Object doInBackground() throws Exception {
                                bPost.createNewPostingItem(result, "Shares");
                                return null;
                            }
                        };
                        inertLoan.execute();

                        JOptionPane.showMessageDialog(reflection, "The Statement of Shares Transactions was succesfully generated");
                        jPanelDetailedPanel.setVisible(false);
                        JpanelSummuryPanel.setVisible(true);

                        jTable4.setModel(otherLoans.createAllOutstandingLaonPaymentsSummury());

                        TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(result);

                        jTable4.setRowSorter(sorter);

                    }  else{
                        JOptionPane.showMessageDialog(reflection, "The Statement of  Loan Transactions is empty");

                    }
                    int hckx=0;
                    //        this.setHorizontalAlignment(JLabel.LEFT);
                    jTable4.setShowHorizontalLines(true);
                    jTable4.setShowGrid(true);
                    jTable4.getColumnModel().getColumns().nextElement().setResizable(false);
                    while(hckx<jTable4.getColumnModel().getColumnCount()){
                        jTable4.getColumnModel().getColumn(hckx).setHeaderRenderer(header);

                        if(hckx==0){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(60);
                        }
                        if(hckx==1){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(250);
                        }
                        if(hckx==2){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(200);
                        }if(hckx==3){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }if(hckx==4){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }

                        if(hckx==5){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }
                        if(hckx==6){
                            jTable4.getColumnModel().getColumn(hckx).setMinWidth(0);
                            jTable4.getColumnModel().getColumn(hckx).setMaxWidth(1500);
                            jTable4.getColumnModel().getColumn(hckx).setPreferredWidth(150);
                        }

                        hckx++;

                    }
                    sortTable(jTable4,jTextField1);

                    jTable4.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                            this.setHorizontalAlignment(JLabel.LEFT);

                            if(row==table.getRowCount()-1){

                                this.setFont(new Font("Arial",Font.BOLD,20));

                            }else{

                                this.setFont(new Font("Arial",Font.PLAIN,18));

                            }

                            this.setText(value.toString());

                            //if(col>=3&&col<=7){
                                //            String text="";
                                //
                                //        if(!(value.toString().equals("-")||value.toString().equals("")||value.toString().equals("N/A"))){
                                    //
                                    //            if(parseDouble(value.toString().replaceAll(",", "").replaceAll(";", ""))<0){
                                        //
                                        //             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", ""))+")" ;
                                        //            }else{
                                        //        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "").replaceAll(";", "") );
                                        //        }
                                    //        }
                                //        this.setText(text);
                                //       this.setHorizontalAlignment(RIGHT);
                                //        }else{
                                this.setText(value.toString());
                                //        }
                            if (row%2==0) {
                                setBackground(jButton49.getBackground());
                                setForeground(jButton51.getBackground());
                                if(isSelected){setBackground(Color.CYAN);}
                            } else {
                                setBackground(jButton50.getBackground());
                                setForeground(jButton51.getBackground());
                                if(isSelected){setBackground(Color.CYAN);}
                            }

                            return this;
                        }
                    });

                    PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                    f.setVisible(true);
                    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                    f.setSize(screen.getSize());
                    f.pack();
                    reflection.dispose();

                }
            };
            sharesTrn.execute();

            twistButtonsSelectionTxn();
            break;

            case "Loan&Savings":
            twistButtonsSelectionTxn();
            break;

            case "Loan&Shares":
            twistButtonsSelectionTxn();
            break;
            case "Shares&Savings":
            twistButtonsSelectionTxn();
            break;

            case "Loan&Savings&Shares":
            twistButtonsSelectionTxn();
            break;

        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField15KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField15KeyReleased
        //sortTable(jTable3,jTextField15);

        //        jPanel2.setVisible(false);
        //        switch(jComboTransactionType.getSelectedItem().toString()){
            //
            //    case "Gen":
            //    dbq.fillMeWithAllAccountsc(jTable3,jTextField15.getText());
            //
            //        break;
            //         case "Save":
            //   if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"))==46){
                //            dbq.fillMeWithAllAccountsdhlS(jTable3,jTextField15.getText());
                //             }else{
                //               dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //        break;
            //        case "WdrawS":
            //     dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
            //
            //        break;
            //
            //case "LoanR":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){
                //            dbq.fillMeWithAllAccountsBdhlS(jTable3,jTextField15.getText());
                //             }else{
                //              dbq.fillMeWithAllAccountsBS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "LoanRD":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){
                //            dbq.fillMeWithAllAccountsBdhlS(jTable3,jTextField15.getText());
                //             }else{
                //              dbq.fillMeWithAllAccountsBS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "LoanD":
            //
            //    break;
            //case "LoanW":
            //
            //    break;
            //case "LoanRe":
            //
            //
            //    break;
            //case "LoanT":
            //
            //    break;
            //case "LoanC":
            //
            //    break;
            //case "CapR":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){
                //            dbq.fillMeWithAllAccountsdhlS(jTable3,jTextField15.getText());
                //             }else{
                //               dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "CapRD":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){
                //            dbq.fillMeWithAllAccountsdhlS(jTable3,jTextField15.getText());
                //             }else{
                //               dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "CapRC":
            //
            //    break;
            //case "Cap":
            //
            //    break;
            //case "BC":
            //
            //    break;
            //case "CB":
            //
            //    break;
            //case "CR":
            //
            //
            //    break;
            //case "I":
            //
            //
            //    break;
            //
            //case "DCap":
            //
            //     dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
            //    break;
            //    case "Pay Employees Salary":
            //
            //  dbq.fillMeWithAllAccountsCES(jTable3,jTextField15.getText());
            //
            //    break;

            //case "DCapD":
            //
            //     dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
            //    break;
            //    case "Pay Employees Salary":
            //
            //  dbq.fillMeWithAllAccountsCES(jTable3,jTextField15.getText());
            //
            //    break;
            //}

    }//GEN-LAST:event_jTextField15KeyReleased

    private void jTextField15KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField15KeyPressed

        sortTable(jTable3,jTextField15);

        //           jPanel2.setVisible(false);
        //        switch(jComboTransactionType.getSelectedItem().toString()){
            //
            //    case "Gen":
            //    dbq.fillMeWithAllAccountsc(jTable3,jTextField15.getText());
            //
            //        break;
            //         case "Save":
            //   if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"))==46){
                //            dbq.fillMeWithAllAccountsdhlS(jTable3,jTextField15.getText());
                //             }else{
                //               dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //        break;
            //        case "WdrawS":
            //     dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
            //
            //        break;
            //
            //case "LoanR":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){
                //            dbq.fillMeWithAllAccountsBdhlS(jTable3,jTextField15.getText());
                //             }else{
                //              dbq.fillMeWithAllAccountsBS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "LoanRD":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){
                //            dbq.fillMeWithAllAccountsBdhlS(jTable3,jTextField15.getText());
                //             }else{
                //              dbq.fillMeWithAllAccountsBS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "LoanD":
            //
            //    break;
            //case "LoanW":
            //
            //    break;
            //case "LoanRe":
            //
            //
            //    break;
            //case "LoanT":
            //
            //    break;
            //case "LoanC":
            //
            //    break;
            //case "CapR":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){
                //            dbq.fillMeWithAllAccountsdhlS(jTable3,jTextField15.getText());
                //             }else{
                //               dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "CapRD":
            //  if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){
                //            dbq.fillMeWithAllAccountsdhlS(jTable3,jTextField15.getText());
                //             }else{
                //               dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
                //
                //               }
            //
            //    break;
            //case "CapRC":
            //
            //    break;
            //case "Cap":
            //
            //    break;
            //case "BC":
            //
            //    break;
            //case "CB":
            //
            //    break;
            //case "CR":
            //
            //
            //    break;
            //case "I":
            //
            //
            //    break;
            //
            //case "DCap":
            //
            //     dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
            //    break;
            //    case "Pay Employees Salary":
            //
            //  dbq.fillMeWithAllAccountsCES(jTable3,jTextField15.getText());
            //
            //    break;

            //case "DCapD":
            //
            //     dbq.fillMeWithAllAccountsCS(jTable3,jTextField15.getText());
            //    break;
            //    case "Pay Employees Salary":
            //
            //  dbq.fillMeWithAllAccountsCES(jTable3,jTextField15.getText());
            //
            //    break;
            //}
        //
    }//GEN-LAST:event_jTextField15KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        saveButton.setEnabled(true);
        loanPaymentOrder=new ArrayList(4);
        loanPaymentOrder.add(0, "a");
        loanPaymentOrder.add(1, "a");
        loanPaymentOrder.add(2, "a");
        loanPaymentOrder.add(3, "a");
        if(flag.equalsIgnoreCase("Not Flagged")){

            if(jCheckBox21.isSelected()&&jCheckBox21.isVisible()){loanPaymentOrder.set(0, jLabel29.getText());}
            if(jCheckBox22.isSelected()&&jCheckBox22.isVisible()){loanPaymentOrder.set(1, jLabel29.getText());}
            if(jCheckBox23.isSelected()&&jCheckBox23.isVisible()){loanPaymentOrder.set(2, jLabel29.getText());}
            if(jCheckBox24.isSelected()&&jCheckBox24.isVisible()){loanPaymentOrder.set(3, jLabel29.getText());}

            if(jCheckBox26.isSelected()&&jCheckBox26.isVisible()){loanPaymentOrder.set(0, jLabel30.getText());}
            if(jCheckBox28.isSelected()&&jCheckBox28.isVisible()){loanPaymentOrder.set(1, jLabel30.getText());}
            if(jCheckBox29.isSelected()&&jCheckBox29.isVisible()){loanPaymentOrder.set(2, jLabel30.getText());}
            if(jCheckBox32.isSelected()&&jCheckBox32.isVisible()){loanPaymentOrder.set(3, jLabel30.getText());}

            if(jCheckBox20.isSelected()&&jCheckBox20.isVisible()){loanPaymentOrder.set(0, jLabel47.getText());}
            if(jCheckBox17.isSelected()&&jCheckBox17.isVisible()){loanPaymentOrder.set(1, jLabel47.getText());}
            if(jCheckBox34.isSelected()&&jCheckBox34.isVisible()){loanPaymentOrder.set(2, jLabel47.getText());}
            if(jCheckBox19.isSelected()&&jCheckBox19.isVisible()){loanPaymentOrder.set(3, jLabel47.getText());}

            if(jCheckBox25.isSelected()&&jCheckBox25.isVisible()){loanPaymentOrder.set(0, jLabel28.getText());}
            if(jCheckBox27.isSelected()&&jCheckBox27.isVisible()){loanPaymentOrder.set(1, jLabel28.getText());}
            if(jCheckBox18.isSelected()&&jCheckBox18.isVisible()){loanPaymentOrder.set(2, jLabel28.getText());}
            if(jCheckBox31.isSelected()&&jCheckBox31.isVisible()){loanPaymentOrder.set(3, jLabel28.getText());}

        }else if(flag.equalsIgnoreCase("Flagged")){
            if(temper<4){
                JOptionPane.showMessageDialog(this, "Please Complete all the ordering for this loan repayment first!!!");

                return;

            }else if(temper==4){
                if(jCheckBox21.isSelected()&&jCheckBox21.isVisible()){loanPaymentOrder.set(0, jLabel29.getText());}
                if(jCheckBox22.isSelected()&&jCheckBox22.isVisible()){loanPaymentOrder.set(1, jLabel29.getText());}
                if(jCheckBox23.isSelected()&&jCheckBox23.isVisible()){loanPaymentOrder.set(2, jLabel29.getText());}
                if(jCheckBox24.isSelected()&&jCheckBox24.isVisible()){loanPaymentOrder.set(3, jLabel29.getText());}

                if(jCheckBox26.isSelected()&&jCheckBox26.isVisible()){loanPaymentOrder.set(0, jLabel30.getText());}
                if(jCheckBox28.isSelected()&&jCheckBox28.isVisible()){loanPaymentOrder.set(1, jLabel30.getText());}
                if(jCheckBox29.isSelected()&&jCheckBox29.isVisible()){loanPaymentOrder.set(2, jLabel30.getText());}
                if(jCheckBox32.isSelected()&&jCheckBox32.isVisible()){loanPaymentOrder.set(3, jLabel30.getText());}

                if(jCheckBox20.isSelected()&&jCheckBox20.isVisible()){loanPaymentOrder.set(0, jLabel47.getText());}
                if(jCheckBox17.isSelected()&&jCheckBox17.isVisible()){loanPaymentOrder.set(1, jLabel47.getText());}
                if(jCheckBox34.isSelected()&&jCheckBox34.isVisible()){loanPaymentOrder.set(2, jLabel47.getText());}
                if(jCheckBox19.isSelected()&&jCheckBox19.isVisible()){loanPaymentOrder.set(3, jLabel47.getText());}

                if(jCheckBox25.isSelected()&&jCheckBox25.isVisible()){loanPaymentOrder.set(0, jLabel28.getText());}
                if(jCheckBox27.isSelected()&&jCheckBox27.isVisible()){loanPaymentOrder.set(1, jLabel28.getText());}
                if(jCheckBox18.isSelected()&&jCheckBox18.isVisible()){loanPaymentOrder.set(2, jLabel28.getText());}
                if(jCheckBox31.isSelected()&&jCheckBox31.isVisible()){loanPaymentOrder.set(3, jLabel28.getText());}

            }else{
                JOptionPane.showMessageDialog(this, "No acction Taken!!");
                return;

            }
        }

        jPanel2.setVisible(false);
        debitPanel.setVisible(true);
        creditingPanel.setVisible(true);
        cashRecon.setVisible(false);
        jPanel4.setVisible(false);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        flag="Flagged";
        jCheckBox21.setVisible(true);
        jCheckBox22.setVisible(true);
        jCheckBox23.setVisible(true);
        jCheckBox24.setVisible(true);
        jCheckBox26.setVisible(true);
        jCheckBox28.setVisible(true);
        jCheckBox29.setVisible(true);
        jCheckBox32.setVisible(true);
        jCheckBox20.setVisible(true);
        jCheckBox17.setVisible(true);
        jCheckBox34.setVisible(true);
        jCheckBox19.setVisible(true);
        jCheckBox25.setVisible(true);
        jCheckBox27.setVisible(true);
        jCheckBox18.setVisible(true);
        jCheckBox31.setVisible(true);

        jCheckBox21.setEnabled(true);
        jCheckBox22.setEnabled(true);
        jCheckBox23.setEnabled(true);
        jCheckBox24.setEnabled(true);
        jCheckBox26.setEnabled(false);
        jCheckBox28.setEnabled(false);
        jCheckBox29.setEnabled(false);
        jCheckBox32.setEnabled(false);
        jCheckBox20.setEnabled(false);
        jCheckBox17.setEnabled(false);
        jCheckBox34.setEnabled(false);
        jCheckBox19.setEnabled(false);
        jCheckBox25.setEnabled(false);
        jCheckBox27.setEnabled(false);
        jCheckBox18.setEnabled(false);
        jCheckBox31.setEnabled(false);

        jCheckBox21.setSelected(false);
        jCheckBox22.setSelected(false);
        jCheckBox23.setSelected(false);
        jCheckBox24.setSelected(false);
        jCheckBox26.setSelected(false);
        jCheckBox28.setSelected(false);
        jCheckBox29.setSelected(false);
        jCheckBox32.setSelected(false);
        jCheckBox20.setSelected(false);
        jCheckBox17.setSelected(false);
        jCheckBox34.setSelected(false);
        jCheckBox19.setSelected(false);
        jCheckBox25.setSelected(false);
        jCheckBox27.setSelected(false);
        jCheckBox18.setSelected(false);
        jCheckBox31.setSelected(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox34ActionPerformed
        if( jCheckBox34.isSelected()){
            jCheckBox18.setEnabled(false);
            jCheckBox20.setEnabled(false);
            jCheckBox17.setEnabled(false);
            jCheckBox19.setEnabled(false);
            jCheckBox25.setEnabled(true);
            jCheckBox27.setEnabled(true);
            jCheckBox31.setEnabled(true);
            temper=3;
            jCheckBox18.setVisible(false);
            jCheckBox20.setVisible(false);
            jCheckBox17.setVisible(false);
            jCheckBox19.setVisible(false);

        }
    }//GEN-LAST:event_jCheckBox34ActionPerformed

    private void jCheckBox32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox32ActionPerformed
        if( jCheckBox32.isSelected()){
            jCheckBox26.setEnabled(false);
            jCheckBox28.setEnabled(false);
            jCheckBox29.setEnabled(false);
            jCheckBox19.setEnabled(false);
            jCheckBox31.setEnabled(false);
            jCheckBox20.setEnabled(true);
            jCheckBox17.setEnabled(true);
            jCheckBox34.setEnabled(true);

            temper=2;
            jCheckBox26.setVisible(false);
            jCheckBox28.setVisible(false);
            jCheckBox29.setVisible(false);
            jCheckBox19.setVisible(false);
            jCheckBox31.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox32ActionPerformed

    private void jCheckBox31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox31ActionPerformed
        if( jCheckBox31.isSelected()){
            jCheckBox25.setEnabled(false);
            jCheckBox27.setEnabled(false);
            jCheckBox18.setEnabled(false);
            temper=4;
            jCheckBox25.setVisible(false);
            jCheckBox27.setVisible(false);
            jCheckBox18.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox31ActionPerformed

    private void jCheckBox29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox29ActionPerformed
        if( jCheckBox29.isSelected()){
            jCheckBox26.setEnabled(false);
            jCheckBox28.setEnabled(false);
            jCheckBox32.setEnabled(false);
            jCheckBox34.setEnabled(false);
            jCheckBox18.setEnabled(false);
            temper=2;
            jCheckBox20.setEnabled(true);
            jCheckBox17.setEnabled(true);
            jCheckBox19.setEnabled(true);

            jCheckBox26.setVisible(false);
            jCheckBox28.setVisible(false);
            jCheckBox32.setVisible(false);
            jCheckBox34.setVisible(false);
            jCheckBox18.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox29ActionPerformed

    private void jCheckBox28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox28ActionPerformed
        if( jCheckBox28.isSelected()){
            jCheckBox26.setEnabled(false);
            jCheckBox29.setEnabled(false);
            jCheckBox32.setEnabled(false);
            jCheckBox17.setEnabled(false);
            jCheckBox27.setEnabled(false);
            temper=2;
            jCheckBox20.setEnabled(true);
            jCheckBox34.setEnabled(true);
            jCheckBox19.setEnabled(true);

            jCheckBox26.setVisible(false);
            jCheckBox29.setVisible(false);
            jCheckBox32.setVisible(false);
            jCheckBox17.setVisible(false);
            jCheckBox27.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox28ActionPerformed

    private void jCheckBox27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox27ActionPerformed
        if( jCheckBox27.isSelected()){
            jCheckBox25.setEnabled(false);
            jCheckBox18.setEnabled(false);
            jCheckBox31.setEnabled(false);
            temper=4;
            jCheckBox25.setVisible(false);
            jCheckBox18.setVisible(false);
            jCheckBox31.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox27ActionPerformed

    private void jCheckBox26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox26ActionPerformed
        if( jCheckBox26.isSelected()){
            jCheckBox20.setEnabled(false);
            jCheckBox25.setEnabled(false);
            jCheckBox28.setEnabled(false);
            jCheckBox29.setEnabled(false);
            jCheckBox32.setEnabled(false);
            temper=2;
            jCheckBox17.setEnabled(true);
            jCheckBox34.setEnabled(true);
            jCheckBox19.setEnabled(true);
            //
            //jCheckBox17.setEnabled(true);
            //        jCheckBox34.setEnabled(true);
            //        jCheckBox19.setEnabled(true);
            //                jCheckBox27.setEnabled(true);
            //                jCheckBox18.setEnabled(true);
            //                        jCheckBox31.setEnabled(true);

            jCheckBox20.setVisible(false);
            jCheckBox25.setVisible(false);
            jCheckBox28.setVisible(false);
            jCheckBox29.setVisible(false);
            jCheckBox32.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox26ActionPerformed

    private void jCheckBox25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox25ActionPerformed
        if( jCheckBox25.isSelected()){
            jCheckBox27.setEnabled(false);
            jCheckBox18.setEnabled(false);
            jCheckBox31.setEnabled(false);
            temper=4;
            jCheckBox27.setVisible(false);
            jCheckBox18.setVisible(false);
            jCheckBox31.setVisible(false);}
    }//GEN-LAST:event_jCheckBox25ActionPerformed

    private void jCheckBox24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox24ActionPerformed
        if( jCheckBox24.isSelected()){
            jCheckBox21.setEnabled(false);
            jCheckBox22.setEnabled(false);
            jCheckBox23.setEnabled(false);
            jCheckBox32.setEnabled(false);
            jCheckBox19.setEnabled(false);
            jCheckBox31.setEnabled(false);
            temper=1;
            jCheckBox26.setEnabled(true);
            jCheckBox28.setEnabled(true);
            jCheckBox29.setEnabled(true);
            //jCheckBox20.setEnabled(true);
            //jCheckBox17.setEnabled(true);
            //jCheckBox34.setEnabled(true);
            //jCheckBox25.setEnabled(true);
            //jCheckBox27.setEnabled(true);
            //jCheckBox18.setEnabled(true);

            jCheckBox21.setVisible(false);
            jCheckBox22.setVisible(false);
            jCheckBox23.setVisible(false);
            jCheckBox32.setVisible(false);
            jCheckBox19.setVisible(false);
            jCheckBox31.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox24ActionPerformed

    private void jCheckBox23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox23ActionPerformed
        if(jCheckBox23.isSelected()){
            jCheckBox21.setEnabled(false);
            jCheckBox22.setEnabled(false);
            jCheckBox24.setEnabled(false);
            jCheckBox29.setEnabled(false);
            jCheckBox34.setEnabled(false);
            jCheckBox18.setEnabled(false);
            temper=1;
            jCheckBox26.setEnabled(true);
            //jCheckBox20.setEnabled(true);
            //jCheckBox25.setEnabled(true);
            jCheckBox28.setEnabled(true);
            //jCheckBox17.setEnabled(true);
            //jCheckBox27.setEnabled(true);
            jCheckBox32.setEnabled(true);
            //jCheckBox19.setEnabled(true);
            //jCheckBox31.setEnabled(true);

            jCheckBox21.setVisible(false);
            jCheckBox22.setVisible(false);
            jCheckBox24.setVisible(false);
            jCheckBox29.setVisible(false);
            jCheckBox34.setVisible(false);
            jCheckBox18.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox23ActionPerformed

    private void jCheckBox22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox22ActionPerformed
        if(jCheckBox22.isSelected()){
            jCheckBox21.setEnabled(false);
            jCheckBox23.setEnabled(false);
            jCheckBox24.setEnabled(false);
            jCheckBox28.setEnabled(false);
            jCheckBox17.setEnabled(false);
            jCheckBox27.setEnabled(false);
            temper=1;

            jCheckBox26.setEnabled(true);
            //jCheckBox20.setEnabled(true);
            //jCheckBox25.setEnabled(true);
            jCheckBox29.setEnabled(true);
            //jCheckBox34.setEnabled(true);
            //jCheckBox18.setEnabled(true);
            jCheckBox32.setEnabled(true);
            //jCheckBox19.setEnabled(true);
            //jCheckBox31.setEnabled(true);

            jCheckBox21.setVisible(false);
            jCheckBox23.setVisible(false);
            jCheckBox24.setVisible(false);
            jCheckBox28.setVisible(false);
            jCheckBox17.setVisible(false);
            jCheckBox27.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox22ActionPerformed

    private void jCheckBox21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox21ActionPerformed
        if(jCheckBox21.isSelected()){
            jCheckBox22.setEnabled(false);
            jCheckBox23.setEnabled(false);
            jCheckBox24.setEnabled(false);
            jCheckBox26.setEnabled(false);
            jCheckBox20.setEnabled(false);
            jCheckBox25.setEnabled(false);
            temper=1;
            jCheckBox28.setEnabled(true);
            jCheckBox29.setEnabled(true);
            jCheckBox32.setEnabled(true);
            //jCheckBox17.setEnabled(true);
            //jCheckBox34.setEnabled(true);
            //jCheckBox19.setEnabled(true);
            //jCheckBox27.setEnabled(true);
            //jCheckBox18.setEnabled(true);
            //jCheckBox31.setEnabled(true);

            jCheckBox22.setVisible(false);
            jCheckBox23.setVisible(false);
            jCheckBox24.setVisible(false);
            jCheckBox26.setVisible(false);
            jCheckBox20.setVisible(false);
            jCheckBox25.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox21ActionPerformed

    private void jCheckBox20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox20ActionPerformed
        if( jCheckBox20.isSelected()){
            jCheckBox2.setEnabled(false);
            jCheckBox17.setEnabled(false);
            jCheckBox34.setEnabled(false);
            jCheckBox19.setEnabled(false);
            jCheckBox27.setEnabled(true);
            jCheckBox18.setEnabled(true);
            jCheckBox31.setEnabled(true);
            temper=3;
            jCheckBox2.setVisible(false);
            jCheckBox17.setVisible(false);
            jCheckBox34.setVisible(false);
            jCheckBox19.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox20ActionPerformed

    private void jCheckBox19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox19ActionPerformed
        if( jCheckBox19.isSelected()){
            jCheckBox20.setEnabled(false);
            jCheckBox17.setEnabled(false);
            jCheckBox34.setEnabled(false);
            jCheckBox31.setEnabled(false);
            jCheckBox25.setEnabled(true);
            jCheckBox27.setEnabled(true);
            jCheckBox18.setEnabled(true);
            temper=3;
            jCheckBox20.setVisible(false);
            jCheckBox17.setVisible(false);
            jCheckBox34.setVisible(false);
            jCheckBox31.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox19ActionPerformed

    private void jCheckBox18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox18ActionPerformed
        if( jCheckBox18.isSelected()){
            jCheckBox25.setEnabled(false);
            jCheckBox27.setEnabled(false);
            jCheckBox31.setEnabled(false);
            temper=4;
            jCheckBox25.setVisible(false);
            jCheckBox27.setVisible(false);
            jCheckBox31.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox18ActionPerformed

    private void jCheckBox17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox17ActionPerformed
        if( jCheckBox17.isSelected()){
            jCheckBox20.setEnabled(false);
            jCheckBox27.setEnabled(false);
            jCheckBox34.setEnabled(false);
            jCheckBox19.setEnabled(false);
            jCheckBox25.setEnabled(true);
            jCheckBox18.setEnabled(true);
            jCheckBox31.setEnabled(true);
            temper=3;
            jCheckBox20.setVisible(false);
            jCheckBox27.setVisible(false);
            jCheckBox34.setVisible(false);
            jCheckBox19.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBox17ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", "open.txt"), "77");
        JOptionPane.showMessageDialog(this, "Cash Reconcilliation Completed Successfully");
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed

        if(dbq.nocashposted(userId)){

            JOptionPane.showMessageDialog(this, "No transaction found");
            return;

        }else{

            postingHeaderButtons  .setVisible(false);
            postingSubHeaderButtons.setVisible(false);
            mainPanel.setVisible(false);
            allAccountsPanel.setVisible(true);
            cashRecon.setVisible(false);
            dbq.fillMeWithGeneralLedger(jTable3, fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
            Integer cv=57;
            fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliation2.txt"), cv.toString());
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed

        if(jTextField9.getText().isEmpty()&&jTextField5.getText().isEmpty()&&jTextField6.getText().isEmpty()&&jTextField7.getText().isEmpty()&&jTextField8.getText().isEmpty()&&jTextField1.getText().isEmpty()&&jTextField2.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You need to put at least one of the number of denominations");
        }else{

            Double cashAtHand=0.0;
            jLabel45.setText("UGX"+" "+NumberFormat.format(Math.abs(parseDouble(dbq.cashPosted(userId)))));
            if(!data5.isEmpty()){
                int h=0;
                while(h<data5.size()){

                    cashAtHand=cashAtHand+parseDouble(data5.get(h).toString());
                    h++;
                }

            }
            jLabel46.setText("UGX"+" "+NumberFormat.format(cashAtHand));
            jButton17.setEnabled(false);
            Double diff=parseDouble(dbq.cashPosted(userId))-cashAtHand;
            if(diff<0.0){
                jLabel43.setText("Cash At Hand is more than"+"  "+
                    "Cash posted by UGX"+" "+NumberFormat.format(Math.abs(diff)));
                jLabel43.setForeground(Color.red);
                jButton19.setVisible(true);
            }else if(diff>0.0){
                jLabel43.setText("Cash posted is more than"+"  "+
                    "Cash At Hand by UGX"+" "+NumberFormat.format(Math.abs(diff)));
                jLabel43.setForeground(Color.red);
                jButton19.setVisible(true);
            }else if(diff==0.0){
                jLabel43.setText("Cash At Hand and Cash Posted Balanced");
                jButton20.setVisible(true);
                jLabel43.setForeground(jTFuserId4.getForeground());
            }
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jCheckBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox12ActionPerformed
        if(jTextField14.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox12.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField14.getText())*20));
        }
    }//GEN-LAST:event_jCheckBox12ActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed
        if(jTextField13.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox11.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField13.getText())*50));
        }
    }//GEN-LAST:event_jCheckBox11ActionPerformed

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed
        if(jTextField12.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox10.setSelected(false);
        }else{
            data5.add((parseDouble(jTextField12.getText())*100));

        }
    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9ActionPerformed
        if(jTextField11.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox9.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField11.getText())*200));
        }
    }//GEN-LAST:event_jCheckBox9ActionPerformed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        if(jTextField2.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox8.setSelected(false);
        }else{
            data5.add((parseDouble(jTextField2.getText())*500));

        }
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        if(jTextField9.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox7.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField9.getText())*50000));
        }
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        if(jTextField10.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox6.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField10.getText())*5));
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        if(jTextField1.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox5.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField1.getText())*1000));
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if(jTextField8.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox4.setSelected(false);
        }else{
            data5.add((parseDouble(jTextField8.getText())*2000));

        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if(jTextField7.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox3.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField7.getText())*5000));
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if(jTextField6.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox2.setSelected(false);
        }else{
            data5.add((parseDouble(jTextField6.getText())*10000));

        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jTextField5.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please input the number of the denomination");
            jCheckBox1.setSelected(false);
        }else{

            data5.add((parseDouble(jTextField5.getText())*20000));
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox13ActionPerformed
        if(jCheckBox13.isSelected()){

            fios.intFileWriterReplace(fios.createFileName("postingEntry", "generalTrn", "waiveInterest.txt"),"7");

        }else if(!jCheckBox13.isSelected()){

            fios.intFileWriterReplace(fios.createFileName("postingEntry", "generalTrn", "waiveInterest.txt"),"3");

        }
    }//GEN-LAST:event_jCheckBox13ActionPerformed

    private void valueDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueDate1ActionPerformed

    }//GEN-LAST:event_valueDate1ActionPerformed

    private void amountFieldDebit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountFieldDebit1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountFieldDebit1ActionPerformed

    private void jFormattedTextField3S3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField3S3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField3S3ActionPerformed

    private void jFormattedTextField3SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField3SActionPerformed

    }//GEN-LAST:event_jFormattedTextField3SActionPerformed

    private void debitAccountFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_debitAccountFieldKeyReleased

    }//GEN-LAST:event_debitAccountFieldKeyReleased

    private void debitAccountFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_debitAccountFieldKeyPressed

    }//GEN-LAST:event_debitAccountFieldKeyPressed

    private void debitAccountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debitAccountFieldActionPerformed

    }//GEN-LAST:event_debitAccountFieldActionPerformed

    private void JBTrnSqNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBTrnSqNoActionPerformed

        HeaderRenderer header = new HeaderRenderer(jTable3.getTableHeader().getDefaultRenderer());

        int h1=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1<jTable3.getColumnModel().getColumnCount()){
            jTable3.getColumnModel().getColumn(h1).setHeaderRenderer(header);

            if(h1==0){
                jTable3.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable3.getColumnModel().getColumn(h1).setMaxWidth(100);
                jTable3.getColumnModel().getColumn(h1).setPreferredWidth(50);

            }

            if(h1==1){
                jTable3.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable3.getColumnModel().getColumn(h1).setMaxWidth(200);
                jTable3.getColumnModel().getColumn(h1).setPreferredWidth(150);

            }
            h1++;

        }
        jTable3.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                this.setHorizontalAlignment(JLabel.LEFT);

                if(row==table.getRowCount()-1){
                    this.setFont(new Font("Arial",Font.BOLD,20));
                }else{
                    this.setFont(new Font("Arial",Font.PLAIN,18));
                }

                if(col==4){
                    Number c = (Number)parseDouble(value.toString());
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
                if (row%2==0) {
                    setBackground(jButton49.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                } else {
                    setBackground(jButton50.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                }

                return this;
            }
        });

        Integer x=26;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliation.txt"),x.toString());
        switch(jComboTransactionType.getSelectedItem().toString()){

            case "Gen":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "Save":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;
            }
            break;
            case "Save2":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;
            }
            break;
            case "WdrawS":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;
            }
            break;
            case "WdrawS2":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;
            }
            break;
            case "LoanR":

            if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){

                if(dbq.fillMeWithAllAccountsBdhl(jTable3,this)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }else{

                if(dbq.fillMeWithAllAccountsB(jTable3,this)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }

            break;
case "LoanRD":

            if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"))==46){

                if(dbq.fillMeWithAllAccountsBdhl(jTable3,this)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }else{

                if(dbq.fillMeWithAllAccountsB(jTable3,this)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }

            break;
            case "LoanD":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "LoanW":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "LoanRe":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "LoanT":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "LoanC":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "CapR":

            if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){

                if(dbq.fillMeWithAllAccountsdhl(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }else{

                if(dbq.fillMeWithAllAccountsC(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }

            break;
            case "CapRD":

            if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"))==46){

                if(dbq.fillMeWithAllAccountsdhl(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }else{

                if(dbq.fillMeWithAllAccountsC(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }

            break;
            case "CapRC":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }
            break;
            case "Cap":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }
            break;
            case "BC":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }
            break;
            case "CB":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }
            break;
            case "CR":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }

            break;
            case "I":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
            }
            break;

            case "DCap":

            if(dbq.fillMeWithAllAccountsC(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;
            }

            break;
            case "DCapD":

            if(dbq.fillMeWithAllAccountsC(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;
            }

            break;
            //   case "Pay Electricty":
            //      if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            //   case "Pay Air Time Allowance":
            //      if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            //
            //     case "Pay Lunch Allowance":
            //      if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            //        case "Pay Water":
            //           if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //
            //
            //    break;
            //    case "Pay Employees Salary":
            //       if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            //  case "Pay Employees Allowancies":
            //    if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            // case "Pay Rent":
            //     if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            // case "Pay Taxes":
            //  if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            // case "Pay Other Expenses":
            //      if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //    break;
            //
            //        case "Pay News Papers and Periodicals":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Telphone and Internet":
            //        if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //
            //        case "Pay Licenses and Permits":
            //          if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Stationary and Photocopying":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Legal Expenses":
            //               if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //
            //        case "Pay Bank Charges":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Financing Expense":
            //              if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Commission Payable":
            //              if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Interest Payable":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Transport Expense":
            //              if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Bad Loans Written Off":
            //                if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //
            //        case "Pay Provision for Bad Debts":
            //           if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Provision for Depreciation":
            //               if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Entertainment and Refreshment":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //
            //
            //        case "Pay Board Sitting Allowance":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Nssf":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;
            //        case "Pay Payee":
            //             if(dbq.fillMeWithAllAccounts(jTable3)){
                //         cashRecon.setVisible(false);
                //
                //        postingHeaderButtons  .setVisible(false);
                //postingSubHeaderButtons.setVisible(false);
                //mainPanel.setVisible(false);
                //       allAccountsPanel.setVisible(true);
                //         }else{
                //
                //         JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                //         return;
                //         }
            //        break;

        }

    }//GEN-LAST:event_JBTrnSqNoActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
    Integer z1=1210;
      fios.intFileWriterReplace(fios.createFileName("PMMS_Statements", "reports", "calSelection.txt"),z1.toString());  
      Calender frmMain = new Calender();
        frmMain.setIUpdateText(this);  
        frmMain.pack();
        frmMain.setVisible(true);

    }//GEN-LAST:event_jButton16ActionPerformed

    private void jCheckBox73ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox73ActionPerformed
        if(jCheckBox73.isSelected()){

            Integer c=46;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"),c.toString());

        } else if(!jCheckBox73.isSelected()){
            Integer c=4;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "postSaccoShares.txt"),c.toString());
        }
    }//GEN-LAST:event_jCheckBox73ActionPerformed

    private void amountCredit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountCredit1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountCredit1ActionPerformed

    private void jCheckBox72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox72ActionPerformed
        if(amountCredit1.getValue()==null){

            JOptionPane.showMessageDialog(this, "Please put charges for withdrawing savings");
            jCheckBox72.setSelected(false);
        }else{

            if(jCheckBox72.isSelected()){
                amountCredit1.setEditable(false);
                jCheckBox72.setSelected(true);

                fios.stringFileWriter(fios.createFileName("persistence", "interestAccount", "withDrawCharges.txt"), amountCredit1.getValue().toString());

                Integer xti=15;
                fios.intFileWriterReplace(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"), xti.toString());

            } else if(!jCheckBox72.isSelected()){

                Integer xti=5;
                fios.intFileWriterReplace(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"), xti.toString());
                amountCredit1.setValue(null);
                jCheckBox72.setSelected(false);
            }

        }
    }//GEN-LAST:event_jCheckBox72ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        JOptionPane.showMessageDialog(this, "Posting Settings were effected Successfully");
        jPanel2.setVisible(false);
        debitPanel.setVisible(true);
        creditingPanel.setVisible(true);
        cashRecon.setVisible(false);
        jPanel4.setVisible(false);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jCheckBox71ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox71ActionPerformed
        if(jCheckBox71.isSelected()){

            Integer c=46;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"),c.toString());

        } else if(!jCheckBox71.isSelected()){
            Integer c=4;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"),c.toString());
        }
    }//GEN-LAST:event_jCheckBox71ActionPerformed

    private void jCheckBox70ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox70ActionPerformed
        if(jCheckBox70.isSelected()){

            Integer c=46;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"),c.toString());

        } else if(!jCheckBox70.isSelected()){
            Integer c=4;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "postSaccoLoans.txt"),c.toString());
        }
    }//GEN-LAST:event_jCheckBox70ActionPerformed

    private void jCheckBox69ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox69ActionPerformed
        if(jCheckBox69.isSelected()){

            Integer c=46;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "autoManageCash.txt"),c.toString());

        } else if(!jCheckBox69.isSelected()){
            Integer c=4;
            fios.intFileWriterReplace( fios.createFileName("persistence", "interestAccount", "autoManageCash.txt"),c.toString());
        }
    }//GEN-LAST:event_jCheckBox69ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        JOptionPane.showMessageDialog(this,""+fmt.diffDays(jTFTrnSqNo.getText(), jTFLoginTime1.getText()));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
     fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "changeWindowValueBXNew.txt"), jTabbedPane1.getSelectedIndex()+"");    
 
        cancelButton.setEnabled(true);
        //        if(dbq.nocashposted(userId)){
            //
            //        JOptionPane.showMessageDialog(this, "No cash posted by you today");
            //        return;
            //        } else{
            jPanel2.setVisible(false);
            debitPanel.setVisible(false);
            creditingPanel.setVisible(false);
            cashRecon.setVisible(true);
            data5=new ArrayList();
            //        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        JOptionPane.showMessageDialog(this, debitS().get(4));
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //JOptionPane.showMessageDialog(this, dbq.accountBalance("05502000510"));
        //        dbBackUp.backUpTheDataBase("mysql");
        List<String> databases= new ArrayList<>();
        //        databases.add(0, "pmms");
        //        databases.add(1, "pmms_loans");
//        dbBackUp.backUpTheDataBase("pmms");
        //     dbBackUp.backUppmms();
        //     filesW.creatTheFoldersAndFiles();
        //    filesW. creatTheFoldersAndFiles1();
        //    filesW.creatTheFoldersAndFiles2();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void amountCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountCreditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountCreditActionPerformed

    private void creditNarration1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditNarration1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditNarration1ActionPerformed

    private void creditAccountFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_creditAccountFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditAccountFieldKeyPressed

    private void creditAccountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditAccountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditAccountFieldActionPerformed

    private void JBTrnSqNo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBTrnSqNo2ActionPerformed
        HeaderRenderer header = new HeaderRenderer(jTable3.getTableHeader().getDefaultRenderer());

        int h1=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1<jTable3.getColumnModel().getColumnCount()){
            jTable3.getColumnModel().getColumn(h1).setHeaderRenderer(header);

            if(h1==0){
                jTable3.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable3.getColumnModel().getColumn(h1).setMaxWidth(100);
                jTable3.getColumnModel().getColumn(h1).setPreferredWidth(50);

            }

            if(h1==1){
                jTable3.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable3.getColumnModel().getColumn(h1).setMaxWidth(200);
                jTable3.getColumnModel().getColumn(h1).setPreferredWidth(150);

            }
            h1++;

        }
        jTable3.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                this.setHorizontalAlignment(JLabel.LEFT);

                if(row==table.getRowCount()-1){
                    this.setFont(new Font("Arial",Font.BOLD,20));
                }else{
                    this.setFont(new Font("Arial",Font.PLAIN,18));
                }

                if(col==4){
                    Number c = (Number)parseDouble(value.toString());
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
                if (row%2==0) {
                    setBackground(jButton49.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                } else {
                    setBackground(jButton50.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                }

                return this;
            }
        });

        Integer x=27;
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliation.txt"),x.toString());
        switch(jComboTransactionType.getSelectedItem().toString()){

            case "Gen":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Save":

            if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"))==46){

                if(dbq.fillMeWithAllAccountsdhl(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }else{

                if(dbq.fillMeWithAllAccountsC(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }

            break;
            case "Save2":

            if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "postSaccoSavings.txt"))==46){

                if(dbq.fillMeWithAllAccountsdhl(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }else{

                if(dbq.fillMeWithAllAccountsC(jTable3)){
                    cashRecon.setVisible(false);

                    postingHeaderButtons  .setVisible(false);
                    postingSubHeaderButtons.setVisible(false);
                    mainPanel.setVisible(false);
                    allAccountsPanel.setVisible(true);
                }else{

                    JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                    return;
                }

            }

            break;
            case "WdrawS":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "WdrawS2":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "LoanR":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts Found!!!!");
                return;}
            break;
            case "LoanD":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "LoanW":
            dbq.fillMeWithAllAccountsC(jTable3);
            break;
            case "LoanRe":

            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "LoanT":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "LoanC":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "CapR":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "CapRD":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "CapRC":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Cap":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;
            case "BC":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "CB":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "CR":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}

            break;
            case "I":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "DCap":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;

            case "DCapD":
            if(dbq.fillMeWithAllAccountsC(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }

            break;

            case "Pay Employees Salary":

            if(dbq.fillMeWithAllAccountsCE(jTable3)){
                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
                cashRecon.setVisible(false);

            }else{

                JOptionPane.showMessageDialog(this, "No Customer Accounts found!!!");
                return;
            }
            break;

            case "Pay Electricty":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Air Time Allowance":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay Lunch Allowance":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Water":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay Employees Allowancies":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Rent":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Taxes":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Other Expenses":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay News Papers and Periodicals":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Telphone and Internet":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay Licenses and Permits":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Stationary and Photocopying":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Legal Expenses":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay Bank Charges":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Financing Expense":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Commission Payable":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Interest Payable":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Transport Expense":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Bad Loans Written Off":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay Provision for Bad Debts":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Provision for Depreciation":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Entertainment and Refreshment":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;

            case "Pay Board Sitting Allowance":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Nssf":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
            case "Pay Payee":
            if(dbq.fillMeWithAllAccounts(jTable3)){
                cashRecon.setVisible(false);

                postingHeaderButtons  .setVisible(false);
                postingSubHeaderButtons.setVisible(false);
                mainPanel.setVisible(false);
                allAccountsPanel.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            break;
        }

    }//GEN-LAST:event_JBTrnSqNo2ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        jPanel2.setVisible(true);
        debitPanel.setVisible(false);
        creditingPanel.setVisible(false);
        cashRecon.setVisible(false);
        jPanel4.setVisible(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void valueDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueDateActionPerformed

    private void jComboTransactionTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboTransactionTypeActionPerformed

//        jPanel2.setVisible(false);
//        switch(jComboTransactionType.getSelectedItem().toString()){
//
//            case "Gen":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Gen");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "Save":
//            this.populateCashForSavings( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Save");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "Save2":
//            this.populateCashForSavings( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Save2");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "WdrawS":
//            this.populateCashForWithdraw( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"WdrawS");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "WdrawS2":
//            this.populateCashForWithdraw( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"WdrawS2");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "LoanR":
//            jCheckBox13.setVisible(true);
//            updateCreditFields(fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanR");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "LoanRD":
//            jCheckBox13.setVisible(true);
//            updateCreditFields(fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanRD");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//
//            case "LoanD":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanD");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "LoanW":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanW");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "LoanRe":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanRe");
//
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "LoanT":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanT");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "LoanC":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"LoanC");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "CapR":
//            updateCreditFields(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setcapitalAc1.txt")).split("[,]", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"CapR");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "CapRD":
//            updateCreditFields(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setcapitalAc1.txt")).split("[,]", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"CapRD");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "CapRC":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"CapRC");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "Cap":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Cap");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "BC":
//            this.populateBankWithdraw(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setBankAc1.txt")).split(",", 2)[0], fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"BC");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "CB":
//
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"CB");
//            newButton();
//            this.populateBankDeposit(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setBankAc1.txt")).split(",", 2)[0], fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//            jComboTransactionType.setEnabled(false);
//            break;
//            case "CR":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"CR");
//
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "I":
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"I");
//
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//
//            case "DCap":
//            updateDebitFields(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setcapitalAc1.txt")).split("[,]", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"DCap");
//
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//
//            case "DCapD":
//            updateDebitFields(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setcapitalAc1.txt")).split("[,]", 2)[0]);
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"DCapD");
//
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//            break;
//            case "Pay Electricty":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Electricty"))){
//
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Electricty");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Electricty"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Electricity Expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Air Time Allowance":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Air Time Allowance"))){
//
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Air Time Allowance");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Air Time Allowance"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Air Time Allowance Expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//
//            case "Pay Lunch Allowance":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Lunch Allowance"))){
//
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Lunch Allowance");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Lunch Allowance"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Lunch Allowance Expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Water":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Water"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Water");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Water"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Water Expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Employees Salary":
//
//            this.populateEmployeeSalo( dbq.getAccountNumber("Pay Employees Salary"));
//            fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Employees Salary");
//            newButton();
//            jComboTransactionType.setEnabled(false);
//
//                     if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Employees Salary"))){
//                  fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"), "Pay Employees Salary");
//                     newButton();
//                      this.populateExpense(dbq.getAccountNumber("Pay Employees Salary"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                     jComboTransactionType.setEnabled(false);
//                      }else{
//                       JOptionPane.showMessageDialog(this, "Please first create the Employee Salary Expense  Ledger");
//                        cancelButton.setEnabled(true);
//                
//                       }
//            break;
//            case "Pay Employees Allowancies":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Employees Allowancies"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Employees Allowancies");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Employees Allowancies"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Employee Allowancies expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Rent":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Rent"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Rent");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Rent"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Rent Expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Taxes":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Taxes"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Taxes");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Taxes"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Taxes expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Other Expenses":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Other Expenses"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Other Expenses");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Other Expenses"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Other expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//
//            case "Pay News Papers and Periodicals":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay News Papers and Periodicals"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay News Papers and Periodicals");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay News Papers and Periodicals"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the News Papers expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//            case "Pay Telphone and Internet":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Telphone and Internet"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Telphone and Internet");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Telphone and Internet"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Telephone and Internet expense Ledger");
//                cancelButton.setEnabled(true);
//
//            }
//            break;
//
//            case "Pay Licenses and Permits":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Telphone and Internet"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Licenses and Permits");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Licenses and Permits"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Licenses and Permits expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Stationary and Photocopying":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Telphone and Internet"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Stationary and Photocopying");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Stationary and Photocopying"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Stationary and Photocopying expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Legal Expenses":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Legal Expenses"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Legal Expenses");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Legal Expenses"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the legal expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//
//            case "Pay Bank Charges":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Bank Charges"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Bank Charges");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Bank Charges"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Bank Charges expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Financing Expense":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Financing Expense"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Financing Expense");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Financing Expense"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Financing expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Commission Payable":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Commission Payable"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Commission Payable");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Commission Payable"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Commissions payable expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Interest Payable":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Interest Payable"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Interest Payable");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Interest Payable"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Interest payable expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Transport Expense":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Transport Expense"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Transport Expense");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Transport Expense"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Transport expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Bad Loans Written Off":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Bad Loans Written Off"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Bad Loans Written Off");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Bad Loans Written Off"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Bad Loans Written Off expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//
//            case "Pay Provision for Bad Debts":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Bad Loans Written Off"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Provision for Bad Debts");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Provision for Bad Debts"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Provision for bad debts expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Provision for Depreciation":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Provision for Depreciation"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Provision for Depreciation");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Provision for Depreciation"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the provision for Depreciation expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Entertainment and Refreshment":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Entertainment and Refreshment"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Entertainment and Refreshment");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Entertainment and Refreshment"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Entertainment expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//
//            case "Pay Board Sitting Allowance":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Board Sitting Allowance"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Board Sitting Allowance");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Board Sitting Allowance"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Boaed Sitting Allowance expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Nssf":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Nssf"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Nssf");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Nssf"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Nssf contribution expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//            case "Pay Payee":
//            if(dbq.testTable("bsanca"+dbq.getAccountNumber("Pay Payee"))){
//                fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"),"Pay Payee");
//                newButton();
//                this.populateExpense(dbq.getAccountNumber("Pay Payee"), fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "setCashAc1.txt")).split(",", 2)[0]);
//                jComboTransactionType.setEnabled(false);
//            }else{
//                JOptionPane.showMessageDialog(this, "Please first create the Payee contribution expense Ledger");
//                cancelButton.setEnabled(true);
//            }
//            break;
//
//        }

    }//GEN-LAST:event_jComboTransactionTypeActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed

    }//GEN-LAST:event_jButton18ActionPerformed

    private void openDay1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDay1ActionPerformed
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_openDay1ActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

//        valueDate1.setText(sdf.format(new Date(System.currentTimeMillis())));
//
//        setBatchNumber();
//        switch(fios.stringFileReader(fios.createFileName("postingEntry", "generalTrn", "trnType"+this.userId+".txt"))){
//
//            case "Gen":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Transaction was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//
//            case "Save":
//            if(processSavings()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Savings was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Savings processing Failed");
//
//            }
//            break;
//            case "Save2":
//            if(processSavings2()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Savings was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Savings processing Failed");
//
//            }
//            break;
//            case "Pay Employees Salary":
//            if(processSalary()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Salary payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Salary payment processing Failed");
//
//            }
//            break;
//            case "WdrawS":
//            if(processWithdraw()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Cash Withdraw was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Cash Withdraw processing Failed");
//
//            }
//            break;
//            case "WdrawS2":
//            if(processWithdraw2()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Cash Withdraw was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Cash Withdraw processing Failed");
//
//            }
//            break;
//
//            case "LoanR":
//
//            if(verifyLoanRepaymentability()){
//
//                //   if(fios.intFileReader(fios.createFileName("persistence", "useCRB", "useCrb.txt"))==1){
//                    //
//                    //
//                    //
//                    //
//                    //   }
//
//                //   else if(fios.intFileReader(fios.createFileName("persistence", "useCRB", "useCRBAsARequirementForNewBorrowersOnly.txt"))==1){
//
//                    if(processLoanRepaymentNew()){
//                        //        laonPay = new ProcessLoanRepayment();
//                        //
//                        //        laonPay.execute();
//                        initialiseSequenceNumberInTextField(jTFTrnSqNo);
//
//                        JOptionPane.showMessageDialog(this, "Loan Repayment was successfully processed");
//
//                        JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//
//                    }else{
//
//                        JOptionPane.showMessageDialog(this, "Loan Repayment Failed");
//
//                    }
//                }else
//                {  JOptionPane.showMessageDialog(this, "Loan Repayment Could Not Proceed");}
//
//                // }
//            break;
//
//            case "LoanRD":
//
//            if(verifyLoanRepaymentability()){
//
//                //   if(fios.intFileReader(fios.createFileName("persistence", "useCRB", "useCrb.txt"))==1){
//                    //
//                    //
//                    //
//                    //
//                    //   }
//
//                //   else if(fios.intFileReader(fios.createFileName("persistence", "useCRB", "useCRBAsARequirementForNewBorrowersOnly.txt"))==1){
//
//                    if(processLoanRepaymentNew()){
//                        //        laonPay = new ProcessLoanRepayment();
//                        //
//                        //        laonPay.execute();
//                        initialiseSequenceNumberInTextField(jTFTrnSqNo);
//
//                        JOptionPane.showMessageDialog(this, "Loan Repayment was successfully processed");
//
//                        JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//
//                    }else{
//
//                        JOptionPane.showMessageDialog(this, "Loan Repayment Failed");
//
//                    }
//                }else
//                {  JOptionPane.showMessageDialog(this, "Loan Repayment Could Not Proceed");}
//
//                // }
//            break;
//
//            case "LoanD":
//            if(processLoanDisbursement()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Loan Disbursement was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Loan Disbursement Failed");
//
//            }
//
//            break;
//            case "LoanW":
//
//            if(processLoanWriteOffs()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Loan WriteOff was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Loan WriteOff Failed");
//
//            }
//            break;
//            case "LoanRe":
//
//            if(processLoanResheduling()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Loan Resheduling was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Loan Resheduling Failed");
//
//            }
//
//            break;
//            case "LoanT":
//            if(processLoanTopUps()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Loan TopUp was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Loan TopUp Failed");
//
//            }
//
//            break;
//            case "LoanC":
//
//            if(processLoanCancellation()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Loan Cancellation was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Loan Cancellation Failed");
//
//            }
//            break;
//            case "CapR":
//
//            if(processRegularCapital()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation Failed");
//
//            } break;
//
//            case "CapRD":
//
//            if(processRegularCapital()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation Failed");
//
//            } break;
//            case "CapRC":
//
//            if( processRegularCapitalWithCharges()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation With Charges was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation With Charges Failed");
//
//            }
//            break;
//            case "Cap":
//            if( processCapital()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation With Charges was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Regular Capitalisation With Charges Failed");
//
//            }
//
//            break;
//            case "BC":
//            if(processBankToCash()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Bank To Cash With was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Bank To Cash Processing Failed");
//
//            }
//            break;
//            case "CB":
//            if( processCashToBank()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Cash To Bank was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Cash To Bank  Processing  Failed");
//
//            }
//
//            break;
//            case "CR":
//
//            if( processCharges()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Charges was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Charges Processing  Failed");
//
//            }
//
//            break;
//
//            case "I":
//            if( processInsurance()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Insurance was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Insurance Processing  Failed");
//
//            }
//
//            break;
//
//            case "DCap":
//            if( processDecapitalisation()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Decapitalisation was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Decapitalisation Processing  Failed");
//
//            }
//
//            break;
//
//            case "DCapD":
//            if( processDecapitalisation()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "Decapitalisation was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Decapitalisation Processing  Failed");
//
//            }
//
//            break;
//
//            case "Pay Electricty":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Elctricity Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//            case "Pay Air Time Allowance":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Air Time Allowance Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//            case "Pay Lunch Allowance":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Lunch Allowance Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//            case "Pay Water":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Water Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//            case "Pay News Papers and Periodicals":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The News Papers and Periodicals Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//            case "Pay Telphone and Internet":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Telephone and Internet Expense payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//
//            case "Pay Licenses and Permits":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Licenses and Permits Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//            case "Pay Stationary and Photocopying":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Stationary and Printing Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Legal Expenses":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Legal Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//
//            case "Pay Bank Charges":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Bank Charges Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Financing Expense":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Financing Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Commission Payable":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Commission Payable Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Interest Payable":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Interest Payable Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Transport Expense":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Transport Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Bad Loans Written Off":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Bad Loans Written Off Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//
//            case "Pay Provision for Bad Debts":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Provision for Bad Debts Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Provision for Depreciation":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Provision for Depreciation Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Entertainment and Refreshment":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Entertainment and Refreshment Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            //        case "Pay Employees Salary":
//            //if(processGeneralTransaction()){
//                // initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                //  JOptionPane.showMessageDialog(this, "The Employees Salary Expense Payment was successfully processed");
//                //   JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//                //  }else{
//                //
//                //  JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//                //
//                //  }
//            //        break;
//
//            case "Pay Board Sitting Allowance":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Board Sitting Allowances Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Nssf":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Nssf Contribution Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Payee":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Payee Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Employees Allowancies":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Employees Allowances Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Rent":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Rent Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Taxes":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Taxes Expense Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//            break;
//            case "Pay Other Expenses":
//            if(processGeneralTransaction()){
//                initialiseSequenceNumberInTextField(jTFTrnSqNo);
//                JOptionPane.showMessageDialog(this, "The Other  Expenses Payment was successfully processed");
//                JOptionPane.showMessageDialog(rootPane, "Generated TrnSq:"+jTFTrnSqNo.getText());
//            }else{
//
//                JOptionPane.showMessageDialog(this, "Transaction processing Failed");
//
//            }
//
//            break;
//
//        }
//
//        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "disbursementCredited"+ ".txt"), fmt.formatAccountWithSeperators(this.getCrAccountNumber()));
//        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "customerDebited"+ ".txt"), fmt.formatAccountWithSeperators(this.getDrAccountNumber()));
//        fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "disbursementName"+ ".txt"), this.getCrAccountName());
//
//        PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
//        fo15.setVisible(true);
//        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
//        fo15.setSize(screen.getSize());
//        fo15.pack();
//        this.dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void openDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDayActionPerformed
        //if(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", "open.txt"))==70){
            //
            //JOptionPane.showMessageDialog(this, "Cash Reconcillation missing");
            //
            //}else{

            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "open_day.txt"),sdf.format(new Date(System.currentTimeMillis())));
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "trn_sequeanceNumber.txt"),"0001");

            PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
            fo15.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            fo15.setSize(screen.getSize());
            fo15.pack();
            this.dispose();
            //}
    }//GEN-LAST:event_openDayActionPerformed

    private void rejectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectButtonActionPerformed
        //if(fios.intFileReader(fios.createFileName("logOut", "completeShutDown", "open.txt"))==70){
            //
            //JOptionPane.showMessageDialog(this, "Cash Reconcillation missing");
            //
            //}else{
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "open_day.txt"),sdf.format(new Date((System.currentTimeMillis())-96400000)));
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "trn_sequeanceNumber.txt"),"0001");

            PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
            fo15.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            fo15.setSize(screen.getSize());
            fo15.pack();
            this.dispose();
            //}
    }//GEN-LAST:event_rejectButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();

    }//GEN-LAST:event_cancelButtonActionPerformed

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed

        valueDate1.setText(sdf.format(new Date(System.currentTimeMillis())));
        fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "valueDate.txt"),valueDate1.getText());
        fios.stringFileWriter(fios.createFileName("loanRepayment", "valueDate", "paymentDate.txt"),valueDate1.getText());

        if(debitAccountField.getValue() == null){JOptionPane.showMessageDialog(this, "PLEASE ENTER A DEBIT ACCOUNT NUMBER");return;}
        else if(amountFieldDebit1.getValue() == null){JOptionPane.showMessageDialog(this, "PLEASE ENTER A DEBIT AMOUNT");return;}
        else if(creditAccountField.getValue() == null){JOptionPane.showMessageDialog(this, "PLEASE ENTER A CREDIT ACCOUNT NUMBER");return;}
        else if(amountCredit.getValue() == null){JOptionPane.showMessageDialog(this, "PLEASE ENTER A CREDIT AMOUNT");return;}
        else if(jTextField3.getText().equalsIgnoreCase("")){JOptionPane.showMessageDialog(this, "PLEASE ENTER NARRATION 1");return;}
        else if(!(dbq.testTable("bsanca"+fmt.formatAccountWithSeperators(this.getDrAccountNumber())))){JOptionPane.showMessageDialog(this, "DEBIT ACCOUNT NOT ACTIVATED!!");return;}
        else if(!(dbq.testTable("bsanca"+fmt.formatAccountWithSeperators(this.getCrAccountNumber())))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");return;}

        if(amountFieldDebit1.getValue().toString().equals(amountCredit.getValue().toString())){

            if(debitAccountField.getValue().toString().equals(creditAccountField.getValue().toString())){

                debitAccountField.setBackground(Color.pink);
                creditAccountField.setBackground(Color.pink);
                JOptionPane.showMessageDialog(this, "DEBIT AND CREDIT ACCOUNTS ARE THE SAME");
                debitAccountField.setBackground(Color.WHITE);
                creditAccountField.setBackground(Color.WHITE);
                return;
            }

            debitPanel.setBackground(Color.ORANGE);
            creditingPanel.setBackground(Color.ORANGE);
            newButton.setEnabled(false);
            responseButton.setEnabled(false);
            reverseButton.setEnabled(false);
            viewButton.setEnabled(false);
            validateButton.setEnabled(false);
            saveButton.setEnabled(true);
            cancelButton.setEnabled(true);
            rejectButton.setEnabled(true);

        }else{ JOptionPane.showMessageDialog(this, "DEBIT AND CREDIT AMOUNTS ARE NOT THE SAME");return;}

        if(jComboTransactionType.getSelectedItem().toString().equalsIgnoreCase("LoanR")){

            JOptionPane.showMessageDialog(this, "Please select the order of Loan Repayment");
            saveButton.setEnabled(false);

            jPanel2.setVisible(false);

            debitPanel.setVisible(false);

            creditingPanel.setVisible(false);

            cashRecon.setVisible(false);

            jPanel4.setVisible(true);

        }else if(jComboTransactionType.getSelectedItem().toString().equalsIgnoreCase("LoanRD")){
            JOptionPane.showMessageDialog(this, "Please select the order of Loan Repayment");
            saveButton.setEnabled(false);

            jPanel2.setVisible(false);

            debitPanel.setVisible(false);

            creditingPanel.setVisible(false);

            cashRecon.setVisible(false);

            jPanel4.setVisible(true);

        }

    }//GEN-LAST:event_validateButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed

        newButton.setEnabled(false);
        responseButton.setEnabled(false);
        reverseButton.setEnabled(false);
        viewButton.setEnabled(false);
        validateButton.setEnabled(false);
        saveButton.setEnabled(false);
        cancelButton.setEnabled(true);
        rejectButton.setEnabled(false);
    }//GEN-LAST:event_viewButtonActionPerformed

    private void reverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseButtonActionPerformed
        newButton.setEnabled(false);
        responseButton.setEnabled(false);
        reverseButton.setEnabled(false);
        viewButton.setEnabled(false);
        validateButton.setEnabled(false);
        saveButton.setEnabled(false);
        cancelButton.setEnabled(true);
        rejectButton.setEnabled(false);
    }//GEN-LAST:event_reverseButtonActionPerformed

    private void responseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseButtonActionPerformed
        newButton.setEnabled(false);
        responseButton.setEnabled(false);
        reverseButton.setEnabled(false);
        viewButton.setEnabled(false);
        validateButton.setEnabled(false);
        saveButton.setEnabled(false);
        cancelButton.setEnabled(true);
        rejectButton.setEnabled(false);
        jButton9.setEnabled(true);
        jButton10.setEnabled(true);
    }//GEN-LAST:event_responseButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if(!dbq.nocashposted(userId)){
                fios.intFileWriterReplace(fios.createFileName("logOut", "completeShutDown", "open.txt"), "70");
            }
            JOptionPane.showMessageDialog(this, "SELECT THE TRANSACTION TYPE");
            jComboTransactionType.setEnabled(true);
        }

    }//GEN-LAST:event_newButtonActionPerformed
private void clearTheScreen(){
     jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
      jLabel54.setVisible(false);
jTextField25.setVisible(false); 
jComboBox27.setVisible(false);
jButton82.setVisible(true);
jButton82.setText("TXN TYPE");
jComboBox26.setSelectedItem("TXN CODE");
jComboBox26.setVisible(false);
jButton66.setVisible(false);
creditAccountField72.setValue(null);
creditAccountField72.setVisible(false);
jButton65.setVisible(false);
creditAccountField71.setValue(null);
creditAccountField71.setVisible(false);
jTextField60.setVisible(false);
jTextField60.setText("");
jLabel56.setVisible(false);
jLabel53.setVisible(false);
jTextField61.setText("");
jTextField61.setVisible(false);
//jLabel55.setVisible(false);
jTextField62.setVisible(false);
jTextField62 .setText("");
jButton67.setVisible(false);
amountCredit2.setValue(null);
amountCredit2 .setVisible(false);
 jLabel60.setVisible(false);
  jTextField67.setVisible(false);
         jTextField67 .setText("");
          jButton84.setVisible(false);  
        InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
}
    private void creditAccountField71ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditAccountField71ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditAccountField71ActionPerformed

    private void creditAccountField71KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_creditAccountField71KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditAccountField71KeyPressed

    private void creditAccountField72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditAccountField72ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditAccountField72ActionPerformed

    private void creditAccountField72KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_creditAccountField72KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditAccountField72KeyPressed
    private void jButton77ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton77ActionPerformed
     
        if(!jTextField25.getText().equalsIgnoreCase("")){
        
        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "payPeriod"+this.userId+".txt"), jTextField25.getText());
        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "hasPeriodBeenSet"+this.userId+".txt"), "YES");
        }else if(!jTextField61.getText().equalsIgnoreCase("")){
          fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "payPeriod"+this.userId+".txt"), jTextField61.getText());
        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "hasPeriodBeenSet"+this.userId+".txt"), "NO");
        } else{
        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "payPeriod"+this.userId+".txt"), "30");
        fios.stringFileWriter(fios.createFileName("postingEntry", "generalTrn", "hasPeriodBeenSet"+this.userId+".txt"), "NO"); 
        
        }
        
int counter=modelxxxxx.getRowCount();
        
        switch(jButton82.getText()){
            
            
            
             case "RecoverWrittenOffCash":
            
            
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan recovered Amount!!");
            return;
            }else{
         if(counter==0){
         counter+=1;
         }
         
         if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
         
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03318000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recover Written Off Loans");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                loanPytDetails.add(loansOfficer.split(":")[1]);
                if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
                
               double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
 
              if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
//              JOptionPane.showMessageDialog(this, creditAccountField72.getValue().toString());
           ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
              
           modelxxxxx.addRow(loanPytDetails);
           
         clearTheScreen();  
       
            
       
       }  } }}
        break;
        
        case "RecoverWrittenOffBank":
            
        
             

            
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
 
//         if(!jTextField23.getText().equalsIgnoreCase("")){
//              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment.txt"),  jTextField23.getText());       
//          }     
       if(counter==0){
       counter+=1;
       }
                 if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03318000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                loanPytDetails.add(loansOfficer.split(":")[1]);
                   if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                }
                    double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         
         clearTheScreen();   
       
         
       
       }  
       
       
       } 
            
            }
            
            }
        break;
        
 
         case "RecoverWrittenOffSavings":
 
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
//   if(!jTextField23.getText().equalsIgnoreCase("")){
//              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment.txt"),  jTextField23.getText());       
//          } 
           if(counter==0){
           counter+=1;
           
           }
               if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(modelxxxxx.getRowCount());
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03318000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                loanPytDetails.add(loansOfficer.split(":")[1]);
                       if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                }
                       
                       
                       double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   }  } }}
        break;
            
            
            
            
            
            
     
            
            
            
        case "LoanPyt":
            
        
            
            
            
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
           if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
 
         if(counter==0){
         counter+=1;
         }
                 if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
//                 JOptionPane.showMessageDialog(this, loansOfficer.split(":")[1]);
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01128000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
                loanPytDetails.add(jTextField23.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
               double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
 
              if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
//              JOptionPane.showMessageDialog(this, creditAccountField72.getValue().toString());
           ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
              
           modelxxxxx.addRow(loanPytDetails);
           
         clearTheScreen();  
       
       
       
       
       } 
       
       }  } }}
        break;
        
        case "LoanPytBank":
            

            
            
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
 
if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
 
         if(counter==0){
         counter+=1;
         }    
       if(counter==0){
       counter+=1;
       }
                   if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
              
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01128000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
                    loanPytDetails.add(jTextField23.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
                    double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         
         clearTheScreen();   
       
       }
       
       }  
       
       
       } 
            
            }
            
            }
        break;
        
                
                
        case "LoanPytUnknownMobileMoney":
            

            
            
           if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
           if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
 
         if(counter==0){
         counter+=1;
         }
                 if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
//                 JOptionPane.showMessageDialog(this, loansOfficer.split(":")[1]);
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("05500000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment with Unknown Mobile Money");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
                loanPytDetails.add(jTextField23.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
               double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
 
              if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
//              JOptionPane.showMessageDialog(this, creditAccountField72.getValue().toString());
           ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
              
           modelxxxxx.addRow(loanPytDetails);
           
         clearTheScreen();  
       
       
       
       
       } 
       
       }  } }}
        break;
        
        case "LoanPytMobileMoney":
            

            
            
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
 
if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
 
         if(counter==0){
         counter+=1;
         }    
       if(counter==0){
       counter+=1;
       }
                   if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
              
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
                    loanPytDetails.add(jTextField23.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
                    double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
           modelxxxxx.addRow(loanPytDetails);
//           
//           if(counter==0){
//         counter=counter+1;  
//         List bankDetails= new ArrayList();
//         bankDetails.add(counter);
//       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
//       dbq.createTheDBItemBankAccount(bankDetails);  
//           
//           
//           }else{
//        List bankDetails= new ArrayList();
//        bankDetails.add(counter);
//        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
//        dbq.createTheDBItemBankAccount(bankDetails);
//           }
//         
         clearTheScreen();   
       
       }
       
       }  
       
       
       } 
            
            }
            
            }
        break;
        
         case "LoanPytSavings":
                     
                   
            
 
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
           if(counter==0){
           counter+=1;
           
           }
                      if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(modelxxxxx.getRowCount());
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01128000110");
         loanPytDetails.add("Loan Payment For "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
                  loanPytDetails.add(jTextField23.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                       if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                }
                       
                       
                       double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();  
       
       
       }}  } }}
        break;
        
         case "LoanPytDepositPartPay":
 
                
            if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
            if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Code!!");
            return;
            }else{
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Payment Amount!!");
            return;
            }else{
 
if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
           if(counter==0){
           counter+=1;
           }
                       if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01128000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
                   loanPytDetails.add(jTextField23.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                }
              double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();  
       
       
       }}  } }}
        break;
        
        case "General":
   
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Debit Account!!");
            return;
            }else{
           
          if(creditAccountField71.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Credit Account!!");
            return;
            }else{
          if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put transaction Amount!!");
            return;
            }else{
          String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+" "+"Dated"+sdf.format(new Date(System.currentTimeMillis()));
          
          }else{
          
        narration= jTextField67.getText();
          }
           if(counter==0){
           
           counter+=1;
           }   
                 if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        
        if(!jCheckBox39PostAnAdjustment.isSelected()){
            
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField71.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                loanPytDetails.add(loansOfficer.split(":")[1]);
                     if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
         clearTheScreen();   

            
        }else if(jCheckBox39PostAnAdjustment.isSelected()){
            if(!jTextField62.getText().isEmpty()){
            if(!fmt.convertTdate(jTextField62.getText().trim()).before(fmt.getTodayDate())){
            
            
            JOptionPane.showMessageDialog(this, "Please select an earlier date for adjustment!!");
            
            return;
            }else{
         loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField71.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("3"); 
              loanPytDetails.add("0");
               loanPytDetails.add(jTextField62.getText());
                  loanPytDetails.add(loansOfficer.split(":")[1]);
               
                   if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
         clearTheScreen();   

              
               
        
            }
            }else{
            
        JOptionPane.showMessageDialog(this, "Please first input the adjustment date!!");       
            }
        
        }
             
               
               
          }}   } }
        break;
        
        case "Expense":
             
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the expense Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put expense Amount!!");
            return;
            }else{
           
           String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Expense Payment";
          
          }else{
          
        narration= jTextField67.getText();
          }
          
          if(counter==0){
          
          counter+=1;
          }
          
              if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
              
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                 loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   } } }
        break;
        
        case "ExpenseBank":
              
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the expense Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put expense Amount!!");
            return;
            }else{
           
           String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Expense Payment";
          
          }else{
          
        narration= jTextField67.getText();
          }
          
          if(counter==0){
          counter+=1;
          }
               if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
             loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   } } }
        break;
                
        case "accumDepreciation":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Asset Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Depreciation expense Amount!!");
            return;
            }else{
           
           String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Accumulated Depreciation";
          
          }else{
      
        narration= jTextField67.getText();
          }
          
          if(counter==0){
          
          counter+=1;
          }
        if(dbq.testTable("bsanca02239000110")){     
          
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(dbq.provisionForDepreciationExpenseAccount());
         loanPytDetails.add(dbq.currentAccumulatedDepLedger(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
             loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                  loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
                if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
       
//       JOptionPane.showMessageDialog(this, bankDetails.get(0)+""+bankDetails.get(1));
       
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
//         JOptionPane.showMessageDialog(this, bankDetails.get(0)+""+bankDetails.get(1));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
           fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt"), fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         clearTheScreen(); 
        
        }else{
        
        
        JOptionPane.showMessageDialog(this, "Please frist create the provision for depreciation expense ledger!!!!");
        }
        } } }
        break;
        
        
        case "SalaryBank":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Employee's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Salary Amount!!");
            return;
            }else{
           
           String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Salary Payment";
          
          }else{
          
        narration= jTextField67.getText();
          }
//          int counter=modelxxxxx.getRowCount();
          if(counter==0){
          counter+=1;
          }
         List salaryPytDetails=new ArrayList();    
        salaryPytDetails.add(counter);
        salaryPytDetails.add(jButton82.getText());    
         salaryPytDetails.add(jComboBox26.getSelectedItem().toString());
         salaryPytDetails.add("02253000110");
         salaryPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         salaryPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Salary payment");
            salaryPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            salaryPytDetails.add("0"); 
              salaryPytDetails.add("0");
               salaryPytDetails.add("0");
                 salaryPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(salaryPytDetails);
         
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         
         clearTheScreen(); 
       
       
       
       
       } } }
        break;
        
        
        case "NewLoan":
        jComboBox26.setVisible(false);
        
      
      
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the loan Disbursement Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan Disbursement Amount!!");
            return;
            }else{
      if(jTextField60.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest Rate!!");
            return;
            }else{
        if(jTextField61.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Tenure!!");
            return;
            }else{
        if(jTextField62.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Instalment Start Date!!");
            return;
            }else{
            
       if(loan.loanExists(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
            
            JOptionPane.showMessageDialog(this, dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"already has a loan on this Account Number\nPleas open a subledger to create another loan");
            return;
            }else{
           
           if(!ancdb.testTable("BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
           
           JOptionPane.showMessageDialog(this,"The Borrower's account number does not exist!!!");
           
           return;
           
           }else{
           if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
                String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"loan disbursement";
          
          }else{
          
        narration= jTextField67.getText();
          }
    if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
              
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01128000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add(jTextField60.getText()); 
              loanPytDetails.add(jTextField61.getText());
               loanPytDetails.add(jTextField62.getText());
                  loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField62.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField62.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(dbq.getFeesStatusProcessing()){
//                    JOptionPane.showMessageDialog(this, counterx);
               if(counter==0){
         counter=counter+1;  
           
           } 
               
          List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LProcessFees");    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03315000110");
         loanPytDetails1.add("Loan processing fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(NumberFormat.format(parseDouble(this.loanFeesProcessing(amountCredit2.getValue().toString())))); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                   loanPytDetails1.add(userId);
//                  JOptionPane.showMessageDialog(this, counterx+1);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  

           }
           
            if(dbq.getFeesStatusInsurance()){
//                    JOptionPane.showMessageDialog(this, counterx);
               if(counter==0){
         counter=counter+1;  
           
           } 
               
          List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LInsuranceFees");    
         loanPytDetails1.add("Insurance");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("05524000110");
         loanPytDetails1.add("Loan Insurance fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(NumberFormat.format(parseDouble(this.loanFeesInsurance(amountCredit2.getValue().toString())))); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
               loanPytDetails1.add(userId);
//                  JOptionPane.showMessageDialog(this, counterx+1);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  

           }
         clearTheScreen();  
         
           }
           
           }
           
           
           
        
        }
 
       
       }
 
       
       }
 
       
       }
 
       
       
       
       }
       
       
       }  
        
        
        }
          break;
            
            case "NewLoanFixed":
        jComboBox26.setVisible(false);
      
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the loan Disbursement Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan Disbursement Amount!!");
            return;
            }else{
      if(amountCredit3.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the Interest Amount!!");
            return;
            }else{
        
        if(jTextField62.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Instalment Start Date!!");
            return;
            }else{
            
       if(loan.loanExists(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
            
            JOptionPane.showMessageDialog(this, dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"already has a loan on this Account Number\nPlease open a subledger to create another loan");
            return;
            }else{
           
           if(!ancdb.testTable("BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
           
           JOptionPane.showMessageDialog(this,"The Borrower's account number does not exist!!!");
           
           return;
           
           }else{
           if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
                String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"loan disbursement";
          
          }else{
          
        narration= jTextField67.getText();
          }
   if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01128000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit3.getValue().toString())); 
              loanPytDetails.add(jTextField61.getText());
               loanPytDetails.add(jTextField62.getText());
                      loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField62.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField62.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(dbq.getFeesStatusProcessing()){
//                    JOptionPane.showMessageDialog(this, counterx);
               if(counter==0){
         counter=counter+1;  
           
           } 
               
          List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LProcessFees");    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03315000110");
         loanPytDetails1.add("Loan processing fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(NumberFormat.format(parseDouble(this.loanFeesProcessing(amountCredit2.getValue().toString())))); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
//                  JOptionPane.showMessageDialog(this, counterx+1);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  

           }
           
           
           if(dbq.getFeesStatusInsurance()){
//                    JOptionPane.showMessageDialog(this, counterx);
               if(counter==0){
         counter=counter+1;  
           
           } 
               
          List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LInsuranceFees");    
         loanPytDetails1.add("Insurance");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("05524000110");
         loanPytDetails1.add("Loan Insurance fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(NumberFormat.format(parseDouble(this.loanFeesInsurance(amountCredit2.getValue().toString())))); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
//                  JOptionPane.showMessageDialog(this, counterx+1);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  

           }
           
           
           
         clearTheScreen();  
         
         
           
           } } }  }   } } }  }
          break;
            
            
      case "NewLoanBank":
      
 
          jComboBox26.setVisible(false);
           if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the loan Disbursement Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan Disbursement Amount!!");
            return;
            }else{
      if(jTextField60.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest Rate!!");
            return;
            }else{
        if(jTextField61.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Loan Tenure!!");
            return;
            }else{
        if(jTextField62.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(this, "Please Put Instalment Start Date!!");
            return;
            }else{
            
       if(loan.loanExists(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
            
            JOptionPane.showMessageDialog(this, dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"already has a loan on this Account Number\nPleas open a subledger to create another loan");
            return;
            }else{
           
               if(!ancdb.testTable("BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
           
           JOptionPane.showMessageDialog(this,"The Borrower's account number does not exist!!!");
           
           return;
           
           }else{
           if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
            
            JOptionPane.showMessageDialog(this, "First Select the Portfolio Owner");
            return;
            }else{
           
           
             String narration="";
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"loan disbursement";
          
          }else{
          
        narration= jTextField67.getText();
          }
          
          
            if(counter==0){
            counter+=1;
            } 
                 
    if(loansOfficer.equalsIgnoreCase("Select Portfolio Owner")){
         loansOfficer=loansOfficer.concat(":").concat(userId);
         }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01128000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add(jTextField60.getText()); 
              loanPytDetails.add(jTextField61.getText());
               loanPytDetails.add(jTextField62.getText());
                     loanPytDetails.add(loansOfficer.split(":")[1]);
                  if(!jTextField62.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField62.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
          
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
//      JOptionPane.showMessageDialog(this, " if(counter==0){=="+""+counter);
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
//         JOptionPane.showMessageDialog(this, " }else{=="+""+counter);          
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
           if(dbq.getFeesStatusProcessing()){
//               JOptionPane.showMessageDialog(this, counter);
                 counter=counter+1; 
               
              
          List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LProcessFeesBank");    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03315000110");
         loanPytDetails1.add("Loan processing fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(NumberFormat.format(parseDouble(this.loanFeesProcessing(amountCredit2.getValue().toString())))); 
             loanPytDetails1.add(jTextField60.getText()); 
              loanPytDetails1.add(jTextField61.getText());
               loanPytDetails1.add(jTextField62.getText());
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
           
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  jTextField23.getText());       
          }else{
//                 JOptionPane.showMessageDialog(this, counter);  
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
  if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           }
           
           
            if(dbq.getFeesStatusInsurance()){
//               JOptionPane.showMessageDialog(this, counter);
                 counter=counter+1; 
               
              
          List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LInsuranceFeesBank");    
         loanPytDetails1.add("Insurance");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("05524000110");
         loanPytDetails1.add("Loan Insurance fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(NumberFormat.format(parseDouble(this.loanFeesInsurance(amountCredit2.getValue().toString())))); 
             loanPytDetails1.add(jTextField60.getText()); 
              loanPytDetails1.add(jTextField61.getText());
               loanPytDetails1.add(jTextField62.getText());
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
           
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  jTextField23.getText());       
          }else{
//                 JOptionPane.showMessageDialog(this, counter);  
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+(counter)+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
  if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           }
               } } 
         clearTheScreen();  
         
        }
        }
 
       
       }
 
       
       }
 
       
       }
 
       
       
       
       }
       
       
         } 
        
//        }else{
//      JOptionPane.showMessageDialog(this, "The Borrower's account does not exist!!");
//       
//       
//       }
        break;
      
  case "LProcessFees":
//      JOptionPane.showMessageDialog(this, "Joos");
if(ancdb.testTable("BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan processing Fees";
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==1){
           counter+=1;
           
           }
//               JOptionPane.showMessageDialog(this, "Joosa1");
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LProcessFees");    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03315000110");
         loanPytDetails1.add("Loan processing fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
//                    JOptionPane.showMessageDialog(this, "Joos2");
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
}else{
JOptionPane.showMessageDialog(this, "BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())+"    does not exist");

}
        break;   
        
          case "LInsuranceFees":
//      JOptionPane.showMessageDialog(this, "Joos");
if(ancdb.testTable("BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))){
        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Insurance Fees";
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==1){
           counter+=1;
           
           }
//               JOptionPane.showMessageDialog(this, "Joosa1");
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LInsuranceFees");    
         loanPytDetails1.add("Insurance");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("05524000110");
         loanPytDetails1.add("Loan Insurance fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
//                    JOptionPane.showMessageDialog(this, "Joos2");
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
}else{
JOptionPane.showMessageDialog(this, "BSANCA"+fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())+"    does not exist");

}
        break;
        
        
                 case "MembershipFeesSavings":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Membership Fees";
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03309000110");
         loanPytDetails1.add("Membership Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;
        
        
        case "LedgerFeesSavings":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Ledger Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("LedgerFees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03304000110");
      loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;
        
                case "AdminCostsSavings":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Ledger Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("AdminCostsSavings");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03307000110");
      loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;
        
        case "FinesAndChargesSavings":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Ledger Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("LedgerFees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03308000110");
      loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;
        
                
                 case "FinesAndCharges":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Fines And Charges from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }    
          
          if(counter==0){
          counter+=1;
          
          }
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03308000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
            
        
        
        case "AnnualSubscriptionFees":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Annual Subscription Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }    
          
          if(counter==0){
          counter+=1;
          
          }
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03316000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        
        
        
         case "MembershipFees":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Membership Fees";
          
          }else{
          
        narration= jTextField67.getText();
          }    
          
          if(counter==0){
          counter+=1;
          
          }
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03309000110");
         loanPytDetails1.add("Membership Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        
        case "LedgerFees":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Ledger Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }    
          
          if(counter==0){
          counter+=1;
          
          }
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("LedgerFees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03304000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        
        
        case "AdminCosts":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Administration Costs from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }    
          
          if(counter==0){
          counter+=1;
          
          }
           
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03307000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;  
        
        
        
        
        
        case "MembershipFeesBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Membership Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           
        List loanPytDetails1=new ArrayList();   
          if(counter==0){
          
          counter+=1;
          }
          
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03309000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;  
        
        case "AnnualSubsFeesBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Annual Subscription Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           
        List loanPytDetails1=new ArrayList();   
          if(counter==0){
          
          counter+=1;
          }
          
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03316000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        
         case "FinesAndChargesBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Fines And Charges from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           
        List loanPytDetails1=new ArrayList();   
          if(counter==0){
          
          counter+=1;
          }
          
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03308000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        case "AdminCostsBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Admin Costs from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           
        List loanPytDetails1=new ArrayList();   
          if(counter==0){
          
          counter+=1;
          }
          
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03307000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        case "LedgerFeesBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the loan processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration="Ledger Fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
          
          }else{
          
        narration= jTextField67.getText();
          }     
           
        List loanPytDetails1=new ArrayList();   
          if(counter==0){
          
          counter+=1;
          }
        loanPytDetails1.add(counter);
        loanPytDetails1.add(jButton82.getText());    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03304000110");
         loanPytDetails1.add(narration);
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;  
        
        
        case "LProcessFeesBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Processing Fees";
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
        loanPytDetails1.add("LProcessFeesBank");    
         loanPytDetails1.add("Fees");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("03315000110");
         loanPytDetails1.add("Loan processing fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
           
           
           
           
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break;   
        
        case "LInsuranceFeesBank":

        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Borrower's account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put the processing Fees!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Loan Processing Fees";
          
          }else{
          
        narration= jTextField67.getText();
          }     
           if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails1=new ArrayList();    
        loanPytDetails1.add(counter);
       loanPytDetails1.add("LInsuranceFeesBank");    
         loanPytDetails1.add("Insurance");
         loanPytDetails1.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails1.add("05524000110");
         loanPytDetails1.add("Loan Insurance fees from"+" "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails1.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
               loanPytDetails1.add("0"); 
              loanPytDetails1.add("0");
               loanPytDetails1.add("0");
                      loanPytDetails1.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails1);  
           
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
           
           
           
           
         clearTheScreen();  } }} 
//         jComboBox27.removeActionListener(this);
//       jComboBox27.removeAllItems();
         jButton82.setText("TXN TYPE");
//          jComboBox27.setSelectedIndex(0); 
       
        break; 
        
        
        case "Withdrawal":
        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Bank Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan Withdraw Amount!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Bank withdrawal";
          
          }else{
          
        narration= jTextField67.getText();
          }     
             if(counter==0){
          
          counter+=1;
          }
           
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01123000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                      loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();  } }}
        break;
       
        case "Deposit":
        jComboBox26.setVisible(false);
        
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Bank Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Deposit Amount!!");
            return;
            }else{
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Bank Deposit";
          
          }else{
          
        narration= jTextField67.getText();
          }      
//         JOptionPane.showMessageDialog(this, counter);
           if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
              loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                      loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
//                  JOptionPane.showMessageDialog(this, counter);
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   } } }
        break;
        
        
        
        
        
         case "MobileMoneyDeposit":
        jComboBox26.setVisible(false);
        
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Mobile Money Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Deposit Amount!!");
            return;
            }else{
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Mobile Money Deposit";
          
          }else{
          
        narration= jTextField67.getText();
          }      
//         JOptionPane.showMessageDialog(this, counter);
           if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
              loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                      loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
//                  JOptionPane.showMessageDialog(this, counter);
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   } } }
        break;
        
        
        
        case "MobileMoneyWithdraw":
        jComboBox26.setVisible(false);
        
          if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Momo Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Mobile money Amount!!");
            return;
            }else{
           
          String narration="";
          
          if(jTextField67.getText().equalsIgnoreCase("")){
          narration=dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Mobile Money withdrawal";
          
          }else{
          
        narration= jTextField67.getText();
          }     
             if(counter==0){
          
          counter+=1;
          }
           
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01123000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(narration);
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                      loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();  } }}
        break;
        
        
        
        
        case "Payable":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Payable beneficiary Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put payable  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01123000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Accounts Payable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
        break;
        
        
                  case "ReceivableBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Payable beneficiary Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put payable  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Account Receivable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen(); } } }
        break;
        
         case "PayableBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Payable beneficiary Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put payable  Amount!!");
            return;
            }else{
            if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Accounts Payable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen(); } } }
        break;
        
        case "ClearReceivableBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Recievable's beneficiary Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put Recievable  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Accounts Recievable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen(); } } }
        break;
        
        case "HEFROI":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Member's account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put ROI  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("02277000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Return On Investment for the period ending  "+sdf.format(new Date(System.currentTimeMillis())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
        break;
        
            case "ClearPayable":
                if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Payable beneficiary Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put payable  Amount!!");
            return;
            }else{
           
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Clearing the Accounts Payable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
                
                
                
                break;
                
                 case "Prepayments":
                if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the prepaid Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put prepaid  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Accrueing prepaid amounts");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
                
                
                
                break;
             
                 
                 case "PrepaymentsBank":
                if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the prepaid Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put prepaid  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Accrueing prepaid amounts");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
                
                
                
                break;
                
       case "SavingPenalties":
                if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Savings  Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put Savings Penalty  Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03324000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Savings Penalties");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
                
                
                
                break;          
                
                
                
                
       case "ClearPayableBank":
            
                if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Payable beneficiary Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
        
            JOptionPane.showMessageDialog(this, "Please Put payable  Amount!!");
            return;
            }else{
          if(counter==0){
          
          counter+=1;
          }  
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Clearing the Accounts Payable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
           
           
         clearTheScreen(); } } }
                
                
                
                break;
        case "Receivable":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Account Receivable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
        break;
        
        
         case "Drawing":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Drawing beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Drawing Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("04408000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Drawing");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen(); } } }
        break;
        case "DrawingBank":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Drawing beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Drawing Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
             
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("04408000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Drawing");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen(); } } }
        break;
        
     case "ClearReceivable":
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
                if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01123000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Clearing the Account Receivable");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();    } }  }
         
         
         break;
        
        case "Salary":
        jComboBox26.setVisible(false);
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
                if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("02253000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Salary payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
          
        
       case "DepositPartPay":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
                  if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01123000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Deposit for Part payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
        case "DepositPartPayBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the  beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Deposit Amount!!");
            return;
            }else{
              if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Deposit for Part payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
        
        
        
        case "WithdrawDepositPartPay":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
              if(counter==0){
          
          counter+=1;
          }
           
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Withdraw Part Payment Deposited");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;  
        case "WithdrawDepositPartPayBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
               if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Withdraw Part Payment Deposited");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;  
        
 case "Savings":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Receivable beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
               if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("01123000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Savings");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
        case "SavingsBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Savings beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Savings Amount!!");
            return;
            }else{
           if(counter==0){
           counter+=1;
           }
           
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Savings");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
   
        case "SavingsTransfer":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Savings beneficiary!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Receivable Amount!!");
            return;
            }else{
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add("Transfer Savings from"+"  "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+" To  "+dbq.AccountName(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt"))));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;

        case "WithdrawSavings":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the customer!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Savings Amount!!");
            return;
            }else{
           if(counter==0){
           counter+=1;
           
           }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("01123000110");
         loanPytDetails.add("Withdraw Savings From "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
       case "WithdrawSavingsBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the customer's ledger!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Savings Amount!!");
            return;
            }else{
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
         loanPytDetails.add("Withdraw Savings From "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
            loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;  
        
 case "Capitalisation":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            

       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Captal account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put captal Amount!!");
            return;
            }else{
           if(counter==0){
           counter+=1;
           }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("04400000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Shares Contribution");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
  case "CapitalisationBank1":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            

       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Captal account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put captal Amount!!");
            return;
            }else{
            if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("04400000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Shares Contribution");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
              if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;      
        
        
        
        
        
case "CapitalisationSavings":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            

       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Captal account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put captal Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("04400000110");
         loanPytDetails.add("Shares Contribution From"+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;

        case "CapitalisationBank":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            

       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Captal account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put captal Amount!!");
            return;
            }else{
         if(counter==0){
          
          counter+=1;
          }  
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("04400000110");
         loanPytDetails.add("Shares Contribution From "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           
              if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;




 case "Decaptalisation":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            

       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Captal account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put captal Amount!!");
            return;
            }else{
              if(counter==0){
          
          counter+=1;
          } 
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("04400000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("Decaptalisation of Shares From"+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;
        
        


case "DecaptalisationSavings":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            

       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Captal account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put captal Amount!!");
            return;
            }else{
               if(counter==0){
          
          counter+=1;
          } 
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("04400000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("Decaptalisation of Shares "+dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
           
           
           
            }
           
            }
 
            }
        break;



 case "RecoverInterest":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put interest Amount!!");
            return;
            }else{
              if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03301000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered loan Interest");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
                  if(loan.loanExists(creditAccountField72.getValue().toString())){
            double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        
        break;

     
     
 case "RecoverInterestDepositPartPay":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put interest Amount!!");
            return;
            }else{
              if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03301000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered loan Interest");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
               if(loan.loanExists(creditAccountField72.getValue().toString())){
           double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  }    
                  
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        
        break;
     
     case "RecoverAccumulatedInterestDepositPartPay":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put interest Amount!!");
            return;
            }else{
              if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03311000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered Accumulated Interest");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
            if(loan.loanExists(creditAccountField72.getValue().toString())){
          double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  }       
                  
                  
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        
        break;
     
     
        case "RecoverInterestBank":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put interest Amount!!");
            return;
            }else{
                 if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03301000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered loan Interest");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                }
              if(loan.loanExists(creditAccountField72.getValue().toString())){
          double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  }     
                  
           modelxxxxx.addRow(loanPytDetails);
          if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();    
            }
           
            }
            }
        
        break;
        
        case "WriteOffInterestDepositPartPay":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
                  if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03301000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        case "WriteOffAccumulatedInterestDepositPartPay":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
                      if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03311000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        case "WriteOffAccumulatedInterestSavings":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
         if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03311000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
         case "WriteOffInterestSavings":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
           if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03301000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
         case "WriteOffPenaltySavings":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
           if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03312000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        case "WriteOffInterest":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03301000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        
   case "WriteOffInterestBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
        List loanPytDetails=new ArrayList();  
          if(counter==0){
          
          counter+=1;
          }
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03301000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
         clearTheScreen();   
            }
           
            }
            }
        break;     
        
         case "WriteOffProcessingFees":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03315000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off processing Fees");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
      
   case "WriteOffProcessingFeesBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Interest written off Amount!!");
            return;
            }else{
        List loanPytDetails=new ArrayList();  
          if(counter==0){
          
          counter+=1;
          }
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03315000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Processing Fees ");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
           if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
         clearTheScreen();   
            }
           
            }
            }
        break;     
        
        
 case "RecoverPenalty":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the loan penalty!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan penalty Amount!!");
            return;
            }else{
        List loanPytDetails=new ArrayList(); 
         if(counter==0){
          
          counter+=1;
          }
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03312000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered loan penalty Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
             if(loan.loanExists(creditAccountField72.getValue().toString())){
          double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  }      
                  
           modelxxxxx.addRow(loanPytDetails);
           
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        
        case "RecoverPenaltyBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the loan penalty!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan penalty Amount!!");
            return;
            }else{
        List loanPytDetails=new ArrayList();    
         if(counter==0){
          
          counter+=1;
          }
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03312000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered loan penalty Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
                  
              if(loan.loanExists(creditAccountField72.getValue().toString())){
           double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  } 
                  
           modelxxxxx.addRow(loanPytDetails);
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        
        
         case "WriteOffPenalty":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the loan penaltyt!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan penalty written off Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();  
         
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03312000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Loan Penalty Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
               
               
           modelxxxxx.addRow(loanPytDetails);
           
           
           
            
           
         clearTheScreen();   
            }
           
            }
            }
        break;
        
         case "WriteOffPenaltyBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the loan penaltyt!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put loan penalty written off Amount!!");
            return;
            }else{
             if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList(); 
//         int counter=modelxxxxx.getRowCount()+1;
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03312000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off Loan Penalty Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
         clearTheScreen();   
            }
           
            }
            }
        break;
        
 case "RecoverAccumulatedInterest":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the accumulated Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put accumulated Interest recovered Amount!!");
            return;
            }else{
               if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03311000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered accumulated Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
             if(loan.loanExists(creditAccountField72.getValue().toString())){
            double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  }      
                  
                  
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
        
        
        
        
        
                
                case "RecoverAccumulatedInterestBank":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the accumulated Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put accumulated Interest recovered Amount!!");
            return;
            }else{
                 if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList(); 
//          int counter=modelxxxxx.getRowCount()+1;
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03311000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Recovered accumulated Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
                  
         if(loan.loanExists(creditAccountField72.getValue().toString())){
           double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString())));
   
                      if(parseDouble(amountCredit2.getValue().toString())>=remainingInstalments){  
              
               ClosingNotes f = new  ClosingNotes(userId,creditAccountField72.getValue().toString());
            f.setVisible(true);
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            f.setSize(screen.getSize());
            f.pack();
              
              
              
              }       
                  }          
           modelxxxxx.addRow(loanPytDetails);
           
            
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
         clearTheScreen();   
            }
           
            }
            }
        break;
        
         case "WriteOffAccumulatedInterest":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the accumulated Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put accumulated Interest written off Amount!!");
            return;
            }else{
                  if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03311000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off accumulated Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
        
         
         case "WriteOffAccumulatedInterestBank":
        jComboBox26.setVisible(false);
         if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the account for the accumulated Interest!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put accumulated Interest written off Amount!!");
            return;
            }else{
                 if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();   
//          int counter=modelxxxxx.getRowCount()+1;
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add("03311000110");
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Write off accumulated Interest Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
           
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
         clearTheScreen();   
            }
           
            }
            }
        break;
        
 case "BadLoansRecovered":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Bad loans recovered Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Bad loans recovered Amount!!");
            return;
            }else{
                   if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList();    
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03318000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Bad loan Recovered Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
         clearTheScreen();   
            }
           
            }
            }
        break;
case "BadLoansRecoveredBank":
        jComboBox26.setVisible(false);
        if(jButton82.getText().equalsIgnoreCase("TXN TYPE")){
            
            JOptionPane.showMessageDialog(this, "Please Select the Transaction Type!!");
            return;
            }else{
            
         
       if(creditAccountField72.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Select the Bad loans recovered Account!!");
            return;
            }else{
       if(amountCredit2.getValue()==null){
            
            JOptionPane.showMessageDialog(this, "Please Put Bad loans recovered Amount!!");
            return;
            }else{
                    if(counter==0){
          
          counter+=1;
          }
        List loanPytDetails=new ArrayList(); 
//         int counter=modelxxxxx.getRowCount()+1;
        loanPytDetails.add(counter);
        loanPytDetails.add(jButton82.getText());    
         loanPytDetails.add(jComboBox26.getSelectedItem().toString());
         loanPytDetails.add(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         loanPytDetails.add("03318000110");
         loanPytDetails.add(dbq.AccountName(fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()))+"'s "+"Bad loan Recovered Payment");
            loanPytDetails.add(fmt.formatForStatementNumbers(amountCredit2.getValue().toString())); 
             loanPytDetails.add("0"); 
              loanPytDetails.add("0");
               loanPytDetails.add("0");
                   loanPytDetails.add(userId);
                  if(!jTextField23.getText().equalsIgnoreCase("")){
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  jTextField23.getText());       
          }else{
                
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+counter+".txt"),  sdf.format(new Date(System.currentTimeMillis())));       
                } 
           modelxxxxx.addRow(loanPytDetails);
            if(counter==0){
         counter=counter+1;  
         List bankDetails= new ArrayList();
         bankDetails.add(counter);
       bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
       dbq.createTheDBItemBankAccount(bankDetails);  
           
           
           }else{
        List bankDetails= new ArrayList();
        bankDetails.add(counter);
        bankDetails.add(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt")));
        dbq.createTheDBItemBankAccount(bankDetails);
           }
           
           
         clearTheScreen();   
            }
           
            }
            }
        break;
 
   }
    }//GEN-LAST:event_jButton77ActionPerformed
private String loanFeesProcessing(String LoanAmount){
    
    String fess="";
    switch(dbq.getTheStatusRateAmountUsedProcessing()){
        case "Rate":
fess= ((parseDouble(dbq.getTheLoanPercentProcessing())/100)*parseDouble(LoanAmount))+"";
break;
        case "Amount":
            
      fess= dbq.getTheLoanPercentProcessing();      
            break;
    }
    return fess;
}

private String loanFeesInsurance(String LoanAmount){
String fess="";
    switch(dbq.getTheStatusRateAmountUsedInsurance()){
        case "Rate":
fess= ((parseDouble(dbq.getTheLoanPercentInsurance())/100)*parseDouble(LoanAmount))+"";
break;
        case "Amount":
            
      fess= dbq.getTheLoanPercentInsurance();      
            break;
    }
    return fess;
}


    private void jButton66ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton66ActionPerformed

        
        switch(jButton82.getText()){
              
          
            
              case "RecoverWrittenOffCash":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"200");  
        updateTable7("RecoverWrittenOffCash");
          }
        break;
        
         case "RecoverWrittenOffBank":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"201");  
        updateTable7("RecoverWrittenOffCash");
          }
        break;
            
               
          case "RecoverWrittenOffSavings":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"202");  
        updateTable7("RecoverWrittenOffCash");
          }
        break;
            
                  
                   
            
            
        case "LoanPyt":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"30");  
        updateTable7("LoanPyt");
          }
        break;
        
         case "LoanPytBank":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"60");  
        updateTable7("LoanPyt");
          }
        break;
        
        
            case "LoanPytMobileMoney":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"205");  
        updateTable7("LoanPyt");
          }
        break;
        
            case "LoanPytUnknownMobileMoney":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"206");  
        updateTable7("LoanPyt");
          }
        break;
        
        
           
          case "LoanPytSavings":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"58");  
        updateTable7("LoanPytSavings");
          }
        break;
        
         case "LoanPytDepositPartPay":
          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
          return;
          }else{
        jPanel20.setVisible(false);
        
        jPanel21.setVisible(true);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"57");  
        updateTable7("LoanPytDepositPartPay");
          }
        break;
        
//        case "WithdrawDepositPartPayBank":
//          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
//          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
//          return;
//          }else{
//        jPanel20.setVisible(false);
//        
//        jPanel21.setVisible(true);
//         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"57");  
//        updateTable7("WithdrawDepositPartPay");
//          }
//        break;
        
        
//          case "LoanPytSavings":
//          if(jComboBox26.getSelectedItem().toString().equalsIgnoreCase("TXN CODE")){
//          JOptionPane.showMessageDialog(this, "Please first select the Txn Code");
//          return;
//          }else{
//        jPanel20.setVisible(false);
//        
//        jPanel21.setVisible(true);
//         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"58");  
//        updateTable7("LoanPytSavings");
//          }
//        break;
        case "General":
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"32");  
        updateTable7("General");
        break;
        
        case "Expense":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"31");  
        updateTable7("Expense");
        break;
        
        case "ExpenseBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"62");  
        updateTable7("Expense");
        break;
           case "accumDepreciation":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"98");  
        updateTable7("accumDepreciation");
        
        
        break;
        case "SalaryBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"75");  
        updateTable7("Salary");
        break;
        
        
        case "NewLoan":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"51");  
        updateTable7("NewLoan");
        
         case "NewLoanFixed":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"102");  
        updateTable7("NewLoan");
        
        break;
       
           case "NewLoanBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"63");  
        updateTable7("NewLoan");
        break;
        
        
        case "Withdrawal":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"34");  
        updateTable7("Withdrawal");
        
        break;
        
        case "Deposit":
        jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"35");  
        updateTable7("Withdrawal");
        break;
        
        
        
         case "MobileMoneyWithdraw":
        jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"203");  
        updateTable7("MobileMoneyWithdraw");
        break;
        
        
         case "MobileMoneyDeposit":
        jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"204");  
        updateTable7("MobileMoneyWithdraw");
        break;
        
        case "Payable":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"36");  
        updateTable7("Payable");
        break;
         case "SavingPenalties":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"90");  
        updateTable7("Savings");
        break;
         
         case "ClearReceivableBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"71");  
        updateTable7("Receivable");
        break;
         case "PayableBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"64");  
        updateTable7("Payable");
        break;
        case "ReceivableBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"72");  
        updateTable7("Receivable");
        break;
           case "DepositPartPayBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"76");  
        updateTable7("DepositPartPay");
        break;
          case "HEFROI":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"55");  
        updateTable7("HEFROI");
        break;       
                
                
        case "ClearPayable":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"37");  
        updateTable7("ClearPayable");
        break;
        
          case "Prepayments":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"91");  
        updateTable7("Prepayments");
        break;
        
          case "PrepaymentsBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"92");  
        updateTable7("Prepayments");
        break;
        
         case "ClearPayableBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"70");  
        updateTable7("ClearPayable");
        break;
        case "Receivable":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"38");  
        updateTable7("Receivable");
        break;
        case "Drawing":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"56");  
        updateTable7("Drawing");
        break;
         case "DrawingBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"87");  
        updateTable7("Drawing");
        break;
        case "ClearReceivable":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"39");  
        updateTable7("ClearReceivable");
        break;
        
        
        case "Salary":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"40");  
        updateTable7("Salary");
        break;
                
           
             case "DepositPartPay":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"53");  
        updateTable7("DepositPartPay");
        break;
            case "LProcessFees":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"59");  
        updateTable7("LProcessFees");
        break;
        
           case "LInsuranceFees":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"104");  
        updateTable7("LProcessFees");
        break;
        
          case "MembershipFees":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"68");  
        updateTable7("LProcessFees");
        break; 
        
           case "AnnualSubscriptionFees":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"110");  
        updateTable7("LProcessFees");
        break; 
        
           case "FinesAndCharges":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"112");  
        updateTable7("LProcessFees");
        break; 
        
          case "FinesAndChargesBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"88");  
        updateTable7("LProcessFees");
        break;
        
           case "AnnualSubsFeesBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"109");  
        updateTable7("LProcessFees");
        break; 
        
        
          case "LedgerFees":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"108");  
        updateTable7("LProcessFees");
        break; 
        
          case "AdminCosts":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"68");  
        updateTable7("LProcessFees");
        break; 
        
         case "AdminCostsSavings":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"89");  
        updateTable7("LProcessFees");
        break;
         case "MembershipFeesSavings":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"89");  
        updateTable7("LProcessFees");
        break;
          case "FinesAndChargesSavings":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"89");  
        updateTable7("LProcessFees");
        break;
        
          case "LedgerFeesSavings":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"106");  
        updateTable7("LProcessFees");
        break;
        
         case "MembershipFeesBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"88");  
        updateTable7("LProcessFees");
        break;
        
    
           case "AdminCostsBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"107");  
        updateTable7("LProcessFees");
        break;
          case "LProcessFeesBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"61");  
        updateTable7("LProcessFees");
        break;
        
        
           case "LInsuranceFeesBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"105");  
        updateTable7("LProcessFees");
        break;
        
        
        
        case "WithdrawDepositPartPay":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"54");  
        updateTable7("WithdrawDepositPartPay");
        break;        
         
        case "WithdrawDepositPartPayBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"77");  
        updateTable7("WithdrawDepositPartPay");
        break; 
        
         
        case "WithdrawSavingsBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"78");  
        updateTable7("WithdrawSavings");
        break; 
                   
                   
         case "WithdrawSavings":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"52");  
        updateTable7("WithdrawSavings");
        break;
       
        case "Savings":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"41");  
        updateTable7("Savings");
        break;
        
        
          case "SavingsBank":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"63");  
        updateTable7("Savings");
        break;
          case "SavingsTransfer":
        jComboBox26.setVisible(false);
        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"73");  
        updateTable7("Savings");
        break;
        
 case "Capitalisation":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"42");  
        updateTable7("Capitalisation");
        break;
        
        case "CapitalisationBank1":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"69");  
        updateTable7("Capitalisation");
        break;
        
//        DecaptalisationBank1
      case "CapitalisationSavings":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"66");  
        updateTable7("Capitalisation");
        break;   
        
        
 case "CapitalisationBank":
        jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"65");  
        updateTable7("Capitalisation");
        
        break;
 case "Decaptalisation":
          jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"43");  
        updateTable7("Decaptalisation");
        break;
   case "DecaptalisationSavings":
          jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"79");  
        updateTable7("Decaptalisation");
        break;      
        
 case "RecoverInterest":
         jComboBox26.setVisible(false);

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"44");  
        updateTable7("RecoverInterest");
        break;
               
     
      
                 
        case "RecoverInterestBank":
         jComboBox26.setVisible(false);

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"80");  
        updateTable7("RecoverInterest");
        break;
            
        case "RecoverInterestDepositPartPay":
         jComboBox26.setVisible(false);

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"100");  
        updateTable7("RecoverInterest");
        break;
     
        case "RecoverAccumulatedInterestDepositPartPay":
         jComboBox26.setVisible(false);

        fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"101");  
        updateTable7("RecoverAccumulatedInterest");
        break;
      
    case "WriteOffInterest":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"45");  
        updateTable7("WriteOffInterest");
        break;  
        
         case "WriteOffProcessingFees":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"120");  
        updateTable7("WriteOffInterest");
        break;
        
        case "WriteOffInterestDepositPartPay":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"93");  
        updateTable7("WriteOffInterest");
        break; 
        
         case "WriteOffAccumulatedInterestSavings":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"96");  
        updateTable7("WriteOffInterest");
        break;
        
         case "WriteOffAccumulatedInterestDepositPartPay":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"95");  
        updateTable7("WriteOffInterest");
        break; 
        
         case "WriteOffInterestSavings":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"94");  
        updateTable7("WriteOffInterest");
        break; 
        
         case "WriteOffPenaltySavings":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"97");  
        updateTable7("WriteOffInterest");
        break;
        
      case "WriteOffInterestBank":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"81");  
        updateTable7("WriteOffInterest");
        break;    
         case "WriteOffProcessingFeesBank":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"121");  
        updateTable7("WriteOffInterest");
        break; 
        
 case "RecoverPenalty":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"46");  
        updateTable7("RecoverPenalty");
        break;
  case "RecoverPenaltyBank":
         jComboBox26.setVisible(false);
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"82");  
        updateTable7("RecoverPenalty");
        break;       
        
        
         case "WriteOffPenalty":
         jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"47");  
        updateTable7("WriteOffPenalty");
        break;
  case "WriteOffPenaltyBank":
         jComboBox26.setVisible(false);
          fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"83");  
        updateTable7("WriteOffPenalty");
        break;
 case "RecoverAccumulatedInterest":
       jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"48");  
        updateTable7("RecoverAccumulatedInterest");
        break;
 case "RecoverAccumulatedInterestBank":
       jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"84");  
        updateTable7("RecoverAccumulatedInterest");
        break;
         case "WriteOffAccumulatedInterest":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"49");  
        updateTable7("WriteOffAccumulatedInterest");
        break;
case "WriteOffAccumulatedInterestBank":
        jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"85");  
        updateTable7("WriteOffAccumulatedInterest");
        break;
     case "BadLoansRecovered":
         jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"50");  
        updateTable7("BadLoansRecovered");
        break;
   case "BadLoansRecoveredBank":
         jComboBox26.setVisible(false);
         fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"86");  
        updateTable7("BadLoansRecovered");
        break;

 
   }
    }//GEN-LAST:event_jButton66ActionPerformed

    private void jButton65ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton65ActionPerformed
     switch(jButton82.getText().toString()){
            
        case "LoanPyt":
        jComboBox26.setVisible(true);

        break;
        
        case "General":
      fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"),"33");  
        updateTable7("General");
        break;
         case "Expense":
        jComboBox26.setVisible(false);
        break;
                 case "accumDepreciation":
        jComboBox26.setVisible(false);
        break;
        case "ExpenseBank":
        jComboBox26.setVisible(false);
        break;
          case "SalaryBank":
        jComboBox26.setVisible(false);
        break;
        
        case "NewLoan":
        jComboBox26.setVisible(false);
        break;
 
         case "NewLoanBank":
        jComboBox26.setVisible(false);
        break;
        case "Withdrawal":
        jComboBox26.setVisible(false);
        break;
        
        case "Deposit":
        jComboBox26.setVisible(false);

        break;
       
        case "SavingPenalties":
        jComboBox26.setVisible(false);
        break;
         case "Payable":
        jComboBox26.setVisible(false);
        break;
         case "PayableBank":
        jComboBox26.setVisible(false);
        break;
          case "ClearReceivableBank":
        jComboBox26.setVisible(false);
        break;
         case "ReceivableBank":
        jComboBox26.setVisible(false);
        break;
        case "Receivable":
        jComboBox26.setVisible(false);
 
        break;
         case "Drawing":
        jComboBox26.setVisible(false);
        break; 
        case "DrawingBank":
        jComboBox26.setVisible(false);
        break; 
        
        case "Salary":
        jComboBox26.setVisible(false);

        break;
 case "Savings":
        jComboBox26.setVisible(false);
        break;
             
 case "SavingsTransfer":
        jComboBox26.setVisible(false);
        break;
         case "SavingsBank":
        jComboBox26.setVisible(false);
        break;
 case "Capitalisation":
        jComboBox26.setVisible(false);

        break;
        case "CapitalisationBank1":
        jComboBox26.setVisible(false);

        break; 
        
 case "CapitalisationBank":
        jComboBox26.setVisible(false);

        break;

 case "CapitalisationSavings":
        jComboBox26.setVisible(false);

        break;



 case "Decaptalisation":
        jComboBox26.setVisible(false);

        break;
    case "DecaptalisationSavings":
        jComboBox26.setVisible(false);

        break;     
 case "Interest":
        jComboBox26.setVisible(false);
        break;
 case "Penalty":
        jComboBox26.setVisible(false);
        break;
 case "AccumulatedInterest":
        jComboBox26.setVisible(false);
        break;
 case "ClearPayable":
        jComboBox26.setVisible(false);
        break;
         case "Prepayments":
        jComboBox26.setVisible(false);
        break;
            case "PrepaymentsBank":
        jComboBox26.setVisible(false);
        break;
  case "ClearPayableBank":
        jComboBox26.setVisible(false);
        break;       
 case "ClearReceivable":
        jComboBox26.setVisible(false);
        break;

   }
    }//GEN-LAST:event_jButton65ActionPerformed

    private void jButton67ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton67ActionPerformed
    Integer z1=1200;
      fios.intFileWriterReplace(fios.createFileName("PMMS_Statements", "reports", "calSelection.txt"),z1.toString());  
      Calender frmMain = new Calender();
        frmMain.setIUpdateText(this);  
        frmMain.pack();
        frmMain.setVisible(true);
    }//GEN-LAST:event_jButton67ActionPerformed

    private void amountCredit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountCredit2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountCredit2ActionPerformed

    private void jButton71ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton71ActionPerformed
      
         
         
         Object[] optionsSGS = {"Yes",  "No"};
            int nSGS = JOptionPane.showOptionDialog(this,  "Are you sure you want to cancel this Transaction?",
            "CANCEL TXN", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS, optionsSGS[0]);
            if(nSGS==JOptionPane.YES_OPTION){

   clearTheScreen(); 
            }
            else if (nSGS==JOptionPane.NO_OPTION){
            this.setVisible(true);
            }
    }//GEN-LAST:event_jButton71ActionPerformed

    private void firstName3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstName3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstName3ActionPerformed

    private void jCheckBox65ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox65ActionPerformed
    if(jCheckBox65.isSelected()){
   onjCheckBox65();
         
    }else if(!jCheckBox65.isSelected()){
    offjCheckBox65();
    }
    }//GEN-LAST:event_jCheckBox65ActionPerformed
private void onjCheckBox65(){

 
    jLabel61.setVisible(true);
    titleJCbox2.setVisible(true);
    jLabel62.setVisible(true);
    firstName3.setVisible(true);
    jLabel63.setVisible(true);
    lastName2.setVisible(true);
    jButton69.setVisible(true);
    jCheckBox65.setText("CREATE NEW CUSTOMER");

}
private void offjCheckBox65(){
 jLabel61.setVisible(false);
        titleJCbox2.setVisible(false);
        jLabel62.setVisible(false);
        firstName3.setVisible(false);
        jLabel63.setVisible(false);
        lastName2.setVisible(false);
        jButton69.setVisible(false);
   
jCheckBox65.setText("CREATE NEW CUSTOMER/SUB-LEDGER");


}

    private void jButton69ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton69ActionPerformed

          

             jButton69.setEnabled(false);
        if(jCheckBox65.getText().equalsIgnoreCase("CREATE NEW CUSTOMER")){
        
        if(!(firstName3.getText().equalsIgnoreCase("")&&lastName2.getText().equalsIgnoreCase(""))){
        
         if(numberMatches(firstName3.getText())){
         
             if(!dbq.phoneNumberAlreadyExists(firstName3.getText(),this)){
             
           String theAccountNumber= createLedger();   
           dbq.setPhoneNumber(theAccountNumber,firstName3.getText(),this);
//            sendsms.createSmsAccountCreation(theAccountNumber, "", p);
               firstName3.setText("");
            lastName2.setText("");
             }else{
             
             JOptionPane.showMessageDialog(this, "A CUSTOMER ACCOUNT WITH SIMILAR PHONE NUMBER ALREADY EXISTS,PLEASE USE THE SAME ACCOUNT FOR PROCESSING");
               jButton69.setEnabled(true);
        firstName3.setText("");
          lastName2.setText("");
             }
         }else{
      JOptionPane.showMessageDialog(this, "ONLY PHONE NUMBERS IN THE FORMAT OF 07XXXXXXXX ARE ALLOWED");
        jButton69.setEnabled(true);
        firstName3.setText("");
         }
        
     }else{
     
     JOptionPane.showMessageDialog(this, "Please first input both laste and first names before you proceed!!");
     
     
     }
        
        }else if(jCheckBox65.getText().equalsIgnoreCase("CREATE SUB-LEDGER")){
      if(!(firstName3.getText().equalsIgnoreCase("")&&lastName2.getText().equalsIgnoreCase(""))){
        
        
        createLedger();
        
        
     }else{
     
     JOptionPane.showMessageDialog(this, "Please first input both laste and first names before you proceed!!");
     
     
     }
     
     
     
     }
    }//GEN-LAST:event_jButton69ActionPerformed
private boolean numberMatches(String PhoneNumber) {
    Pattern pattern = Pattern.compile("^\\d{10}$");
    Matcher matcher = pattern.matcher(PhoneNumber);
    return matcher.matches();
}
    private void jButton70ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton70ActionPerformed
    jCheckBox65.setText("CREATE NEW CUSTOMER");
    firstName3.setText("");
            lastName2.setText("");
            jButton69.setEnabled(true);
    }//GEN-LAST:event_jButton70ActionPerformed

    private void jButton68ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton68ActionPerformed

   if(modelxxxxx.getRowCount()==0){
   JOptionPane.showMessageDialog(this, "There is no item to remove");
   return;
   
   }else{
     modelxxxxx.removeRow(jTable6.convertRowIndexToModel(jTable6.getSelectedRow()));
   }
    }//GEN-LAST:event_jButton68ActionPerformed

    private void jButton75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton75ActionPerformed
             
       Object[] optionsSSV = {"Yes",  "No"};
    int nSSV = JOptionPane.showOptionDialog(this,  "Are you sure about cancelling this Batch Posting????",
    "CANCEL BATCH POSTING", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, optionsSSV,  optionsSSV[0]);
    if(nSSV==JOptionPane.YES_OPTION){
   PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }
    else if (nSSV==JOptionPane.NO_OPTION){ this.setVisible(true);}
    }//GEN-LAST:event_jButton75ActionPerformed

    private void jTextField60FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField60FocusLost
  
        if(parseDouble(jTextField60.getText())<parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan5.txt")))){
        
        
        JOptionPane.showMessageDialog(this, "Please note that only annual interest rate is allowed. Just multiply the monthly rate by 12");
        }
    }//GEN-LAST:event_jTextField60FocusLost

    private void batchPosingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchPosingButtonActionPerformed

             batchPosingButton.setEnabled(false);
        if(dbq.newLedgerCreated()){
JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
return;
}else{    

         if(uploanPostingAllTxns1()){
        
             
              dbq.deleteBanks();
             
        JOptionPane.showMessageDialog(this, "The Batch was posted successfully!!");

        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
        
        }else{
         
             JOptionPane.showMessageDialog(this, "The Batch posting failed. Please check and repost the items that failed");

        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
         
         }
 

     batchPosingButton.setEnabled(false);

}    
        
        
        
        
        

        
        
    }//GEN-LAST:event_batchPosingButtonActionPerformed
public void extractAccountAndBalance(JTable theTable){
    List titles=new ArrayList();
    titles.add("S/N");
    titles.add("ACCOUNT NUMBER");
    titles.add("ACCOUNT NAME");
    titles.add("BALANCE");
    List<List>values=new ArrayList();
 String accountNumber="",accountName="",Amount="";int  l=1;
 
 String[] files=fios.fileNamesInDirectory(fios.createDirectoryName("accountManagement", "accountBalancesvv"));
//JOptionPane.showMessageDialog(this, files.length);
    for (int i = 0; i < files.length; i++) {
        
   Amount=fios.stringFileReader(fios.createFileName("accountManagement", "accountBalancesvv", files[i]));
   accountNumber=files[i].substring(21, 32);
   accountName=thisAccountName(accountNumber);
//    JOptionPane.showMessageDialog(this, Amount);
//    JOptionPane.showMessageDialog(this, accountNumber);
//    JOptionPane.showMessageDialog(this, accountName);
       List data4x=new ArrayList();
        data4x.add(l);
        data4x.add(accountNumber);
        data4x.add(accountName);  
        data4x.add(Amount);  
        values.add(data4x);
        l++;
        
      
    }
  PureListModel list =  new PureListModel( values, titles);
        theTable.setModel(list);

        TableRowSorter<PureListModel> sorter = new TableRowSorter<>(list);
        theTable.setRowSorter(sorter);
 }
 
 private String thisAccountName(String accountnUMBE){
 return fios.stringFileReader(fios.createFileName("accountManagement", "accountNamevv", "accountName"+accountnUMBE+".txt"));
 }
 
    private void jComboBox26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox26ActionPerformed

    private void jButton66HierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jButton66HierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton66HierarchyChanged

    private void jButton82ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton82ActionPerformed

        
        valueDate.setText(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "open_day.txt")));

    if(!sdf.format(new Date(System.currentTimeMillis())).equals(valueDate.getText())){JOptionPane.showMessageDialog(rootPane, "DAY NOT OPENED");return;}else{ debitPanel.setVisible(true);
      
        jPanel10.setVisible(false);
            jPanel19.setVisible(false);
            jPanel28.setVisible(true);
    }
        
        
  
    }//GEN-LAST:event_jButton82ActionPerformed

    private void openDay4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDay4ActionPerformed
            PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_openDay4ActionPerformed

    private void openDay5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDay5ActionPerformed
                   PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_openDay5ActionPerformed

    private void jButton86ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton86ActionPerformed
  
        
         
        
    }//GEN-LAST:event_jButton86ActionPerformed

    private void jButton87ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton87ActionPerformed
   
        BioDataMetaData f = new BioDataMetaData(userId);
        
        f.setVisible(true);
        
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        
        f.setSize(screen.getSize());
        
        f.pack();  
        
    }//GEN-LAST:event_jButton87ActionPerformed

    private void jButton88ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton88ActionPerformed

        
        SwingWorker<Void,Void> backUpTheDataBasePmms = new SwingWorker() {
        @Override
        protected Object doInBackground() throws Exception {

        dbBackup.backUpTheDataBase("pmms_loans");
  try {
    wait(1000);
    } catch (InterruptedException ex) {
    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
    }

        return null;   
        } };

         backUpTheDataBasePmms.execute();         
 JOptionPane.showMessageDialog(PostingEntryWindow.this, "Back Up of accounts was successfull");
 
 

                    
      SwingWorker<Void,Void> creatTheBackupDetails = new SwingWorker() {
        @Override
        protected Object doInBackground() throws Exception {

        dbq.backUpDetails(PostingEntryWindow.this).forEach((item)->{
List thed=new ArrayList();

   String message="Dear "+item.get(0).toString()+","+fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "CompanyName.txt"))+" has successfully created a backupfile for LOANS at "+item.get(2)+" on "+item.get(3)+". Please consider cloud backup if NOT YET DONE.  Sent by PinkApple";
     
   String contact="256"+item.get(1).toString().substring(1, 10);
  thed.add("pmms_loans");
    thed.add(item.get(2));
    thed.add(item.get(3));
    thed.add(message);
      thed.add(PostingEntryWindow.this.userId);
  
      if(sendsms.smsBalanceEnough()){
//      sendsms.sendTheMessage(smsForm.formSMSMessage(message), "backup", contact);
     
     sendsms.reduceBalance();
     
      }
     dbq.createBackupRecord(thed); 
});
  try {
    wait(1000);
    } catch (InterruptedException ex) {
    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
    }

        return null;   
        } };

         creatTheBackupDetails.execute();  

 SwingWorker<Void,Void> endOfDayReport = new SwingWorker() {
        @Override
        protected Object doInBackground() throws Exception {

   SmsEndOfDayReport theSmsSend=new SmsEndOfDayReport (PostingEntryWindow.this,userId);
     
     theSmsSend.sendDailyReport();
 

        return null;   
        } };

         endOfDayReport.execute();  
         
          jButton88.setEnabled(false);
    }//GEN-LAST:event_jButton88ActionPerformed

    private void jButton89ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton89ActionPerformed
//
        PrintReceiptAuto frmMain = new PrintReceiptAuto(this.userId,this);
        frmMain.pack();
        frmMain.setVisible(true);
    }//GEN-LAST:event_jButton89ActionPerformed

    private void jButton85ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton85ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton85ActionPerformed

    private void jButton94ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton94ActionPerformed
     PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_jButton94ActionPerformed

    private void jButton84ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton84ActionPerformed
 
        String accountnumbDocS1= fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"));
        
     if(accountnumbDocS1.equalsIgnoreCase("Not Yet Select")){ 
     
     
     JOptionPane.showMessageDialog(this, "Please first select the borrower's account Number!!!!!!!");

     return;
     
     
     
     }else{
         
//         JOptionPane.showMessageDialog(this, fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
         
       fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), fmt.formatAccountWithSeperators(creditAccountField72.getValue().toString()));
       
        CollateralSecurity f = new CollateralSecurity(userId);
        
        f.setVisible(true);
        
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        
        f.setSize(screen.getSize());
        
        f.pack();  
     }
    }//GEN-LAST:event_jButton84ActionPerformed

    private void repaymentCycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repaymentCycleActionPerformed
 
        String accountnumbDocS1= fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccountvvKK"+this.userId+".txt"));
        
     if(accountnumbDocS1.equalsIgnoreCase("Not Yet Select")){ 
     
     
     JOptionPane.showMessageDialog(this, "Please first select the borrower's account Number!!!!!!!");
      
     repaymentCycle.setSelectedIndex(0);
     
     
     return;
     
     
     
     }else{
//  JOptionPane.showMessageDialog(this, repaymentCycle.getSelectedItem().toString());
    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvKK"+this.userId+".txt"), "Not Yet Select");       
         
  fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+accountnumbDocS1+this.userId+".txt"), repaymentCycle.getSelectedItem().toString());
   
  fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+accountnumbDocS1+this.userId+".txt"), "Yes");  
     
     }
    }//GEN-LAST:event_repaymentCycleActionPerformed

    private void InterestRegimeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InterestRegimeComboBoxActionPerformed

        
        
        if(InterestRegimeComboBox.getSelectedItem().toString().equalsIgnoreCase("Reducing With Reducing Instalments")){
        portfolioOwner1.setVisible(true);
        }
        
        
        String accountnumbDocS1= fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "activeAccountvvGG"+this.userId+".txt"));
        
     if(accountnumbDocS1.equalsIgnoreCase("Not Yet Select")){ 
     
     
     JOptionPane.showMessageDialog(this, "Please first select the borrower's account Number!!!!!!!");
     
     InterestRegimeComboBox.setSelectedIndex(0);

     return;
     
     
     
     }else{
     
  fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "interestRegime"+accountnumbDocS1+this.userId+".txt"), InterestRegimeComboBox.getSelectedItem().toString());
   
  fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "regimeSet"+accountnumbDocS1+this.userId+".txt"), "Yes");
  
     fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvGG"+this.userId+".txt"), "Not Yet Select");
     
     }
     
    }//GEN-LAST:event_InterestRegimeComboBoxActionPerformed

    private void jComboBox27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox27ActionPerformed
     JOptionPane.showMessageDialog(this, "SELECT THE ASSET LEDGER");
    }//GEN-LAST:event_jComboBox27ActionPerformed

    private void jButton83ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton83ActionPerformed
        dbq. updateBulkIteM(jTable9.getModel().getValueAt( jTable9.convertRowIndexToModel(jTable9.getSelectedRow()), 0).toString());
        dbq.loadAllBulkUploadsSecond(jTable9);
    }//GEN-LAST:event_jButton83ActionPerformed

    private void jButton81ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton81ActionPerformed

//        if(dbq.newLedgerCreated()){
//            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
//            return;
//        }else{
//
//            if(uploanPostingAllBulkTxns1()){
//
//                JOptionPane.showMessageDialog(this, "The Bulk upload was posted successfully!!");
//
//                //        PostingEntryWindow f = new PostingEntryWindow(userId);
//                //        f.setVisible(true);
//                //        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
//                //        f.setSize(screen.getSize());
//                //        f.pack();
//                //        this.dispose();
//                System.exit(1);
//            }}
    }//GEN-LAST:event_jButton81ActionPerformed

    private void jButton80ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton80ActionPerformed

        dbq.updateBulkItemland(jTable9.getModel().getValueAt( jTable9.convertRowIndexToModel(jTable9.getSelectedRow()), 0).toString());
        dbq.removeBulkItem(jTable9.getModel().getValueAt( jTable9.convertRowIndexToModel(jTable9.getSelectedRow()), 0).toString());
        dbq.loadAllBulkUploadsSecond(jTable9);

        dbq.loadAllBulkUploads(jTable10);
    }//GEN-LAST:event_jButton80ActionPerformed

    private void openDay3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDay3ActionPerformed
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_openDay3ActionPerformed

    private void jButton72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton72ActionPerformed

//        if(dbq.newLedgerCreated()){
//            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
//            return;
//        }else if(uploadBulkPostTxns()){
//
//            JOptionPane.showMessageDialog(this, "Bulk  Txn Posting Data uploaded successfully!!");
//
//            PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
//            f.setVisible(true);
//            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
//            f.setSize(screen.getSize());
//            f.pack();
//            this.dispose();
//
//        }

    }//GEN-LAST:event_jButton72ActionPerformed

    private void jButton74ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton74ActionPerformed
        //extractAccountAndBalance(jTable10);

        uploadBulkCombo();
        JOptionPane.showMessageDialog(this,  "The Types were successfully uploaded");
    }//GEN-LAST:event_jButton74ActionPerformed

    private void jComboBox68ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox68ActionPerformed
        jTextField71.setText(jComboBox68.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox68ActionPerformed

    private void jComboBox56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox56ActionPerformed
        jTextField76.setText(jComboBox56.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox56ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed
       int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("LOAN AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"LoanPayment"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"LoanPayment"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("LoanPayment"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed
        int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("WITHDRAW AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("23000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"SavingsWithdraw"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"SavingsWithdraw"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("SavingsWithdraw"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton61ActionPerformed

    private void jButton60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton60ActionPerformed
       int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("WITHDRAW AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"WithdrawDeposit"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"WithdrawDeposit"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("WithdrawDeposit"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton60ActionPerformed

    private void jButton59ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton59ActionPerformed
           int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("DEPOSIT AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"Deposit"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"Deposit"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("Deposit"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton59ActionPerformed

    private void jButton58ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton58ActionPerformed
      int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("CAPITAL AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"Decapitalisation"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"Decapitalisation"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("Decapitalisation"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton58ActionPerformed

    private void jButton57ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton57ActionPerformed
     int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("SAVINGS AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"Savings"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"Savings"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("Savings"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton57ActionPerformed

    private void jButton56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton56ActionPerformed
        int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("CAPITAL AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");

        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"Capitalisation"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"Capitalisation"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("Capitalisation"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
    }//GEN-LAST:event_jButton56ActionPerformed

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        jTextField22.setText(dbq.getAccountNumber(jComboBox8.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if((jTextField22.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Debit Account Number!!");
                return;

            }else{
                if(uploadDecapitalisationShares()){

                    JOptionPane.showMessageDialog(this, "Shares Data uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }
        }

    }//GEN-LAST:event_jButton52ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        jTextField21.setText(dbq.getAccountNumber(jComboBox7.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if((jTextField21.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Credit Account Number!!");
                return;

            }else{
                if(uploadWithdrawSavingsData()){

                    JOptionPane.showMessageDialog(this, "Withdraw Savings uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }
            }}
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed

        jTextField20.setText(dbq.getAccountNumber(jComboBox6.getSelectedItem().toString()));

    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if((jTextField20.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Credit Account Number!!");
                return;

            }else{
                if(uploadOtherWithdrawSavingsData()){

                    JOptionPane.showMessageDialog(this, "Other Withdraw Savings uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }
        }

    }//GEN-LAST:event_jButton27ActionPerformed

    private void openDay2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDay2ActionPerformed
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_openDay2ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        jTextField19.setText(dbq.getAccountNumber(jComboBox5.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{

            if((jTextField19.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Credit Account Number!!");
                return;

            }else{
                if(uploadLoanPayments()){

                    JOptionPane.showMessageDialog(this, "Loan Payment Data uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }

        }

    }//GEN-LAST:event_jButton24ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        jTextField18.setText(dbq.getAccountNumber(jComboBox4.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{

            if((jTextField18.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Debit Account Number!!");
                return;

            }else{
                if(uploadOtherSavingsData()){

                    JOptionPane.showMessageDialog(this, "Other Savings uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }

        }

        //
        //        if(!(jTextField18.getText().equalsIgnoreCase(" "))){
            //        if(uploadOtherSavingsData()){
                //
                //        JOptionPane.showMessageDialog(this, "Other Savings uploaded successfully!!");
                //
                //        }
            //
            //
            //}else{
            //
            // JOptionPane.showMessageDialog(this, "Please first select Debit Account Number!!");
            //
            //
            //}
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        jTextField17.setText(dbq.getAccountNumber(jComboBox3.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        jTextField16.setText(dbq.getAccountNumber(jComboBox2.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{

            if((jTextField17.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Debit Account Number!!");
                return;

            }else{
                if(uploadSavingsData()){
 JOptionPane.showMessageDialog(this, "Data uploaded successfully!!");
    jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }}
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if((jTextField16.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Credit Account Number!!");
                return;

            }else{
                if(uploadSharesData()){

                    JOptionPane.showMessageDialog(this, "Shares Data uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }
        }

        //
        //        if(!(jTextField16.getText().equalsIgnoreCase(" "))){
            //
            //        if(uploadSharesData()){
                //
                //        JOptionPane.showMessageDialog(this, "Shares Data uploaded successfully!!");
                //
                //        }
            //
            //
            //}else{
            //
            // JOptionPane.showMessageDialog(this, "Please first select Credit Account Number!!");
            //
            //
            //}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox38ActionPerformed

        
      if(jCheckBox38.isSelected()){
       jButton4.setEnabled(true);
           jComboBox3.setEnabled(true);
           jTextField17.setEnabled(true);
                   jButton57.setEnabled(true);
                   jCheckBox38.setSelected(true);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                   jCheckBox36.setSelected(false);
                                    jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
                                   
            dbq.feelWithCashAndBank(jComboBox3);
            jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
        jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
       jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      
        jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
       jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                      jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);
                   
                      jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox38.isSelected()){
      
        jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
      
      
      }  
        
       
    }//GEN-LAST:event_jCheckBox38ActionPerformed

    private void jCheckBox14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox14ActionPerformed
          if(jCheckBox14.isSelected()){
       jButton28.setEnabled(true);
           jComboBox7.setEnabled(true);
           jTextField21.setEnabled(true);
                   jButton61.setEnabled(true);
      jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(true);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                    jCheckBox36.setSelected(false);
                                    
                                     jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
                                    
            dbq.feelWithCashAndBank(jComboBox7);
               jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
        jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
       jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      
        jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
       jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                      jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);
                   
                      jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox14.isSelected()){
      
        jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox14ActionPerformed

    private void jCheckBox15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox15ActionPerformed
           if(jCheckBox15.isSelected()){
       jButton24.setEnabled(true);
           jComboBox5.setEnabled(true);
           jTextField19.setEnabled(true);
                   jButton63.setEnabled(true);
      jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(true);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                    jCheckBox36.setSelected(false);
                                    
                                     jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
            dbq.feelWithCashAndBankLoans(jComboBox5);
          
            jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
       jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      
        jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
       jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                      jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);
                   
                      jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox15.isSelected()){
      
        jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox15ActionPerformed

    private void jCheckBox16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox16ActionPerformed
       
        if(jCheckBox16.isSelected()){
       jButton3.setEnabled(true);
           jComboBox2.setEnabled(true);
           jTextField16.setEnabled(true);
                   jButton56.setEnabled(true);
     
             dbq.feelWithCapitalNames(jComboBox2);
             
              jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
         jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(true);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                    jCheckBox36.setSelected(false);
                                   
                        jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
        jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
       jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                      jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);            
                                   
                       jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);               
      }else if(!jCheckBox16.isSelected()){
      
        jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox16ActionPerformed

    private void jCheckBox30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox30ActionPerformed
         if(jCheckBox30.isSelected()){
       jButton52.setEnabled(true);
           jComboBox8.setEnabled(true);
           jTextField22.setEnabled(true);
                   jButton58.setEnabled(true);
        jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(true);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                    jCheckBox36.setSelected(false);
            dbq.feelWithCapitalNames(jComboBox8);
             jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
           
               jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
          jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
                   
       jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                      jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);   
            
                   
                      jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox30.isSelected()){
      
        jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox30ActionPerformed

    private void jCheckBox33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox33ActionPerformed
         if(jCheckBox33.isSelected()){
       jButton5.setEnabled(true);
           jComboBox4.setEnabled(true);
           jTextField18.setEnabled(true);
                   jButton59.setEnabled(true);
        jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(true);
                                   jCheckBox35.setSelected(false);
                                    jCheckBox36.setSelected(false);
             dbq.feelWithCashAndBank(jComboBox4);
              jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
              jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
          jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
                   
                      jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false); 
                   
                   
                      jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox33.isSelected()){
      
        jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox33ActionPerformed

    private void jCheckBox35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox35ActionPerformed
     if(jCheckBox35.isSelected()){
       jButton27.setEnabled(true);
           jComboBox6.setEnabled(true);
           jTextField20.setEnabled(true);
                   jButton60.setEnabled(true);
       dbq.feelWithCashAndBank(jComboBox6);
        jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
              jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(true);
                                    jCheckBox36.setSelected(false);
                                    jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
          jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
                   
                     jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                      jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox35.isSelected()){
      
        jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox35ActionPerformed

    private void jButton64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton64ActionPerformed
        jPanel14.setVisible(false);
    jPanel12.setVisible(true);
    }//GEN-LAST:event_jButton64ActionPerformed

    private void jButton55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton55ActionPerformed
      
        
        if(dbq.newLedgerCreated()){
JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
return;
}else{    
 
         if(postBulk()){
        
             
//             dbq.deleteBanks();
             
        JOptionPane.showMessageDialog(this, "The Batch was posted successfully!!");
        
        PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
        
        }
 

             

}    
        
        
        
       
    }//GEN-LAST:event_jButton55ActionPerformed

    private void jButton98ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton98ActionPerformed
      Integer z1=1217;
      fios.intFileWriterReplace(fios.createFileName("PMMS_Statements", "reports", "calSelection.txt"),z1.toString());  
      Calender frmMain = new Calender();
        frmMain.setIUpdateText(this);  
        frmMain.pack();
        frmMain.setVisible(true);
    }//GEN-LAST:event_jButton98ActionPerformed

    private void jButton53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton53ActionPerformed
             if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if((jTextField24.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Debit Account Number!!");
                return;

            }else{
                if(uploadROIData()){

                    JOptionPane.showMessageDialog(this, "Return On Investments uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }
        }
    }//GEN-LAST:event_jButton53ActionPerformed

    private void jComboBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox9ActionPerformed
      jTextField24.setText(dbq.getAccountNumber(jComboBox9.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox9ActionPerformed

    private void jButton62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton62ActionPerformed
             int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("ROI AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"ROI"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"ROI"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("ROI"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);

    }//GEN-LAST:event_jButton62ActionPerformed

    private void jCheckBox36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox36ActionPerformed
     if(jCheckBox36.isSelected()){
       jButton53.setEnabled(true);
           jComboBox9.setEnabled(true);
           jTextField24.setEnabled(true);
                   jButton62.setEnabled(true);
       dbq.feelWithROIExpense(jComboBox9);
        jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
              jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                   jCheckBox36.setSelected(true);
                                    jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
          jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
                   
                     jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                    jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                    jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);
      
      }else if(!jCheckBox36.isSelected()){
      
        jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      
      
      }
    }//GEN-LAST:event_jCheckBox36ActionPerformed

    private void amountCredit3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountCredit3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountCredit3ActionPerformed

    private void jButton100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton100ActionPerformed
                if(dbq.newLedgerCreated()){
            JOptionPane.showMessageDialog(this, "A NEW LEDGER HAS BEEN CREATED\n\nPLEASE FIRST ACTIVATE IT BEFORE YOU PROCEED");
            return;
        }else{
            if((jTextField26.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Please first select Debit Account Number!!");
                return;

            }else{
                if(uploadDirLoanDisbData()){

                    JOptionPane.showMessageDialog(this, "Return On Investments uploaded successfully!!");
  jPanel14.setVisible(true);
    jPanel12.setVisible(false);
                }

            }
        }
    }//GEN-LAST:event_jButton100ActionPerformed

    private void jComboBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox10ActionPerformed
   jTextField26.setText(dbq.getAccountNumber(jComboBox10.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBox10ActionPerformed

    private void jButton101ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton101ActionPerformed
                 int n=1;
        List<List>  d=new ArrayList(); 
        while(n<=2){
         List  da=new ArrayList();     
        if(n==1){
        da.add("S/N");
        da.add("ACCOUNT NAME");
        da.add("ACCOUNT NUMBER");
        da.add("DISBURSE AMOUNT");
        }
        if(n==2){
        da.add("1");
        da.add("Bazirake Augustine Googo");
        da.add("05502000110");
        da.add("20000000");
        }
       d.add(da); 
       n++;
        }
//     0772328928
     
        
        String theCounter=getCounter();     
        
writeExcel.creatExcelFromTable1(d,"DIS"+sdk.format(new Date(System.currentTimeMillis()))+theCounter,"DIS"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);
  
generateFile("DIS"+sdk.format(new Date(System.currentTimeMillis()))+theCounter);

    }//GEN-LAST:event_jButton101ActionPerformed

    private void jCheckBox37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox37ActionPerformed

        if(jCheckBox37.isSelected()){  
                    jButton100.setEnabled(true);
           jComboBox10.setEnabled(true);
           jTextField26.setEnabled(true);
                   jButton101.setEnabled(true);
       dbq.feelWithDirLoanDisbuse(jComboBox10);
              jCheckBox38.setSelected(false);
                   jCheckBox14.setSelected(false);
                   jCheckBox15.setSelected(false);
                           jCheckBox16.setSelected(false);
                           jCheckBox30.setSelected(false);
                                   jCheckBox33.setSelected(false);
                                   jCheckBox35.setSelected(false);
                                   jCheckBox36.setSelected(false);
                                    jCheckBox37.setSelected(true);
                                    jButton4.setEnabled(false);
           jComboBox3.setEnabled(false);
           jTextField17.setEnabled(false);
                   jButton57.setEnabled(false);
           jButton28.setEnabled(false);
           jComboBox7.setEnabled(false);
           jTextField21.setEnabled(false);
                   jButton61.setEnabled(false);
      
      jButton24.setEnabled(false);
           jComboBox5.setEnabled(false);
           jTextField19.setEnabled(false);
                   jButton63.setEnabled(false);
      
      
          jButton3.setEnabled(false);
           jComboBox2.setEnabled(false);
           jTextField16.setEnabled(false);
                   jButton56.setEnabled(false);
      jButton52.setEnabled(false);
           jComboBox8.setEnabled(false);
           jTextField22.setEnabled(false);
                   jButton58.setEnabled(false);
                   
                     jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                    jButton5.setEnabled(false);
           jComboBox4.setEnabled(false);
           jTextField18.setEnabled(false);
                   jButton59.setEnabled(false);
                   
                    jButton27.setEnabled(false);
           jComboBox6.setEnabled(false);
           jTextField20.setEnabled(false);
                   jButton60.setEnabled(false);
      
                     jButton53.setEnabled(false);
           jComboBox9.setEnabled(false);
           jTextField24.setEnabled(false);
                   jButton62.setEnabled(false);
      }else if(!jCheckBox37.isSelected()){
      
        jButton100.setEnabled(false);
           jComboBox10.setEnabled(false);
           jTextField26.setEnabled(false);
                   jButton101.setEnabled(false);
      
      
      }
         
         
    }//GEN-LAST:event_jCheckBox37ActionPerformed

    private void debitAccountNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debitAccountNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_debitAccountNameActionPerformed

    private void jCheckBox39PostAnAdjustmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox39PostAnAdjustmentActionPerformed
if(jCheckBox39PostAnAdjustment.isSelected()){
jTextField62.setVisible(true);
JOptionPane.showMessageDialog(this, "Please Select the Date to make an adjustiment to!!");
jButton67.setVisible(true);
}else if(!jCheckBox39PostAnAdjustment.isSelected()){
jTextField62.setVisible(false);

jButton67.setVisible(false);


}
    }//GEN-LAST:event_jCheckBox39PostAnAdjustmentActionPerformed

    private void openDay6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDay6ActionPerformed
           PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }//GEN-LAST:event_openDay6ActionPerformed

    private void jButton107ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton107ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton107ActionPerformed

    private void jButton108ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton108ActionPerformed
   jButton105.setVisible(true);
			  jButton103.setVisible(true);
			  jButton106.setVisible(true);
			  jButton104.setVisible(true);
                          jButton107.setVisible(true);
                            jButton109.setVisible(true);
                          jButton108.setVisible(false);
    }//GEN-LAST:event_jButton108ActionPerformed

    private void jButton105ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton105ActionPerformed
         QuickReports frmMain = new QuickReports(this.userId,jButton105.getText());
        frmMain.pack();
        frmMain.setVisible(true);
    }//GEN-LAST:event_jButton105ActionPerformed

    private void jCheckBox39PostAnAdjustment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox39PostAnAdjustment1ActionPerformed

        if(jCheckBox39PostAnAdjustment1.isSelected()){
       
dbq.changerReceipPTo();

}else if(!jCheckBox39PostAnAdjustment1.isSelected()){
    
dbq.changerReceipPFrom();

}
        
    }//GEN-LAST:event_jCheckBox39PostAnAdjustment1ActionPerformed

    private void jButton110ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton110ActionPerformed

        SwingWorker<Void,Void> backUpTheDataBasePmms = new SwingWorker() {
        @Override
        protected Object doInBackground() throws Exception {

        dbBackup.backUpTheDataBase("pmms");
  try {
    wait(1000);
    } catch (InterruptedException ex) {
    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
    }

        return null;   
        } };

         backUpTheDataBasePmms.execute();         
 JOptionPane.showMessageDialog(PostingEntryWindow.this, "Back Up of accounts was successfull");
 
 

                    
      SwingWorker<Void,Void> creatTheBackupDetails = new SwingWorker() {
        @Override
        protected Object doInBackground() throws Exception {

        dbq.backUpDetails(PostingEntryWindow.this).forEach((item)->{
List thed=new ArrayList();

     String message="Dear "+item.get(0).toString()+","+fios.stringFileReader(fios.createFileName("emailDetails", "sendMail", "CompanyName.txt"))+" has successfully created a backupfile for ACCOUNTS at "+item.get(2)+" on "+item.get(3)+". Please consider cloud backup if NOT YET DONE.  Sent by PinkApple";
     
   String contact="256"+item.get(1).toString().substring(1, 10);
  thed.add("pmms");
    thed.add(item.get(2));
    thed.add(item.get(3));
    thed.add(message);
      thed.add(PostingEntryWindow.this.userId);
      if(sendsms.smsBalanceEnough()){
//     sendsms.sendTheMessage(smsForm.formSMSMessage(message), "backup", contact);
     
     sendsms.reduceBalance();
     
      }
     dbq.createBackupRecord(thed); 
});
  try {
    wait(1000);
    } catch (InterruptedException ex) {
    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
    }

        return null;   
        } };

         creatTheBackupDetails.execute();  
         
         
         
                  
     
         


          jButton110.setEnabled(false);
                
    }//GEN-LAST:event_jButton110ActionPerformed

    private void jCheckBox39PostAnAdjustment2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox39PostAnAdjustment2ActionPerformed
          if(jCheckBox39PostAnAdjustment2.isSelected()){
      loan.setMethod(1);
      jCheckBox39PostAnAdjustment3.setSelected(false);
      }else if(!jCheckBox39PostAnAdjustment2.isSelected()){
       loan.setMethod(0);
         jCheckBox39PostAnAdjustment2.setSelected(false);
      }
    }//GEN-LAST:event_jCheckBox39PostAnAdjustment2ActionPerformed

    private void jCheckBox39PostAnAdjustment3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox39PostAnAdjustment3ActionPerformed
             if(jCheckBox39PostAnAdjustment3.isSelected()){
      loan.setMethod(2);
      jCheckBox39PostAnAdjustment2.setSelected(false);
      jCheckBox39PostAnAdjustment3.setSelected(true);
      }else if(!jCheckBox39PostAnAdjustment3.isSelected()){
       loan.setMethod(0);
         jCheckBox39PostAnAdjustment3.setSelected(false);
      }
    }//GEN-LAST:event_jCheckBox39PostAnAdjustment3ActionPerformed

    private void jButton104ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton104ActionPerformed
  jButton88.setEnabled(true);
  jButton110.setEnabled(true);
    jButton104.setEnabled(false);
    }//GEN-LAST:event_jButton104ActionPerformed

    private void portfolioOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portfolioOwnerActionPerformed
    loansOfficer=    String.valueOf(portfolioOwner.getSelectedItem());
    }//GEN-LAST:event_portfolioOwnerActionPerformed

    private void portfolioOwner1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portfolioOwner1ActionPerformed
      computeType=portfolioOwner1.getSelectedItem().toString();
    }//GEN-LAST:event_portfolioOwner1ActionPerformed
private void twistButtonsSelectionTxn(){

  jButton8.setVisible(true);
 jButton26.setVisible(true);
     jLabel49.setVisible(false);
     jComboBox1.setVisible(false);
}

private void newButton(){

valueDate.setText(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "open_day.txt")));

    if(!sdf.format(new Date(System.currentTimeMillis())).equals(valueDate.getText())){JOptionPane.showMessageDialog(rootPane, "DAY NOT OPENED");return;}else{ debitPanel.setVisible(true);
creditingPanel.setVisible(true);
        newButton.setEnabled(false);
responseButton.setEnabled(false);
reverseButton.setEnabled(false);
viewButton.setEnabled(false);
validateButton.setEnabled(true);
saveButton.setEnabled(false);
cancelButton.setEnabled(true);
rejectButton.setEnabled(false);}
        }
            private void initialiseSequenceNumberInTextField(JTextField sqn) {

            sqn.setText(dbq.getTransactionSequenceNumber());
            }


            private List debitS(){

            List  debit = new ArrayList();
            debit .add(0, this.getDrAccountNumber());//Debit Account Number:0
            debit .add(1, this.getTransactionDate());//Transaction Date:1
            debit .add(2, this.getDrNarrative1());//Narrative 1:2
            debit .add(3, this.getDrNarrative2());//Narrative 2:3
            debit .add(4, this.getValueDate());//Value Date:4
            debit .add(5, this.getDrAmount());//Debit Amount:5
            debit .add(6, this.getCrAccountNumber());//Credit Account Number:6
            debit .add(7, this.getCrAccountName());//Credit Account Name:7
            debit .add(8, this.getDrReferenceNumber());//Debit Reference Number:8
            debit .add(9, this.getBatchNumber());//Batch Number:9
            debit .add(10, this.getTransactionType());//Transaction Type:10
            debit .add(11, this.getTransactionSequenceNumber());//Transaction Sequence Number:11


            return debit;

            }

            private List creditS(){
                
            List credit = new ArrayList();

            credit.add(0, this.getCrAccountNumber());//01-11010000-10
            credit.add(1, this.getTransactionDate());//dd/mm/yyyy
            credit.add(2, this.getCrNarrative1());
            credit.add(3, this.getCrNarrative2());
            credit.add(4, this.getValueDate());//dd/mm/yyyy
            credit.add(5, this.getCrAmount());//0.0
            credit.add(6, this.getDrAccountNumber());//01-11010000-10
            credit.add(7, this.getDrAccountName());
            credit.add(8, this.getCrReferenceNumber());
            credit.add(9, this.getBatchNumber());
            credit.add(10, this.getTransactionType());
            credit.add(11, this.getTransactionSequenceNumber());

            return credit;

            }



            private boolean verifyLoanRepaymentability(){
              
                boolean repaymentability=true;

            String S2mt=fmt.formatAccountWithSeperators(this.getDrAccountNumber()).substring(2,9);


            if(!(loan.loanExists(fmt.formatAccountWithSeperators(this.getDrAccountNumber())))){JOptionPane.showMessageDialog(this, "Loan does not exist");return false;}
//
//            Value=parseInt(S2mt);
//            if((Value>=5020000&&Value<=5029999)){
//
//            if(!( fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "amortizeStatus"+fmt.formatAccountWithSeperators(this.getDrAccountNumber())+ ".txt"))==5)){
//
//            JOptionPane.showMessageDialog(this,  "You are trying to payback a loan before disbursing it");
//
//            repaymentability= false;
//
//
//            }
//
//            }
            if(!fmt.formatAccountWithSeperators(this.getCrAccountNumber()).equalsIgnoreCase(fios.stringFileReader(fios.createFileName("persistence", "disburseAc", "setDisburseAccount1.txt")).split("[,]", 3)[1])){
            JOptionPane.showMessageDialog(this,  "The credit account must be the set Loan Portfolio Account");

            repaymentability= false;

            }
     
  double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(fmt.formatAccountWithSeperators(this.getDrAccountNumber())));
   double postedInstalments=parseDouble(this.getCrAmount());

  
    
     
     
    

//            Double amount=parseDouble(loan.testAmortizabilityRepayment(form.formatAccountWithSeperators(this.getDrAccountNumber()), this.getDrAmount()));

              if(postedInstalments>=remainingInstalments){

               
                  if(postedInstalments>remainingInstalments){

            this.setDrAmount(remainingInstalments);

            this.setCrAmount(remainingInstalments);
            
            JOptionPane.showMessageDialog(this, "The System has detected a loan repayment but the amount being paid back is greater than the loan balance"+"\n"+"The system is therefore going to adjust the debit amount according to the loan balance");
          
                  }
            completeStatus="Complete";
             
                  }

            return repaymentability;

            }

            private boolean processGeneralTransaction(){

            return post.generalPosting(debitS(), creditS());

            }

   
            
//            class ProcessLoanRepayment extends SwingWorker<Void, Void> {
//
//       
//
//        @Override
//        protected Void doInBackground() throws Exception {
//             if(post.accountsAreFineLR(debitS(), creditS())){
//
//             post.loanRepayments(debitS(), creditS(),PostingEntryWindow.this);
//
//
//            }
//             return null;
//        }
//      
//       
//       
//    }
            class ProcessLoanRepaymentAccrual extends SwingWorker<Void, Void> {

       

        @Override
        protected Void doInBackground() throws Exception {
             if(post.accountsAreFineLR(debitS(), creditS())){

//             post.loanRepaymentsAccrued(debitS(), creditS());


            }
             return null;
        }
      
       
       
    }
            
            
//            private boolean processLoanRepayment(){
//            boolean confirm=false;
//
//            if(post.accountsAreFineLR(debitS(), creditS())){
//
//
//
//            confirm= post.loanRepayments(debitS(), creditS());
//
//
//            }else{JOptionPane.showMessageDialog(this, "Only Customer and Loan Portfolio accounts are Allowed");}
//
//            return confirm; 
//
//
//            }
            
             
//            private boolean processLoanRepaymentNew(){
//            boolean confirm=false;
//
//            if(post.accountsAreFineLR(debitS(), creditS())){
//
//            YearMonth theStartDateObject=YearMonth.parse(fmt.forDatabaseWithFullYearBeginningWithDate(sdf.format(new Date(System.currentTimeMillis()))).substring(0, 7));     
//             List theOtherDetails=new ArrayList();
//        theOtherDetails.add(completeStatus);
//        theOtherDetails.add(jTFTrnSqNo.getText());
//        theOtherDetails.add(theStartDateObject);
//        theOtherDetails.add(closingNotes);
//            confirm= post.loanRepaymentsNew(debitS(), creditS(),loanPaymentOrder,theOtherDetails);
//
//
//            }else{JOptionPane.showMessageDialog(this, "Only Customer and Loan Portfolio accounts are Allowed");}
//
//            return confirm; 
//
//
//            }
            
//            private boolean processSavings(){
//           
//           return post.savingsPosting(debitS(), creditS());
//         
//
//            }
            
//            private boolean processSavings2(){
//                
//                
//                 SwingWorker<Void,Void> postTheEntry = new SwingWorker() {
//        @Override
//        protected Object doInBackground() throws Exception {
//
//        dbq.captureSavingsIndividual(creditS(),PostingEntryWindow.this);
//        
//        return null;
//        }};
//
//        postTheEntry.execute();
//           
//           return post.savingsPosting(debitS(), creditS());
//         
//
//            }
            
//            
//            
//private boolean processSalary(){
//
//         return post.salaryPosting(debitS(), creditS());
//
//}
//            private boolean processWithdraw(){
//                boolean withdraw=false;
//               Double totalWidrawChargesIn=0.0;Double runninBal=parseDouble(dbq.accountBalance(fmt.formatAccountWithSeperators(debitS().get(0).toString()),debitS().get(4).toString())); 
//                
//               totalWidrawChargesIn=parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "withDrawCharges.txt")))+parseDouble(debitS().get(5).toString());
////               JOptionPane.showMessageDialog(this, runninBal);
//if(runninBal<parseDouble(amountFieldDebit1.getValue().toString())){
//
//Object[] optionsx = {"Yes",  "No"};
//    int nx = JOptionPane.showOptionDialog(this,  "The Account Balance is NOT enough!!!\n"+"Do you want to  continue ?",
//    "CHECK ACCOUNT BALANCE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsx, optionsx[0]);
//    if(nx==JOptionPane.YES_OPTION){
//        if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"))==15){
//                if(runninBal>=totalWidrawChargesIn){
//                
//                 withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                 
//                }else{
//             JOptionPane.showMessageDialog(this, "The balance is not enough to cover withdraw Charges");
//                withdraw= false;
//                }
//                }else{
//                
//             withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                }
//    }
//    else if (nx==JOptionPane.NO_OPTION){    withdraw= false;}
//
//
//
//}else{
//
// if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"))==15){
//                if(runninBal>=totalWidrawChargesIn){
//                
//                 withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                }else{
//             JOptionPane.showMessageDialog(this, "The balance is not enough to cover withdraw Charges");
//                withdraw= false;
//                }
//                }else{
//                
//             withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                }
//
//
//
//}
//   return withdraw;
//            }
//
// private boolean processWithdraw2(){
//     
//                boolean withdraw=false;
//                
//               Double totalWidrawChargesIn=0.0;Double runninBal=parseDouble(dbq.accountBalance(fmt.formatAccountWithSeperators(debitS().get(0).toString()),debitS().get(4).toString())); 
//                
//               totalWidrawChargesIn=parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "withDrawCharges.txt")))+parseDouble(debitS().get(5).toString());
////               JOptionPane.showMessageDialog(this, runninBal);
//if(runninBal<parseDouble(amountFieldDebit1.getValue().toString())){
//
//Object[] optionsx = {"Yes",  "No"};
//    int nx = JOptionPane.showOptionDialog(this,  "The Account Balance is NOT enough!!!\n"+"Do you want to  continue ?",
//    "CHECK ACCOUNT BALANCE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsx, optionsx[0]);
//    if(nx==JOptionPane.YES_OPTION){
//        if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"))==15){
//                if(runninBal>=totalWidrawChargesIn){
////            JOptionPane.showMessageDialog(this, "in1");
//                  dbq.reduceSavings(debitS());
//                  
//                 withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                }else{
//             JOptionPane.showMessageDialog(this, "The balance is not enough to cover withdraw Charges");
//                withdraw= false;
//                }
//                }else{
//                
////               JOptionPane.showMessageDialog(this, "in2");
//                 dbq.reduceSavings(debitS());
//             withdraw= post.cashWithdrawPosting(debitS(), creditS());
//             
//                }
//    }
//    else if (nx==JOptionPane.NO_OPTION){    withdraw= false;}
//
//
//
//}else{
//
// if(fios.intFileReader(fios.createFileName("persistence", "interestAccount", "withDrawChargesSet.txt"))==15){
//                if(runninBal>=totalWidrawChargesIn){
////                    JOptionPane.showMessageDialog(this, "in3");       
//                 dbq.reduceSavings(debitS());
//                 withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                }else{
//             JOptionPane.showMessageDialog(this, "The balance is not enough to cover withdraw Charges");
//                withdraw= false;
//                }
//                }else{
////            JOptionPane.showMessageDialog(this, "in4");
//                 dbq.reduceSavings(debitS());
//             withdraw= post.cashWithdrawPosting(debitS(), creditS());
//                }
//
//
//
//}
//   return withdraw;
//            }
//
//            private boolean processLoanDisbursement(){
//            return post.loanDisbursement(debitS(), creditS());
//
//            }
//
//            private boolean processLoanWriteOffs(){
//            return post.loanWriteOffs(debitS(), creditS());
//
//            }
//            private boolean processLoanResheduling(){
//
//            return post.loanResheduling(debitS(), creditS());
//            }
//            private boolean processLoanTopUps(){
//
//            return post.loanTopUps(debitS(), creditS());
//            }
//            private boolean processLoanCancellation(){
//            return post.loanCancellation(debitS(), creditS());
//            }
//            private boolean processRegularCapital(){
//
//
//            boolean confirm=false;Double D=parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt")));
//
//            Integer ps=365;
//
//            fios.intFileWriterReplace(fios.createFileName("sharesAvailable","shareValues", "usedWindow"+fmt.formatAccountWithSeperators(debitS().get(0).toString())+".txt"),ps.toString());
//
//            if(post.accountsAreFine(debitS(), creditS())){
//
//            if(!(D==1.0)){
//
//            confirm= post.regularShareContribution(debitS(), creditS());
//
//            }else{JOptionPane.showMessageDialog(this, "First Set the Share Price!!");}
//            }else{JOptionPane.showMessageDialog(this, "Only Customer and Capital accounts are Allowed");}
//            return confirm;  
//
//
//            }
//            private boolean processRegularCapitalWithCharges(){
//
//            return post.regularShareContributionWithCharges(debitS(), creditS());
//
//            }
//            private boolean processCapital(){
//
//            return post.oneTimeShareContribution(debitS(), creditS());
//            }
//            private boolean processBankToCash(){
//            return post.bankToCash(debitS(), creditS());
//
//            }
//            private boolean processCashToBank(){
//            return post.cashToBank(debitS(), creditS());
//
//            }
//            private boolean processCharges(){
//            return post.charges(debitS(), creditS());  
//            }
//            private boolean processInsurance(){
//
//            return post.insurance(debitS(), creditS());  
//            }
//
//            private boolean processDecapitalisation(){
//            boolean confirm=false;Double D=parseDouble(fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt")));
//
//            Integer ps=365;
//
//            fios.intFileWriterReplace(fios.createFileName("sharesAvailable","shareValues", "usedWindow"+fmt.formatAccountWithSeperators(creditS().get(0).toString())+".txt"),ps.toString());
//            if(post.accountsAreFine(debitS(), creditS())){
//
//            if(!(D==1.0)){
//            if(post.isReducableCapital(debitS(), creditS())){
//
//            confirm=post.decapitalise(debitS(), creditS());
//
//
//            }else{JOptionPane.showMessageDialog(this, "Either Value Or Number of Shares is greater than the Available");}
//            }else{JOptionPane.showMessageDialog(this, " First Set the Share Price!!");}
//            }else{JOptionPane.showMessageDialog(this, "Only Customer and Capital accounts are Allowed");}
//            return confirm;
//            }
//
//            private void updateDebitFields(String accountNumber){
////JOptionPane.showMessageDialog(this, accountNumber);
//            debitAccountField.setValue(fmt.putSeparatorsOnNormaAccount(accountNumber));
//            if(ancdb.testTable("BSANCA"+accountNumber)==true){
//            if(ancdb.accountStatus(accountNumber).equals("Active")){
//
//            position=  dbq. updateTransactionDetails(jTable2,debitAccountName,accountNumber);
//            if(parseInt(fmt.getMasterAccountCode(this.getDrAccountNumber()))>=5020000&&parseInt(fmt.getMasterAccountCode(this.getDrAccountNumber()))<=5029999){
//
//            dbq.updateSharesPart(jFormattedTextField3S,jFormattedTextField3S3,accountNumber);
//
//
//            }else{
//
//            jFormattedTextField3S.setText("");
//            jFormattedTextField3S3.setValue(null);
//            }
//
//            }else{
//
//            JOptionPane.showMessageDialog(rootPane, "ACCOUNT NOT ACTIVE");  
//
//            }
//
//            }
//
//
//            }
//
//
//            private void updateCreditFields(String accountNumber){
//
//            creditAccountField.setValue(fmt.putSeparatorsOnNormaAccount(accountNumber));
//
//            if(ancdb.testTable("BSANCA"+accountNumber)==true){
//
//            if(ancdb.accountStatus(accountNumber).equals("Active")){
//
//            position= dbq.updateTransactionDetails(jTable2,creditAccountName,accountNumber);
//
//            if(parseInt(fmt.getMasterAccountCode(this.getCrAccountNumber()))>=5020000&&parseInt(fmt.getMasterAccountCode(this.getCrAccountNumber()))<=5029999){
//
//            dbq. updateSharesPart(jFormattedTextField3S,jFormattedTextField3S3,accountNumber);
//
//
//            }else{
//
//            jFormattedTextField3S.setText("");
//            jFormattedTextField3S3.setValue(null);
//            }
//
//            }else{
//
//            JOptionPane.showMessageDialog(rootPane, "ACCOUNT NOT ACTIVE");  
//
//            }
//
//
//            }
//
//
//            }
//            private void populateLoanRepayDetails(String accountNumber){
//
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))>=5020000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))<=5029999){
//            if(!loan.loanExists(accountNumber)){
//
//            JOptionPane.showMessageDialog(this, dbq.AccountName(accountNumber).split("\\s")[0]+" "+"Has no running loan");
//            jTextField3.setText("");
//            creditNarration1.setText(""); 
//            amountFieldDebit1.setValue(null);
//            amountCredit.setValue(null);
//            }else{   
//            jTextField3.setText("Loan Payment");
//            creditNarration1.setText(dbq.AccountName(accountNumber).split("\\s")[0]+"'s"+" "+"Loan Payment"); 
//            amountFieldDebit1.setValue(parseDouble(loan.currentInstalmentDue(accountNumber).replaceAll("[,]", "")));
//            amountCredit.setValue(parseDouble(loan.currentInstalmentDue(accountNumber).replaceAll("[,]", "")));
//            }
//            }}
//
//            private void populateCapRDetails(String accountNumber){
//
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))>=5020000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))<=5029999){
//
//            jTextField3.setText(fmt.month(cal.get(GregorianCalendar.MONTH))+" "+"Shares Contribution");
//            creditNarration1.setText(fmt.month(cal.get(GregorianCalendar.MONTH))+" "+dbq.AccountName(accountNumber).split("\\s")[0]+"'s"+" "+"Shares Contribution"); 
//            amountFieldDebit1.setValue(parseDouble( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt")).replaceAll("[,]", "")));
//            amountCredit.setValue(parseDouble( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))));
//
//            }
//
//            }
//            private void populateDCapDetails(String accountNumber){
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))>=5020000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))<=5029999){
//
//            jTextField3.setText(dbq.AccountName(accountNumber).split("\\s")[0]+"'s"+" "+"Decapitalisation");
//            creditNarration1.setText("Decapitalisation"); 
//            amountFieldDebit1.setValue(parseDouble( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt"))));
//            amountCredit.setValue(parseDouble( fios.stringFileReader(fios.createFileName("persistence", "interestAccount", "ActualSharePrice.txt")).replaceAll("[,]", "")));
//
//            }
//
//
//            }
//
//
//            private void populateSavingsDetails(String accountNumber){
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))>=5020000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))<=5029999){
//
//            jTextField3.setText(dbq.AccountName(accountNumber).split("\\s")[0]+"'s"+" "+"Savings"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//
//            creditNarration1.setText("Savings"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//            amountFieldDebit1.setValue( parseDouble(dbq.lastSavings(accountNumber)));
//            amountCredit.setValue( parseDouble(dbq.lastSavings(accountNumber))); 
//            }
//
//
//            }
//            
//           private void  populateSalaryDetails(String accountNumber){
//           
//             if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))>=5020000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))<=5029999){
//
//            jTextField3.setText(dbq.AccountName(accountNumber).split("\\s")[0]+"'s"+" "+"Salary Payment"+" "+"For"+" "+fmt.month(cal.get(GregorianCalendar.MONTH))+" "+cal.get(GregorianCalendar.YEAR));
//
//            creditNarration1.setText("Salary Payment"+" "+"For"+" "+fmt.month(cal.get(GregorianCalendar.MONTH))+" "+cal.get(GregorianCalendar.YEAR)); 
//           
//            amountFieldDebit1.setValue( parseDouble(dbq.lastSalaryPay(accountNumber)));
//            
//            amountCredit.setValue( parseDouble(dbq.lastSalaryPay(accountNumber))); 
//            }
//           
//           
//           }
//            private void populateWithdrawsDetails(String accountNumber){
//                
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))>=5020000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(accountNumber)))<=5029999){
//
//            creditNarration1.setText(dbq.AccountName(accountNumber).split("\\s")[0]+"'s"+" "+"Cash Withdraw"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//
//            jTextField3.setText("Cash Withdraw"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//            amountFieldDebit1.setValue( parseDouble(dbq.lastSavings(accountNumber)));
//            amountCredit.setValue( parseDouble(dbq.lastSavings(accountNumber))); 
//            }}
//            private void populateBankWithdraw(String bankAccountNumber,String cashAccountNumber){
//
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(bankAccountNumber)))>=1220000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(bankAccountNumber)))<=1239999&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))>=1220000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))<=1239999){
//
//            updateDebitFields(cashAccountNumber);
//            this.updateCreditFields(bankAccountNumber);
//
//            jTextField3.setText("Cash from Bank"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//            creditNarration1.setText("Cash Withdraw"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//            amountFieldDebit1.setValue(parseDouble( dbq.accountBalance(bankAccountNumber,sdf.format(new Date(System.currentTimeMillis())))));
//            amountCredit.setValue(parseDouble( dbq.accountBalance(bankAccountNumber,sdf.format(new Date(System.currentTimeMillis())))));
//
//            } 
//            }
//            private void populateCashForSavings(String cashAccountNumber){
//
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))>=1220000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))<=1239999){
//
//            updateDebitFields(cashAccountNumber);
//
//            } 
//
//            }
//            
//           private void populateEmployeeSalo(String cashAccountNumber){
//           
//            updateDebitFields(cashAccountNumber);
//           
//           }
//            private void populateCashForWithdraw(String cashAccountNumber){
//
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))>=1220000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))<=1239999){
//
//            updateCreditFields(cashAccountNumber);
//
//            } 
//
//            }
//
//            private void populateBankDeposit(String bankAccountNumber,String cashAccountNumber){
//
//            if(parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(bankAccountNumber)))>=1220000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(bankAccountNumber)))<=1239999&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))>=1220000&&parseInt(fmt.getMasterAccountCode(fmt.putSeparatorsOnNormaAccount(cashAccountNumber)))<=1239999){
//
//            updateDebitFields(bankAccountNumber);
//            this.updateCreditFields(cashAccountNumber);
//
//            jTextField3.setText("Cash Deposit"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//            creditNarration1.setText("Cash taken to Bank"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//            amountFieldDebit1.setValue(parseDouble( dbq.accountBalance(cashAccountNumber,sdf.format(new Date(System.currentTimeMillis())))));
//            amountCredit.setValue(parseDouble( dbq.accountBalance(cashAccountNumber,sdf.format(new Date(System.currentTimeMillis())))));      
//            } 
//            
//            }
                @Override
            public String batchCode(){
//           JOptionPane.showMessageDialog(this, dbq.batchNumber()+"");
return dbq.batchNumber()+""; 
            }
//            
//             private void  populateExpense (String expenseAccountNumber,String cashAccountNumber){
//         
//           updateDebitFields(expenseAccountNumber);
//      this.updateCreditFields(cashAccountNumber);
//   switch(dbq.AccountName(expenseAccountNumber)){ 
//
//        case "Pay Electricty":  
//        jTextField3.setText("Electricty Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Electricty Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastElectricPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastElectricPay(expenseAccountNumber)));      
//        break;
//         case "Pay Air Time Allowance":  
//        jTextField3.setText("Air Time Allowance Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Air Time Allowance Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastAirTimePay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastAirTimePay(expenseAccountNumber)));      
//        break;
//        
//        case "Pay Lunch Allowance":  
//        jTextField3.setText("Lunch Allowance Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Lunch Allowance Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastLunchAllPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastLunchAllPay(expenseAccountNumber)));      
//        break;
//        case "Pay Water":  
//        jTextField3.setText("Water Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Water Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastWaterPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastWaterPay(expenseAccountNumber)));      
//        break;
//            case "Pay News Papers and Periodicals":  
//        jTextField3.setText("News Papers Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("News Papers Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastNewsPapersPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastNewsPapersPay(expenseAccountNumber)));      
//        break;
//               case "Pay Telphone and Internet":  
//        jTextField3.setText("Telphone and Internet Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Telphone and Internet Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastTeleAndNetPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastTeleAndNetPay(expenseAccountNumber)));      
//        break;   
//                
//               case "Pay Licenses and Permits":  
//        jTextField3.setText("Licenses and Permits Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Licenses and Permits Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastLicenseAndPermitPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastLicenseAndPermitPay(expenseAccountNumber)));      
//        break;   
//             case "Pay Stationary and Photocopying":  
//        jTextField3.setText("Stationary and Photocopying Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Stationary Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastStationaryPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastStationaryPay(expenseAccountNumber)));      
//        break;     
//           case "Pay Legal Expenses":  
//        jTextField3.setText("Legal Expenses Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Legal Expenses Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastLegalExpePay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastLegalExpePay(expenseAccountNumber)));      
//        break;    
//               
//            case "Pay Bank Charges":  
//        jTextField3.setText("Bank Charges Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Bank Charges Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastBankChargesPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastBankChargesPay(expenseAccountNumber)));      
//        break;      
//              case "Pay Financing Expense":  
//        jTextField3.setText("Financing Expense Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Financing Expense Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastFinancingExpensePay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastFinancingExpensePay(expenseAccountNumber)));      
//        break;  
//                      case "Pay Commission Payable":  
//        jTextField3.setText("Commission Payable Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Commission Payable Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastCommissionPayablePay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastCommissionPayablePay(expenseAccountNumber)));      
//        break; 
//                           case "Pay Interest Payable":  
//        jTextField3.setText("Interest Payable Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Interest Payable Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastInterestPayablePay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastInterestPayablePay(expenseAccountNumber)));      
//        break; 
//                      case "Pay Transport Expense":  
//        jTextField3.setText("Transport  Expense Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Transport  Expense Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastTransportPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastTransportPay(expenseAccountNumber)));      
//        break;            
//                      case "Pay Bad Loans Written Off":  
//        jTextField3.setText("Bad Loans Written off Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Bad Loans Written off Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastBadLoansWrittenOffPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastBadLoansWrittenOffPay(expenseAccountNumber)));      
//        break;     
//            
//                              case "Pay Provision for Bad Debts":  
//        jTextField3.setText("Provision for Bad Debts Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Provision for Bad Debts Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastProvisionForBadDebtsPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastProvisionForBadDebtsPay(expenseAccountNumber)));      
//        break;  
//                                  case "Pay Provision for Depreciation":  
//        jTextField3.setText("Provision for Depreciation Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Provision for Depreciation Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastProvisionForDepreciationPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastProvisionForDepreciationPay(expenseAccountNumber)));      
//        break;  
//                          case "Pay Entertainment and Refreshment":  
//        jTextField3.setText("Entertainment and Refreshment Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Entertainment and Refreshment Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastEntertainAndRefreshPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastEntertainAndRefreshPay(expenseAccountNumber)));      
//        break;               
//        case "Pay Employees Salary":  
//        jTextField3.setText("Salary Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Salary Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastSalaryPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastSalaryPay(cashAccountNumber)));      
//        break;
//            
//            case "Pay Board Sitting Allowance":  
//        jTextField3.setText("Board Sitting Allowance Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Board Sitting Allowance Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastBoardMemberAllance(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastBoardMemberAllance(cashAccountNumber)));      
//        break;
//                case "Pay Nssf":  
//        jTextField3.setText("Nssf Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Nssf Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastNssf(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastNssf(cashAccountNumber)));      
//        break;
//                      case "Pay Payee":  
//        jTextField3.setText("Payee Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Payee Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastPayee(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastPayee(cashAccountNumber)));      
//        break;
//        case "Pay Employees Allowancies":  
//        jTextField3.setText("Employees Allowancies Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Employees Allowancies Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastAllowancePay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastAllowancePay(cashAccountNumber)));      
//        break;
//              case "Pay Rent":  
//        jTextField3.setText("Rent Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Rent Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastRentPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastRentPay(cashAccountNumber)));      
//        break;
//                    case "Pay Taxes":  
//        jTextField3.setText("Tax Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Tax Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastTaxesPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastTaxesPay(cashAccountNumber)));      
//        break;
//                                   case "Pay Other Expenses":  
//        jTextField3.setText("Other Expenses Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis())));
//        creditNarration1.setText("Other Expenses Payment"+" "+"DD"+" "+sdf.format(new Date(System.currentTimeMillis()))); 
//        amountFieldDebit1.setValue(parseDouble( dbq.lastOtherExpensesPay(expenseAccountNumber)));
//        amountCredit.setValue(parseDouble( dbq.lastOtherExpensesPay(cashAccountNumber)));      
//        break;
//   } 
//  
//   }
             
             private void sortTable(JTable table,JTextField textField){

   
    
TableRowSorter<TableModel> rowSorter  = new TableRowSorter<>(table.getModel());
                     
                      table.setRowSorter(rowSorter);
                     textField.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = textField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = textField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    

}
             
         public void reactToDate(){  
        
               valueDate1.getDocument().addDocumentListener(new DocumentListener(){
                   @Override
                   public void insertUpdate(DocumentEvent e) {
                       
                   }

                   @Override
                   public void removeUpdate(DocumentEvent e) {
                          
        if (valueDate1.getText().matches("\\d{4}-\\d{2}-\\d{2}")) {
            


} 
                   }

                   @Override
                   public void changedUpdate(DocumentEvent e) {
                      
                   }
               
               
               
               });
         }
         
         
     private synchronized boolean uploadSavingsData(){
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("Savings");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField17.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 
 
 }     
         
 private synchronized boolean uploadSharesData(){
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("SHARES AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("Capitalisation");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField16.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 }     
 
 
  
 private synchronized boolean uploadDecapitalisationShares(){
 
  boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("SHARES AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("Decaptalisation");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField22.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 }   
 
 
            private synchronized boolean uploadOtherSavingsData(){
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("SHARES AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("DepositPartPay");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField18.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 
 
 
 }     
      
            
         private synchronized boolean  uploanPostingAllTxns(){
           
  boolean updaloadsuccessful=false;  
  
  String batch=null,DateFetched=null,Narration=null,txnType=null,txnCode=null,officerInCharge=null;
  
  
  double amount = 0.0,debitAmnt=0.0,creditAmnt=0.0,tenure=0,interestRate=0.0,periodType=0,interestRegime=0;
  

     List debit=null,credit=null;  
     
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null; XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;
           int spreadSheets=0;
        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);
        workbook=new XSSFWorkbook(fis);

        spreadSheets=workbook.getNumberOfSheets();
          
    
        
        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        updaloadsuccessful=false;
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        updaloadsuccessful=false;
        }
        
        int n=0;
        List    amortDetailsx =null,amortDetailsx1 =null;      
        if(!workbook.getWorkbookType().getExtension().equalsIgnoreCase("XLSX")){
        
        JOptionPane.showMessageDialog(this, "The Excel Format Selected Is NOT Supported!!\n\n Use type-xlsx");
        
        updaloadsuccessful=false;
        
        }else{
        
        
        while(n<spreadSheets){
        
        spreadSheet=workbook.getSheetAt(n);

        Iterator <Row>   rowIterator=spreadSheet.iterator();
         
        int t1=0;
        
        while(rowIterator.hasNext()){
           
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        

 
        int t=0; 
            if(t1>0){

        
        while(cellIterator.hasNext()){
//            
//JOptionPane.showMessageDialog(this, t); 
//
//JOptionPane.showMessageDialog(this, cellIterator.next().toString());

        batch=this.batchCode();

        if(t==0){

        DateFetched=   cellIterator.next().toString().trim();

        }


        if(t==1){

        Narration=       cellIterator.next().toString().trim();
        }
        if(t==2){

        txnType=       cellIterator.next().toString().trim();
        }
        if(t==3){

        txnCode=       cellIterator.next().toString().trim();
        }
        if(t==4){

        debitAmnt=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==5){

        creditAmnt=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==6){

        tenure=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==7){

        interestRate=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==8){

        periodType=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==9){

        officerInCharge=       cellIterator.next().toString().trim();
        }
        if(t==10){

        interestRegime=       cellIterator.next().getNumericCellValue(); 
        }
 
//JOptionPane.showMessageDialog(this, CraccountNumber);
//       JOptionPane.showMessageDialog(this, amount);

    
t++;
        }  
  if(debitAmnt>0){
  
  amount=debitAmnt;
  
  }else if(creditAmnt>0){
  
    amount=creditAmnt;
  }else{
    amount=0.0;
  
  }
           
        
//      JOptionPane.showMessageDialog(this, "Date: "+DateFetched+"\nNarration:"+Narration+"\nTrnTyp:"+txnType+"\nTrnCode:"+txnCode+"\nDebitAmt:"+debitAmnt+"\nCreditAmt:"+creditAmnt+"\nTenure:"+tenure+"\nInterestRate:"+interestRate+"\nPeriodTyp:"+periodType+"\nOfficerInCharge:"+officerInCharge+"\nInterestRegime:"+interestRegime+"\nAmount:"+amount);
        
//JOptionPane.showMessageDialog(this, txnType);
     
        
 
        }
 try {
                wait(3000);
            } catch (InterruptedException ex) {
                Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
            } 
     
t1++;
        }
        
       
        n++;
        }
updaloadsuccessful=true;
        }
        }
  JOptionPane.showMessageDialog(this, "The New System Date is:"+DateFetched+"\n\nFor further processing, please logout and change the computer date to match with the system date;");
  fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "activeDate3.txt"),DateFetched);

 fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "activeDate.txt"),DateFetched);
 
  fios.stringFileWriter( fios.createFileName("logOut", "completeShutDown", "activeDate2.txt"),DateFetched);
 
  fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "open_day.txt"),DateFetched);
  
  fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "valueDate.txt"),DateFetched);
  
 fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "trn_sequeanceNumber.txt"),"0001");
 
return updaloadsuccessful;
       
       }    
         
//    private synchronized boolean     uploadBulkPostTxns(){
//    
//    boolean updaloadsuccessful=false;  
//  dbq.cleanBulkFirst();
//  String batch=null,DateFetched=null,Narration=null,txnType=null,txnCode=null,officerInCharge=null;
//  
//  double amount = 0.0,debitAmnt=0.0,creditAmnt=0.0,tenure=0,interestRate=0.0,periodType=0,interestRegime=0,runnngBalance=0,previousBal=0;
//
//     List debit=null,credit=null;   
//        JFileChooser fileChooser = new JFileChooser();
//
//        int returnValue = fileChooser.showOpenDialog(null);
//
//        FileInputStream fis=null;File selectedFile=null; XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;
//           int spreadSheets=0;
//        if (returnValue == JFileChooser.APPROVE_OPTION)
//        {
//        selectedFile = fileChooser.getSelectedFile();
//
//        try {
//        //               String     filename = selectedFile.getAbsolutePath();
//
//        fis=new FileInputStream(selectedFile);
//        workbook=new XSSFWorkbook(fis);
//
//        spreadSheets=workbook.getNumberOfSheets();
//          
//    
//        
//        } catch (FileNotFoundException ex) {
//
//        JOptionPane.showMessageDialog(this, ex.toString());
//        updaloadsuccessful=false;
//        } catch (IOException ex) {
//        JOptionPane.showMessageDialog(this, ex.toString());
//        updaloadsuccessful=false;
//        }
//        
//        int n=0;
//        List    amortDetailsx =null,amortDetailsx1 =null;      
//      
//    
//        
//        spreadSheet=workbook.getSheetAt(0);
//
//        Iterator <Row>   rowIterator=spreadSheet.iterator();
//         
//        int t1=0;
//        
//        while(rowIterator.hasNext()){
//           
//        row=(XSSFRow)rowIterator.next();
//
//        Iterator <Cell>  cellIterator=row.iterator();
//        
//
// 
//        int t=0; 
//            if(t1>0){
//
//        
//        while(cellIterator.hasNext()){
////            
////JOptionPane.showMessageDialog(this, t); 
////
////JOptionPane.showMessageDialog(this, cellIterator.next().toString());
//
//        batch=this.batchCode();
//
//        if(t==0){
//
//        DateFetched=   cellIterator.next().toString().trim();
//
//        }
//
//
//        if(t==1){
//
//        Narration=       cellIterator.next().toString().trim();
//        }
//        
//        if(t==2){
//
//        txnType=       cellIterator.next().toString().trim();
//        }
//        if(t==3){
//
//        txnCode=       cellIterator.next().toString().trim();
//        }
//        if(t==4){
//
//        debitAmnt=       cellIterator.next().getNumericCellValue(); 
//        }
//        if(t==5){
//
//        creditAmnt=       cellIterator.next().getNumericCellValue(); 
//        }
//        if(t==6){
//
//        tenure=       cellIterator.next().getNumericCellValue(); 
//        }
//        if(t==7){
//
//        interestRate=       cellIterator.next().getNumericCellValue(); 
//        }
//        if(t==8){
//             runnngBalance=       cellIterator.next().getNumericCellValue(); 
//        }
//        
//        
//      
//
//    
//t++;
//        }  
//  if(debitAmnt>0){
//  
//  amount=debitAmnt;
//  
//  }else if(creditAmnt>0){
//  
//    amount=creditAmnt;
//  }else{
//    amount=0.0;
//  
//  }
//            
//   periodType=       4; 
//        
//      
//
//        officerInCharge=  this.userId;
//      
//     
//
//        interestRegime=  2; 
//      
//        if(t1==1){
//        previousBal=runnngBalance;
//        
//        }else if(t1>1){
//        
// previousBal=(previousBal+debitAmnt-creditAmnt);  
//    
//        }
//        
//        JOptionPane.showMessageDialog(this, DateFetched);
//    List theBatchDetails=new ArrayList();
//    theBatchDetails.add(fmt.forDatabaseWithFullYearBeginningWithDate(DateFetched));
//    theBatchDetails.add(Narration);
//    theBatchDetails.add(txnType);
//    theBatchDetails.add(txnCode);
//    theBatchDetails.add(debitAmnt);
//    theBatchDetails.add(creditAmnt);
//    theBatchDetails.add(tenure);
//    theBatchDetails.add(interestRate);
//     theBatchDetails.add(interestRegime);
//     theBatchDetails.add(periodType);
//    theBatchDetails.add(previousBal);
//   
//   dbq. createRecordBulkUpload(theBatchDetails);
//   
//            }
//              
//        
//        t1++;
//        }
//        
//        
//        
//        
//        
//        }
//    
//    
//   return true; 
//    }
//    
    
    
    private synchronized boolean     uploadBulkCombo(){
    
    boolean updaloadsuccessful=false;  
  
  String batch=null,DateFetched=null,Narration=null,txnType="Deposit",txnCode=null,officerInCharge=null;
  
  double amount = 0.0,debitAmnt=0.0,creditAmnt=0.0,tenure=0,interestRate=0.0,periodType=0,interestRegime=0,runnngBalance=0;

     List debit=null,credit=null;   
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null; XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;
           int spreadSheets=0;
        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);
        workbook=new XSSFWorkbook(fis);

        spreadSheets=workbook.getNumberOfSheets();
          
    
        
        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        updaloadsuccessful=false;
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        updaloadsuccessful=false;
        }
        
        int n=0;
        List    amortDetailsx =null,amortDetailsx1 =null;      
        
       List txnTypes=new ArrayList();
    
        txnTypes.add("TXN TYPE");
        
        spreadSheet=workbook.getSheetAt(0);

        Iterator <Row>   rowIterator=spreadSheet.iterator();
         
        int t1=0;
        
        while(rowIterator.hasNext()){
//           JOptionPane.showMessageDialog(this, "Inq");
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        

 
        int t=0; 
            if(t1>0){

        
        while(cellIterator.hasNext()){
//JOptionPane.showMessageDialog(this, "In");

        batch=this.batchCode();

        if(t==0){

        DateFetched=   cellIterator.next().toString().trim();

        }


        if(t==1){

        Narration=       cellIterator.next().toString().trim();
        }
        
        if(t==2){

        txnType=       cellIterator.next().toString().trim();
        
//        JOptionPane.showMessageDialog(this, txnType);
        }
        if(t==3){

        txnCode=       cellIterator.next().toString().trim();
        }
        if(t==4){

        debitAmnt=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==5){

        creditAmnt=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==6){

        tenure=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==7){

        interestRate=       cellIterator.next().getNumericCellValue(); 
        }
        if(t==8){
             runnngBalance=       cellIterator.next().getNumericCellValue(); 
        }
        
        
        periodType=   4; 
        
      

        officerInCharge=      this.userId;
      
     

        interestRegime=   1; 
      

//  JOptionPane.showMessageDialog(this, txnType+"out");
if(!txnTypes.isEmpty()){
 if(!itemDoesNotExistCombo(txnTypes,txnType)){
// JOptionPane.showMessageDialog(this, txnType);
 txnTypes.add(txnType);
 }
}
    
t++;
        }  
        
        
      addToCombos(txnTypes);  
        
        
        
  if(debitAmnt>0){
  
  amount=debitAmnt;
  
  }else if(creditAmnt>0){
  
    amount=creditAmnt;
  }else{
    amount=0.0;
  
  }
            
           
            }
        
         t1++;
        }
        
        
        
        
        
        }
    
                
   return true; 
    }
    private boolean itemDoesNotExistCombo(List data,String item){
   int x=0;boolean there=false;
    while(x<data.size()){
    
        if(item.equalsIgnoreCase(data.get(x).toString())){
        there=true;
        break;
        }
    
    x++;
    }
    
    return there;
    }
    
    
     private void addToCombos(List txnTypes){
     
//     JOptionPane.showMessageDialog(this, txnTypes.size()+"");
    modelComboBox = new listComboModel(txnTypes);

    jComboBox68.setModel(modelComboBox);

     
     }
    
    
    
         
private synchronized boolean  uploanPostingAllTxns1(){

boolean postedSatus=false;

String periodSubType = null, 
        batch=null,
        DateFetched=null,
        loanOfficer=null,
        amortizationDate=null,
        Narration=null,
        txnType=null,
        txnCode=null,
        officerInCharge=null,
        DrAccountNumber=null,
        CrAccountNumber=null,
        tnxId=null;

double amount = 0.0,
        tenure=0,
        interestRate=0.0,
        periodType=0,
        interestRegime=0;

List debit = null;
        List credit = null;
                 
List<List>  d=new ArrayList();  


ListDataModel_11 original = (ListDataModel_11)jTable6.getModel();



List    amortDetailsx =null; List  amortDetailsx1=null;

    for (int targetRow = 0; targetRow < original.getRowCount()-1; targetRow++) {

    if(!original.getRow(targetRow).isEmpty()){

  int t=0;
    batch=this.batchCode();
//JOptionPane.showMessageDialog(rootPane, tenure);
    while(t<original.getRow(targetRow).size()){
        
 if(t==0){
     
 tnxId=      original.getRow(targetRow).get(0).toString().trim();
// JOptionPane.showMessageDialog(this, tnxId);
 }


    if(t==1){

    txnType=       original.getRow(targetRow).get(1).toString().trim();
//JOptionPane.showMessageDialog(this, txnType);
    }

    if(t==2){

    txnCode=        original.getRow(targetRow).get(2).toString().trim();
// JOptionPane.showMessageDialog(this, txnCode);
 
    }
        
        if(t==3){
         
        DrAccountNumber= original.getRow(targetRow).get(3).toString().trim();
         
// JOptionPane.showMessageDialog(this, DrAccountNumber);
        }
        
        if(t==4){

        CrAccountNumber= original.getRow(targetRow).get(4).toString().trim();
// JOptionPane.showMessageDialog(this, CrAccountNumber);
        }
        
        if(t==5){


        Narration=       original.getRow(targetRow).get(5).toString().trim();
// JOptionPane.showMessageDialog(this, Narration);
        }
        if(t==6){
            
        amount=  parseDouble(original.getRow(targetRow).get(6).toString().trim().replace(",", " ").replaceAll("\\s+",""));
// JOptionPane.showMessageDialog(this, amount);
        }
        if(t==7){

                                 
        interestRate=       parseDouble(original.getRow(targetRow).get(7).toString().trim().replace(",", " ").replaceAll("\\s+",""));
// JOptionPane.showMessageDialog(this, interestRate);
        }
        if(t==8){
        tenure=       parseInt(original.getRow(targetRow).get(8).toString().trim().replace(",", " ").replaceAll("\\s+",""));
// JOptionPane.showMessageDialog(this, tenure);
        }
        if(t==9){

        DateFetched=      original.getRow(targetRow).get(9).toString().trim();
// JOptionPane.showMessageDialog(this, DateFetched);
        }
        
         if(t==10){

        loanOfficer=      original.getRow(targetRow).get(10).toString().trim();
// JOptionPane.showMessageDialog(this, loanOfficer);
        }
t++;
    }  }
//  JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt")));   
//   JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt")));   
//    JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim());   
    
    if(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+CrAccountNumber+this.userId+".txt")).equalsIgnoreCase("Yes")){
   
  switch(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt"))){
    
        case "Repayment Cycle":
         switch(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim()){

        
    case "DAYS":
         periodType= 1;
         periodSubType="DAYS";
        break;
     case "WEEKS":
         periodType= 2;
         
          periodSubType="WEEKS";
        break;
         case "FORTNIGHTS":
         periodType= 3;
        
          periodSubType="FORTNIGHTS";
        break;
         case "MONTHS":
         periodType= 4;
          
           periodSubType="MONTHS";
        break;
         case "QUARTERS":
         periodType=5;
         
          periodSubType="QUARTERS";
        break;
         case "HALF YEARS":
         periodType=6;
         
           periodSubType="HALF YEARS";
        break;
     case "YEARS":
         periodType=7;
            periodSubType="YEARS";
           
        break;
         case "BIENNIALS":
         periodType=8;
            periodSubType="BIENNIALS";
         
        break;
    
    
   
   
   
   
   
   
   }
        break;
        
    case "Daily":
         periodType= 1;
              periodSubType="DAYS";
         
        break;
     case "Weekly":
         periodType= 2;
           periodSubType="WEEKS";
              
        break;
         case "Fortnightly":
         periodType= 3;
          periodSubType="FORTNIGHTS";

        break;
         case "Monthly":
         periodType= 4;
                             periodSubType="MONTHS";

        break;
         case "Quaterly":
         periodType=5;
                               periodSubType="QUARTERS";

        break;
         case "Half Yearly":
         periodType=6;
                                periodSubType="HALF YEARS";

        break;
     case "Annually":
         periodType=7;
                                 periodSubType="YEARS";

        break;
         case "Biennially":
         periodType=8;
                                   periodSubType="BIENNIALS";
        break;
    
    }
   
    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+CrAccountNumber+this.userId+".txt"), "No");
   
   
   }else{
    
   
    
     switch(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim()){

        
    case "DAYS":
         periodType= 1;
              periodSubType="DAYS";
         
        break;
     case "WEEKS":
  periodSubType="WEEKS";
             
         periodType= 2;
        break;
         case "FORTNIGHTS":
         periodType= 3;
           periodSubType="FORTNIGHTS";
                   
        break;
         case "MONTHS":
         periodType= 4;
          periodSubType="MONTHS";
               
        break;
         case "QUARTERS":
         periodType=5;
                periodSubType="QUARTERS";
                     
        break;
         case "HALF YEARS":
         periodType=6;
           periodSubType="HALF YEARS";
       
        break;
     case "YEARS":
         periodType=7;
                          periodSubType="YEARS";
                       
        break;
         case "BIENNIALS":
         periodType=8;
            periodSubType="BIENNIALS";
        break;
    
    
   
   
   
   
   
   
   }
   
   
    
    
   }
       
        
        
        officerInCharge= this.userId;
        
//        JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "regimeSet"+CrAccountNumber+this.userId+".txt")));
//          JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "interestRegime"+CrAccountNumber+this.userId+".txt")));
//          JOptionPane.showMessageDialog(this, fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt")));
//        
     if(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "regimeSet"+CrAccountNumber+this.userId+".txt")).equalsIgnoreCase("Yes")){
        
       switch(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "interestRegime"+CrAccountNumber+this.userId+".txt"))){
       
           case "Interest Regime":
             switch (fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt"))) {
        case 1:
            interestRegime=1;
            break;
        case 2:
            interestRegime=2;
            break;
        case 3:
            interestRegime=3;
            break;
   
    }  
               
               
               
               break;
           case "Flat":
               
                   interestRegime=1; 
                   
               break;
               
           case "Reducing With Equal Period Instalments":
               
             
               
               interestRegime=3; 
               
               break;
           case "Reducing With Reducing Instalments":
               
                 interestRegime=2; 
                 
               break;
           




       
       
       } 
        
        
        
        
        
        
        
        
        }else{
        
    switch (fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt"))) {
        case 1:
            interestRegime=1;
            break;
        case 2:
            interestRegime=2;
            break;
        case 3:
            interestRegime=3;
            break;
   
    }
        }

     if(computeType.equalsIgnoreCase("Compound Interest")){
     compuM=2;
     
     }
    
amortizationDate=DateFetched;

 DateFetched=sdf.format(new Date(System.currentTimeMillis()));
 
 YearMonth theStartDateObject=null;
 
 if(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+tnxId+".txt")).equalsIgnoreCase("1")){
 
     
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+tnxId+".txt"), sdf.format(new Date(System.currentTimeMillis())));
     
   theStartDateObject=YearMonth.parse(fmt.forDatabaseWithFullYearBeginningWithDate(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+tnxId+".txt"))).substring(0, 7));     
 }else{
 
 theStartDateObject=YearMonth.parse(fmt.forDatabaseWithFullYearBeginningWithDate(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", "postedLoanPayment"+tnxId+".txt"))).substring(0, 7));     
 }
//JOptionPane.showMessageDialog(this, "batch="+batch);
//JOptionPane.showMessageDialog(this, "tnxId="+tnxId);
//JOptionPane.showMessageDialog(this, "txnType="+txnType);
//JOptionPane.showMessageDialog(this, "txnCode="+txnCode);
//JOptionPane.showMessageDialog(this, "DrAccountNumber="+DrAccountNumber);
//JOptionPane.showMessageDialog(this, "CrAccountNumber="+CrAccountNumber);
//JOptionPane.showMessageDialog(this, "Narration="+Narration);
//JOptionPane.showMessageDialog(this, "amount="+amount);
//JOptionPane.showMessageDialog(this, "interestRate="+interestRate);
//
//
//JOptionPane.showMessageDialog(this, "tenure="+tenure);
//JOptionPane.showMessageDialog(this, "DateFetched="+DateFetched);
//JOptionPane.showMessageDialog(this, "periodType="+periodType);
//
//
//
//JOptionPane.showMessageDialog(this, "periodSubType="+periodSubType);
//JOptionPane.showMessageDialog(this, "officerInCharge="+officerInCharge);
//JOptionPane.showMessageDialog(this,"interestRegime="+interestRegime);
//
//
//
//JOptionPane.showMessageDialog(this, "amortizationDate="+amortizationDate);
//JOptionPane.showMessageDialog(this, "DateFetched="+DateFetched);
//JOptionPane.showMessageDialog(this, "theStartDateObject="+theStartDateObject);
////YearMonth thePostedDate=(YearMonth)theDetails.get(16);
//
//JOptionPane.showMessageDialog(this, interestRate);
//JOptionPane.showMessageDialog(this, amortizationDate);
//





Amortization loanHelper=new Amortization(userId);


if(txnType.trim().equalsIgnoreCase("NewLoanFixed")){
    
    switch(periodSubType){
        
case "DAYS":
 interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 1)));
         
        break;
     case "WEEKS":
  interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 2)));
        break;
         case "FORTNIGHTS":
      interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 3)));   
                   
        break;
         case "MONTHS":
       interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 4)));
               
        break;
         case "QUARTERS":
         interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 5)));
                     
        break;
         case "HALF YEARS":
        interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 6)));
       
        break;
     case "YEARS":
        interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 7)));
                       
        break;
         case "BIENNIALS":
         interestRate=(  (interestRate*100)/ (amount*loanHelper.time(tenure, 8)));
        break;
    
    
    }


}





 
 
List postedDetails=new ArrayList();

postedDetails.add(batch);//Batch Code batch 0

postedDetails.add(tnxId);//Transanction Code  tnxId 1

postedDetails.add(txnType);//Txn Type    txnType      2

postedDetails.add(txnCode);//Txn Code   txnCode  3

postedDetails.add(DrAccountNumber);//DrAccountNumber  4

postedDetails.add(CrAccountNumber);//CrAccountNumber   5

postedDetails.add(Narration);//Narration  6

postedDetails.add(amount);//amount  7

postedDetails.add(interestRate);//interestRate  8

postedDetails.add(tenure);//tenure    9

postedDetails.add(DateFetched);//DateFetched   10

postedDetails.add(periodType);//periodType   11

postedDetails.add(periodSubType);//periodSubType  12

postedDetails.add(officerInCharge);//userId    13

postedDetails.add(interestRegime);//interest Regime   14

postedDetails.add(amortizationDate);//amortizationDate  15

postedDetails.add(theStartDateObject);//periodSubType  16


postedDetails.add(loanOfficer);//loansOfficer  17

if(!jTextField25.getText().equalsIgnoreCase("")){

thePeriodSet=parseInt(jTextField25.getText());
}
postedDetails.add(thePeriodSet);//thePeriodSet  18
//JOptionPane.showMessageDialog(this, "compuM"+compuM);
postedDetails.add(compuM);//thePeriodSet  18


 BatchPosting batchPost =new BatchPosting(PostingEntryWindow.this,userId);
 
BatchPosting2 batchPost2 =new BatchPosting2(PostingEntryWindow.this,userId);

postedSatus=batchPost.fromMainPost(postedDetails,amortDetails,jTextField66,PostingEntryWindow.this);

postedSatus=batchPost2.fromMainPost(postedDetails,amortDetails,jTextField66,PostingEntryWindow.this);

  

 
    }  
   return postedSatus;
       }   



public boolean postBulk(){
boolean feedBack=false;
if(jCheckBox38.isSelected()){

feedBack=uploanPostingAllTxns3();//savings

}else if(jCheckBox14.isSelected()){//Savings withdraw

    feedBack=uploanPostingAllTxns4();


}else if(jCheckBox15.isSelected()){//loanpayment

 feedBack=uploanPostingAllTxns4();

}else if(jCheckBox16.isSelected()){//capitalisaton

 feedBack=uploanPostingAllTxns4();

}else if(jCheckBox30.isSelected()){//decapitalisation

feedBack=uploanPostingAllTxns3();

}else if(jCheckBox33.isSelected()){//upload deposit

feedBack=uploanPostingAllTxns3();

}else if(jCheckBox35.isSelected()){

 feedBack=uploanPostingAllTxns4();
}else if(jCheckBox36.isSelected()){

 feedBack=uploanPostingAllTxns3();
 
}else if(jCheckBox37.isSelected()){

 feedBack=uploanPostingAllTxns3();
 
}


return feedBack;
}






private synchronized boolean  uploanPostingAllTxns3(){



String periodSubType = null,creditAccountName=null, batch=null,DateFetched=null,amortizationDate=null,Narration=null,txnType=null,txnCode=null,officerInCharge=null,DrAccountNumber=null,CrAccountNumber=null,tnxId=null;

double amount = 0.0,tenure=0,interestRate=0.0,periodType=0,interestRegime=0;

//List debit=null,credit=null;   
                 
List<List>  d=new ArrayList();  


bulkUploadPostingModel original = (bulkUploadPostingModel)jTable5.getModel();



//List    amortDetailsx =null; List  amortDetailsx1=null;

    for (int targetRow = 0; targetRow < original.getRowCount()-1; targetRow++) {

    if(!original.getRow(targetRow).isEmpty()){

  int t=0;
  
    batch=this.batchCode();
    
//JOptionPane.showMessageDialog(rootPane, tenure);
    while(t<original.getRow(targetRow).size()){
        
 if(t==0){
     
 tnxId=      original.getRow(targetRow).get(0).toString().trim();
 
 }


    if(t==1){

    txnType=       original.getRow(targetRow).get(1).toString().trim();

    }

    if(t==2){

    
    
 creditAccountName=        original.getRow(targetRow).get(2).toString().trim();
 
    }
        
        if(t==3){
         
       
        
  CrAccountNumber= original.getRow(targetRow).get(3).toString().trim();
  
        }
        
        if(t==4){

    amount=  parseDouble(original.getRow(targetRow).get(4).toString().trim().replace(",", " ").replaceAll("\\s+",""));  

        }
        
        if(t==5){

         DrAccountNumber= original.getRow(targetRow).get(5).toString().trim();
         


        }
t++;
    }
  
    switch(txnType){

case "Savings":
  Narration= creditAccountName+" Savings";  
    break;
case "DirDisburse":
    
   Narration= creditAccountName+" Loan Disbursed";   
    break;
case "DepositPartPay":
    
   Narration= creditAccountName+" Deposits";    
    break;

      case "Decapitalisation":
    
   Narration= creditAccountName+" Decapitalisation";   
    break; 
          case "HEFROI":
  Narration= creditAccountName+" Return On Savings";  
    break;
    }

    txnCode=  "P&I";
    
interestRate=    0.0;


tenure= 0.0;

 DateFetched=sdf.format(new Date(System.currentTimeMillis())); 
    
    }
//  JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt")));   
//   JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt")));   
//    JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim());   
    
    if(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+CrAccountNumber+this.userId+".txt")).equalsIgnoreCase("Yes")){
   
  switch(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt"))){
    
        case "Repayment Cycle":
         switch(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim()){

        
    case "DAYS":
         periodType= 1;
         periodSubType="DAYS";
        break;
     case "WEEKS":
         periodType= 2;
         
          periodSubType="WEEKS";
        break;
         case "FORTNIGHTS":
         periodType= 3;
        
          periodSubType="FORTNIGHTS";
        break;
         case "MONTHS":
         periodType= 4;
          
           periodSubType="MONTHS";
        break;
         case "QUARTERS":
         periodType=5;
         
          periodSubType="QUARTERS";
        break;
         case "HALF YEARS":
         periodType=6;
         
           periodSubType="HALF YEARS";
        break;
     case "YEARS":
         periodType=7;
            periodSubType="YEARS";
           
        break;
         case "BIENNIALS":
         periodType=8;
            periodSubType="BIENNIALS";
         
        break;
    
    
   
   
   
   
   
   
   }
        break;
        
    case "Daily":
         periodType= 1;
              periodSubType="DAYS";
         
        break;
     case "Weekly":
         periodType= 2;
           periodSubType="WEEKS";
              
        break;
         case "Fortnightly":
         periodType= 3;
          periodSubType="FORTNIGHTS";

        break;
         case "Monthly":
         periodType= 4;
                             periodSubType="MONTHS";

        break;
         case "Quaterly":
         periodType=5;
                               periodSubType="QUARTERS";

        break;
         case "Half Yearly":
         periodType=6;
                                periodSubType="HALF YEARS";

        break;
     case "Annually":
         periodType=7;
                                 periodSubType="YEARS";

        break;
         case "Biennially":
         periodType=8;
                                   periodSubType="BIENNIALS";
        break;
    
    }
   
    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+CrAccountNumber+this.userId+".txt"), "No");
   
   
   }else{
    
   
    
     switch(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim()){

        
    case "DAYS":
         periodType= 1;
              periodSubType="DAYS";
         
        break;
     case "WEEKS":
  periodSubType="WEEKS";
             
         periodType= 2;
        break;
         case "FORTNIGHTS":
         periodType= 3;
           periodSubType="FORTNIGHTS";
                   
        break;
         case "MONTHS":
         periodType= 4;
          periodSubType="MONTHS";
               
        break;
         case "QUARTERS":
         periodType=5;
                periodSubType="QUARTERS";
                     
        break;
         case "HALF YEARS":
         periodType=6;
           periodSubType="HALF YEARS";
       
        break;
     case "YEARS":
         periodType=7;
                          periodSubType="YEARS";
                       
        break;
         case "BIENNIALS":
         periodType=8;
            periodSubType="BIENNIALS";
        break;
    
    
   
   
   
   
   
   
   }
   
   
    
    
   }
       
        
        
        officerInCharge= this.userId;
        
     if(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "regimeSet"+CrAccountNumber+this.userId+".txt")).equalsIgnoreCase("Yes")){
        
       switch(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "interestRegime"+CrAccountNumber+this.userId+".txt"))){
       
           case "Interest Regime":
             switch (fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt"))) {
        case 1:
            interestRegime=1;
            break;
        case 2:
            interestRegime=2;
            break;
        case 3:
            interestRegime=3;
            break;
   
    }  
               
               
               
               break;
           case "Flat":
               
                   interestRegime=1; 
               break;
           case "Reducing With Equal Period Instalments":
               
               interestRegime=2; 
               
               
               
               break;
           case "Reducing With Reducing Instalments":
               
              interestRegime=3;  
               break;
           




       
       
       } 
        
        
        
        
        
        
        
        
        }else{
        
    switch (fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt"))) {
        case 1:
            interestRegime=1;
            break;
        case 2:
            interestRegime=2;
            break;
        case 3:
            interestRegime=3;
            break;
   
    }
        }
    
    
amortizationDate=DateFetched;

 DateFetched=sdf.format(new Date(System.currentTimeMillis()));
 


List postedDetails=new ArrayList();

postedDetails.add(batch);//Batch Code batch 0

postedDetails.add(tnxId);//Transanction Code  tnxId 1

postedDetails.add(txnType);//Txn Type    txnType      2

postedDetails.add(txnCode);//Txn Code   txnCode  3

postedDetails.add(DrAccountNumber);//DrAccountNumber  4

postedDetails.add(CrAccountNumber);//CrAccountNumber   5

postedDetails.add(Narration);//Narration  6

postedDetails.add(amount);//amount  7

postedDetails.add(interestRate);//interestRate  8

postedDetails.add(tenure);//tenure    9

postedDetails.add(DateFetched);//DateFetched   10

postedDetails.add(periodType);//periodType   11

postedDetails.add(periodSubType);//periodSubType  12

postedDetails.add(officerInCharge);//tenure    13

postedDetails.add(interestRegime);//periodType   14

postedDetails.add(amortizationDate);//periodSubType  15



 postedDetails.add(YearMonth.parse(fmt.forDatabaseWithFullYearBeginningWithDate(sdf.format(new Date(System.currentTimeMillis()))).substring(0, 7)));
 
  BatchPosting batchPost =new BatchPosting(PostingEntryWindow.this,userId);
  
//  JOptionPane.showMessageDialog(this, amortizationDate+"interestRegime= "+interestRegime+"officerInCharge= "+officerInCharge+"\nperiodSubType= "+periodSubType+"periodType= "+periodType+" DateFetched="+DateFetched+"tenure= "+tenure+" interestRate="+interestRate+" amount="+amount+"Narration= "+Narration+" \nCrAccountNumber="+CrAccountNumber+" DrAccountNumber="+DrAccountNumber+" txnCode="+txnCode+" txnType="+txnType+" tnxId="+tnxId+" batch="+batch);
batchPost.fromMainPost(postedDetails,amortDetails,jTextField66,PostingEntryWindow.this);

BatchPosting2 batchPost2 =new BatchPosting2(PostingEntryWindow.this,userId);
batchPost2.fromMainPost(postedDetails,amortDetails,jTextField66,PostingEntryWindow.this);

    try {
    wait(1000);
    } catch (InterruptedException ex) {
    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
    }

 
    }  
   return true;
       }   
      
private synchronized boolean  uploanPostingAllTxns4(){



String periodSubType = null,creditAccountName=null, batch=null,DateFetched=null,amortizationDate=null,Narration=null,txnType=null,txnCode=null,officerInCharge=null,DrAccountNumber=null,CrAccountNumber=null,tnxId=null;

double amount = 0.0,tenure=0,interestRate=0.0,periodType=0,interestRegime=0;

//List debit=null,credit=null;   
                 
List<List>  d=new ArrayList();  


bulkUploadPostingModel original = (bulkUploadPostingModel)jTable5.getModel();



//List    amortDetailsx =null; List  amortDetailsx1=null;

    for (int targetRow = 0; targetRow < original.getRowCount()-1; targetRow++) {

    if(!original.getRow(targetRow).isEmpty()){

  int t=0;
  
    batch=this.batchCode();
    
//JOptionPane.showMessageDialog(rootPane, tenure);
    while(t<original.getRow(targetRow).size()){
        
 if(t==0){
     
 tnxId=      original.getRow(targetRow).get(0).toString().trim();
 
 }


    if(t==1){

    txnType=       original.getRow(targetRow).get(1).toString().trim();

    }

    if(t==2){

    
    
 creditAccountName=        original.getRow(targetRow).get(2).toString().trim();
 
    }
        
        if(t==3){
         
       
        DrAccountNumber= original.getRow(targetRow).get(3).toString().trim();
  
  
        }
        
        if(t==4){

    amount=  parseDouble(original.getRow(targetRow).get(4).toString().trim().replace(",", " ").replaceAll("\\s+",""));  

        }
        
        if(t==5){

         
         
CrAccountNumber= original.getRow(targetRow).get(5).toString().trim();

        }



t++;
    }
  
    switch(txnType){

case "Capitalisation":
  Narration= creditAccountName+"Shares Contributions";  
    break;

case "WithdrawDepositPartPay":
    
   Narration= creditAccountName+"Deposits Withdraw";    
    break;

     case "WithdrawSavings":
    
   Narration= creditAccountName+"Savings Withdraw";    
    break;                                   
    
   case "LoanPyt":
    
   Narration= creditAccountName+"Loan Payment";    
    break;                                   
    }
    txnCode=  "P&I";
    
interestRate=    0.0;


tenure= 0.0;

 DateFetched=sdf.format(new Date(System.currentTimeMillis())); 
    
    }
//  JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt")));   
//   JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt")));   
//    JOptionPane.showMessageDialog(this, fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim());   
    
    if(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+CrAccountNumber+this.userId+".txt")).equalsIgnoreCase("Yes")){
   
  switch(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "repaymentCycle"+CrAccountNumber+this.userId+".txt"))){
    
        case "Repayment Cycle":
         switch(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim()){

        
    case "DAYS":
         periodType= 1;
         periodSubType="DAYS";
        break;
     case "WEEKS":
         periodType= 2;
         
          periodSubType="WEEKS";
        break;
         case "FORTNIGHTS":
         periodType= 3;
        
          periodSubType="FORTNIGHTS";
        break;
         case "MONTHS":
         periodType= 4;
          
           periodSubType="MONTHS";
        break;
         case "QUARTERS":
         periodType=5;
         
          periodSubType="QUARTERS";
        break;
         case "HALF YEARS":
         periodType=6;
         
           periodSubType="HALF YEARS";
        break;
     case "YEARS":
         periodType=7;
            periodSubType="YEARS";
           
        break;
         case "BIENNIALS":
         periodType=8;
            periodSubType="BIENNIALS";
         
        break;
    
    
   
   
   
   
   
   
   }
        break;
        
    case "Daily":
         periodType= 1;
              periodSubType="DAYS";
         
        break;
     case "Weekly":
         periodType= 2;
           periodSubType="WEEKS";
              
        break;
         case "Fortnightly":
         periodType= 3;
          periodSubType="FORTNIGHTS";

        break;
         case "Monthly":
         periodType= 4;
                             periodSubType="MONTHS";

        break;
         case "Quaterly":
         periodType=5;
                               periodSubType="QUARTERS";

        break;
         case "Half Yearly":
         periodType=6;
                                periodSubType="HALF YEARS";

        break;
     case "Annually":
         periodType=7;
                                 periodSubType="YEARS";

        break;
         case "Biennially":
         periodType=8;
                                   periodSubType="BIENNIALS";
        break;
    
    }
   
    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "repaymentCycleSet"+CrAccountNumber+this.userId+".txt"), "No");
   
   
   }else{
    
   
    
     switch(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[1].replace(",", " ").trim()){

        
    case "DAYS":
         periodType= 1;
              periodSubType="DAYS";
         
        break;
     case "WEEKS":
  periodSubType="WEEKS";
             
         periodType= 2;
        break;
         case "FORTNIGHTS":
         periodType= 3;
           periodSubType="FORTNIGHTS";
                   
        break;
         case "MONTHS":
         periodType= 4;
          periodSubType="MONTHS";
               
        break;
         case "QUARTERS":
         periodType=5;
                periodSubType="QUARTERS";
                     
        break;
         case "HALF YEARS":
         periodType=6;
           periodSubType="HALF YEARS";
       
        break;
     case "YEARS":
         periodType=7;
                          periodSubType="YEARS";
                       
        break;
         case "BIENNIALS":
         periodType=8;
            periodSubType="BIENNIALS";
        break;

   }
   
   
    
    
   }
       
        
        
        officerInCharge= this.userId;
        
     if(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "regimeSet"+CrAccountNumber+this.userId+".txt")).equalsIgnoreCase("Yes")){
        
       switch(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "interestRegime"+CrAccountNumber+this.userId+".txt"))){
       
           case "Interest Regime":
             switch (fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt"))) {
        case 1:
            interestRegime=1;
            break;
        case 2:
            interestRegime=2;
            break;
        case 3:
            interestRegime=3;
            break;
   
    }  
               
               
               
               break;
           case "Flat":
               
                   interestRegime=1; 
               break;
           case "Reducing With Equal Period Instalments":
               
               interestRegime=2; 
               
               
               
               break;
           case "Reducing With Reducing Instalments":
               
              interestRegime=3;  
               break;
           




       
       
       } 
        
        
        
        
        
        
        
        
        }else{
        
    switch (fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt"))) {
        case 1:
            interestRegime=1;
            break;
        case 2:
            interestRegime=2;
            break;
        case 3:
            interestRegime=3;
            break;
   
    }
        }
    
    
amortizationDate=DateFetched;

 DateFetched=sdf.format(new Date(System.currentTimeMillis()));
 


List postedDetails=new ArrayList();

postedDetails.add(batch);//Batch Code batch 0

postedDetails.add(tnxId);//Transanction Code  tnxId 1

postedDetails.add(txnType);//Txn Type    txnType      2

postedDetails.add(txnCode);//Txn Code   txnCode  3

postedDetails.add(DrAccountNumber);//DrAccountNumber  4

postedDetails.add(CrAccountNumber);//CrAccountNumber   5

postedDetails.add(Narration);//Narration  6

postedDetails.add(amount);//amount  7

postedDetails.add(interestRate);//interestRate  8

postedDetails.add(tenure);//tenure    9

postedDetails.add(DateFetched);//DateFetched   10

postedDetails.add(periodType);//periodType   11

postedDetails.add(periodSubType);//periodSubType  12

postedDetails.add(officerInCharge);//tenure    13

postedDetails.add(interestRegime);//periodType   14

postedDetails.add(amortizationDate);//periodSubType  15
 postedDetails.add(YearMonth.parse(fmt.forDatabaseWithFullYearBeginningWithDate(sdf.format(new Date(System.currentTimeMillis()))).substring(0, 7)));
 
 BatchPosting batchPost =new BatchPosting(PostingEntryWindow.this,userId);
 

batchPost.fromMainPost(postedDetails,amortDetails,jTextField66,PostingEntryWindow.this);

BatchPosting2 batchPost2 =new BatchPosting2(PostingEntryWindow.this,userId);
batchPost2.fromMainPost(postedDetails,amortDetails,jTextField66,PostingEntryWindow.this);
    try {
    wait(1000);
    } catch (InterruptedException ex) {
    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
    }

 
    }  
   return true;
       }  

//      private synchronized boolean  uploanPostingAllBulkTxns1(){
//
//
//
//String batch=null,DateFetched=null,amortizationDate=null,Narration=null,txnType=null,txnCode=null,officerInCharge=null,DrAccountNumber=null,CrAccountNumber=null;
//
//double amount = 0.0,debitAmnt= 0.0,creditAmnt= 0.0,tenure=0,interestRate=0.0,periodType=0,interestRegime=0,trid=0;
//
//List debit=null,credit=null;   
//                 
//List<List>  d=new ArrayList();  
//
//
//ListDataModel_12 original = (ListDataModel_12)jTable9.getModel();
//
//
//
//List    amortDetailsx =null; List  amortDetailsx1=null;
//
//    for (int targetRow = 0; targetRow < original.getRowCount()-1; targetRow++) {
//
//    if(!original.getRow(targetRow).isEmpty()){
//
//  int t=0;
//    batch=this.batchCode();
////JOptionPane.showMessageDialog(rootPane, tenure);
//    while(t<original.getRow(targetRow).size()){
//   
//        if(t==0){
//        trid=parseInt(original.getRow(targetRow).get(0).toString().trim().replace(".0", ""));
//        
//        }
//
//
//    if(t==1){
//
//    
// DateFetched= fmt.fromDatabaseWithDashSeperatorBeginningWithYear(original.getRow(targetRow).get(1).toString().trim());
//    }
//
//    if(t==2){
//
//   
// Narration=       original.getRow(targetRow).get(2).toString().trim();
//    }
//        
//        if(t==3){
//         
//      txnType=       original.getRow(targetRow).get(3).toString().trim(); 
//
//        }
//        
//        if(t==4){
//
//        txnCode=        original.getRow(targetRow).get(4).toString().trim();
//
//        }
//        
//        if(t==5){
//
//debitAmnt= parseDouble(original.getRow(targetRow).get(5).toString().trim().replace(",", " ").replaceAll("\\s+",""));
//       
// 
//        }
//        if(t==6){
//            
//        creditAmnt= parseDouble(original.getRow(targetRow).get(6).toString().trim().replace(",", " ").replaceAll("\\s+",""));
//
//        }
//        if(t==7){
//
//                                 
//        interestRate=       parseDouble(original.getRow(targetRow).get(7).toString().trim());
//        }
//        if(t==8){
//            
//        tenure=       parseInt(original.getRow(targetRow).get(8).toString().trim().replace(".0", ""));
//
//        }
//        if(t==9){
//
//      interestRegime=parseInt( original.getRow(targetRow).get(9).toString().trim().replace(".0", ""));
//         
//        }
//         if(t==10){
//
//    
//          DrAccountNumber= original.getRow(targetRow).get(10).toString().trim();
//        }
//          if(t==11){
//
//      CrAccountNumber= original.getRow(targetRow).get(11).toString().trim();
//        
//        }
//t++;
//    }  
//    
//    }
//        periodType= 1;
//        officerInCharge= this.userId;
//    if(debitAmnt>0){
//  
//  amount=debitAmnt;
//  
//  }else if(creditAmnt>0){
//  
//    amount=creditAmnt;
//  }else{
//    amount=0.0;
//  
//  }
//    
////amortizationDate=DateFetched;
////
//// DateFetched=sdf.fmt(new Date(System.currentTimeMillis()));
//// 
//    
//    List theUploadedDetails=new ArrayList();
//    theUploadedDetails.add(batch);//batch 0
//      theUploadedDetails.add(trid);//trid 1  
//     theUploadedDetails.add(DateFetched);//DateFetched 2 
//      theUploadedDetails.add(Narration);//Narration 3
//        theUploadedDetails.add(txnType);//txnType 4 
//    theUploadedDetails.add(txnCode);//txnCode 5
//    theUploadedDetails.add(amount);//amount 6
//     theUploadedDetails.add(interestRate);//interestRate 7
//     theUploadedDetails.add(tenure);//tenure 8
//     theUploadedDetails.add(interestRegime);//tenure 9
//     theUploadedDetails.add(DrAccountNumber);//tenure 10
//      theUploadedDetails.add(CrAccountNumber);//tenure 11
//     
//       BatchPosting batchPost =new BatchPosting(PostingEntryWindow.this,userId);
//
//batchPost.bulkPostingPost(theUploadedDetails,this.amortDetails);
//
//    try {
//    wait(3000);
//    } catch (InterruptedException ex) {
//    Logger.getLogger(LoanManagmentWindow.class.getName()).log(Level.SEVERE, null, ex);
//    }
//
// 
//    }  
//    
//JOptionPane.showMessageDialog(this, "The New System Date is:"+DateFetched+"\n\nFor further processing, please logout and change the computer date to match with the system date;");
//
//fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "activeDate3.txt"),DateFetched);
//
//fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "activeDate.txt"),DateFetched);
//
//fios.stringFileWriter( fios.createFileName("logOut", "completeShutDown", "activeDate2.txt"),DateFetched);
//
//fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "open_day.txt"),DateFetched);
//
//fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "valueDate.txt"),DateFetched);
//
//fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "trn_sequeanceNumber.txt"),"0001"); 
//
//
//
//
//
//    
//   return true;
//       }   
        
       
//    private int theCorrespondingTxnCode(String theCode){
//        
//    int theIndex=999;
//    
//    for(List thed:uniqueListPost){
//
//    if(thed.get(1).toString().equalsIgnoreCase(theCode)){
//        
//    theIndex=uniqueListPost.indexOf(thed);
//
//    }
//
//    }
//    return theIndex;
//    }      

         
       private synchronized boolean uploadLoanPayments(){
           
boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("LOAN AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("LoanPyt");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField19.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
       
       }
//  double remainingInstalments=parseDouble(loan.remainingTotalLoanBalance(form.formatAccountWithSeperators(this.getDrAccountNumber())));
//   double postedInstalments=parseDouble(this.getCrAmount());
       
       
       
               
               
                 private synchronized boolean uploadOtherWithdrawSavingsData(){
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("SHARES AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("WithdrawDepositPartPay");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField20.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 
 } 
                 
 private synchronized boolean uploadROIData(){
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("ROI AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("HEFROI");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField24.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 
 } 
     private synchronized boolean uploadDirLoanDisbData(){
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("DISB AMOUNT");
         
          theTitles.add("DR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("DirDisburse");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField26.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 
 }             
                        
                 
     private synchronized boolean  uploadWithdrawSavingsData() {
 
 boolean updaloadsuccessful=false;  String serial=null,crediAccountName=null, CraccountNumber = null,batch=null;double amount = 0.0;
 
 Date txnDate=null;

        
        JFileChooser fileChooser = new JFileChooser();

        int returnValue = fileChooser.showOpenDialog(null);

        FileInputStream fis=null;File selectedFile=null;XSSFWorkbook workbook=null;XSSFSheet spreadSheet=null;XSSFRow row=null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        selectedFile = fileChooser.getSelectedFile();

        try {
        //               String     filename = selectedFile.getAbsolutePath();

        fis=new FileInputStream(selectedFile);

        workbook=new XSSFWorkbook(fis);

        spreadSheet=workbook.getSheetAt(0);

        } catch (FileNotFoundException ex) {

        JOptionPane.showMessageDialog(this, ex.toString());
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString());
        }
//String batchNumber=this.batchCode();

        Iterator <Row>   rowIterator=spreadSheet.iterator();
int t1=0;List<List>  theData=new ArrayList(); 
        while(rowIterator.hasNext()){
            
          
          
        row=(XSSFRow)rowIterator.next();

        Iterator <Cell>  cellIterator=row.iterator();
        
   List txnDatails= new ArrayList();
 
        int t=0; 
            if(t1>0){
//JOptionPane.showMessageDialog(this, "kl");
        
        while(cellIterator.hasNext()){

    
       
//          txnDatails.add(jTextField17.getText());//Debit Account Number
//          
//       txnDatails.add(this.batchCode());//Batch Code

        if(t==0){
    serial=cellIterator.next().toString();
//    JOptionPane.showMessageDialog(this, serial);  
      txnDatails.add(serial);//Serial Number
       
        
        }
        
      
        if(t==1){
crediAccountName=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, crediAccountName);
    txnDatails.add(crediAccountName);//Credit Account Name
      
        }
        
  if(t==2){
CraccountNumber=cellIterator.next().toString();
//JOptionPane.showMessageDialog(this, CraccountNumber);
  txnDatails.add(CraccountNumber);//Credit Account Number
        }
  
    if(t==3){
amount=parseDouble(cellIterator.next().toString().trim().replace(",", " ").replaceAll("\\s+",""));
//JOptionPane.showMessageDialog(this, amount);
  txnDatails.add(amount);//Amount
  
        }
    
    
t++;
        }
    theData.add(txnDatails);          
// JOptionPane.showMessageDialog(this, txnDatails.get(0).toString());      
 

   
   
        }

t1++;
        }

        List theTitles=new ArrayList();
        
        theTitles.add("S/N");
        
        theTitles.add("TXN TYPE");
        
         theTitles.add("ACCOUNT NAME");
         
          theTitles.add("ACCOUNT NUMBER");
          
          theTitles.add("AMOUNT");
         
          theTitles.add("CR ACCOUNT");

            
          List <List> finalDate=new ArrayList();
//          JOptionPane.showMessageDialog(this, theData.get(0).get(0).toString());
        for(List newDate:theData){
        List theNewList=new ArrayList();
        theNewList.add(newDate.get(0).toString());
         theNewList.add("WithdrawSavings");       
           theNewList.add(newDate.get(1).toString());  
         theNewList.add(newDate.get(2).toString()); 
        theNewList.add(fmt.formatForStatementNumbersNormal(newDate.get(3).toString()));
         theNewList.add(jTextField21.getText());
         
         finalDate.add(theNewList);
        }
        
     bulkUploadPostingModel     BudgetEstmodel1= new bulkUploadPostingModel(finalDate, theTitles);      
       jTable5.setModel(BudgetEstmodel1);
         TableRowSorter<bulkUploadPostingModel> sorter = new TableRowSorter<>(BudgetEstmodel1);
                            jTable5.setRowSorter(sorter);  
        
        
        
        
updaloadsuccessful=true;
        }



return updaloadsuccessful;
 
 
 }            
//     private void updateTable5(JTable t5){
//     
//     if(dbq.fillMeWithAllAccounts(t5)){
//                jPanel14.setVisible(false);
//
//                jPanel17.setVisible(true);
//            }else{
//
//                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
//                return;}
//            sortTable(t5,jTextField41);
//                         HeaderRenderer header = new HeaderRenderer(jTable5.getTableHeader().getDefaultRenderer());
//
//        int h1=0;
//
//        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
//        while(h1<t5.getColumnModel().getColumnCount()){
//            t5.getColumnModel().getColumn(h1).setHeaderRenderer(header);
//
//            if(h1==0){
//                t5.getColumnModel().getColumn(h1).setMinWidth(0);
//                t5.getColumnModel().getColumn(h1).setMaxWidth(100);
//                t5.getColumnModel().getColumn(h1).setPreferredWidth(80);
//
//            }
//
//            if(h1==1){
//                t5.getColumnModel().getColumn(h1).setMinWidth(0);
//                t5.getColumnModel().getColumn(h1).setMaxWidth(2000);
//                t5.getColumnModel().getColumn(h1).setPreferredWidth(200);
//
//            }
//            
//            if(h1==2){
//                t5.getColumnModel().getColumn(h1).setMinWidth(0);
//                t5.getColumnModel().getColumn(h1).setMaxWidth(2000);
//                t5.getColumnModel().getColumn(h1).setPreferredWidth(150);
//
//            }
//            
//            if(h1==3){
//                t5.getColumnModel().getColumn(h1).setMinWidth(0);
//                t5.getColumnModel().getColumn(h1).setMaxWidth(2000);
//                t5.getColumnModel().getColumn(h1).setPreferredWidth(150);
//
//            }
//             if(h1==4){
//                t5.getColumnModel().getColumn(h1).setMinWidth(0);
//                t5.getColumnModel().getColumn(h1).setMaxWidth(2000);
//                t5.getColumnModel().getColumn(h1).setPreferredWidth(150);
//
//            }
//            h1++;
//
//        }
//        t5.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
//            @Override
//            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
//
//                this.setHorizontalAlignment(JLabel.LEFT);
//
//                if(row==table.getRowCount()-1){
//                    this.setFont(new Font("Arial",Font.BOLD,20));
//                }else{
//                    this.setFont(new Font("Arial",Font.PLAIN,18));
//                }
//
//                if(col==4){
//                    Number c = (Number)parseDouble(value.toString());
//                    String text = NumberFormat.format(c );
//                    this.setText(text);
//                }else{
//                    this.setText(value.toString());
//                }
//                if (row%2==0) {
//                    setBackground(jButton49.getBackground());
//                    setForeground(jButton51.getBackground());
//                    if(isSelected){
//                        
//                        setBackground(Color.CYAN);
//                    }
//                } else {
//                    setBackground(jButton50.getBackground());
//                    setForeground(jButton51.getBackground());
//                    if(isSelected){setBackground(Color.CYAN);}
//                }
//
//                return this;
//            }
//        });
//     
//     
//     }
     
  private void updateTable7(String typeP){
     
      
      switch(typeP){
          
          
          case "General":
     if(dbq.fillMeWithAllAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                         HeaderRenderer header = new HeaderRenderer(jTable7.getTableHeader().getDefaultRenderer());

        int h1=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1<jTable7.getColumnModel().getColumnCount()){
            jTable7.getColumnModel().getColumn(h1).setHeaderRenderer(header);

            if(h1==0){
                jTable7.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable7.getColumnModel().getColumn(h1).setMaxWidth(100);
                jTable7.getColumnModel().getColumn(h1).setPreferredWidth(80);

            }

            if(h1==1){
                jTable7.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable7.getColumnModel().getColumn(h1).setMaxWidth(2000);
                jTable7.getColumnModel().getColumn(h1).setPreferredWidth(200);

            }
            
            if(h1==2){
                jTable7.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable7.getColumnModel().getColumn(h1).setMaxWidth(2000);
                jTable7.getColumnModel().getColumn(h1).setPreferredWidth(150);

            }
            
            if(h1==3){
                jTable7.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable7.getColumnModel().getColumn(h1).setMaxWidth(2000);
                jTable7.getColumnModel().getColumn(h1).setPreferredWidth(150);

            }
             if(h1==4){
                jTable7.getColumnModel().getColumn(h1).setMinWidth(0);
                jTable7.getColumnModel().getColumn(h1).setMaxWidth(2000);
                jTable7.getColumnModel().getColumn(h1).setPreferredWidth(150);

            }
            h1++;

        }
        jTable7.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                this.setHorizontalAlignment(JLabel.LEFT);

                if(row==table.getRowCount()-1){
                    this.setFont(new Font("Arial",Font.BOLD,20));
                }else{
                    this.setFont(new Font("Arial",Font.PLAIN,18));
                }

                if(col==4){
                    Number c = (Number)parseDouble(value.toString());
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
                if (row%2==0) {
                    setBackground(jButton49.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){
                        
                        setBackground(Color.CYAN);
                    }
                } else {
                    setBackground(jButton50.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                }

                return this;
            }
        });
  
   break;
   
   
       
 
    case "Expense":
     if(dbq.fillMeWithAllExpenseAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
     renderTableForAccounts(jTable7,jTextField65);
     
   break;
         case "accumDepreciation":
             
                String numberInstalmens=jComboBox27.getSelectedItem().toString();
                
             if(numberInstalmens.equalsIgnoreCase("Select Instalments To Process")){
               
              JOptionPane.showConfirmDialog(this, "Please select atleast one instalment");
              
           
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
               return;
               }else{
     if(dbq.fillMeWithAllAccountsFixedAssetReports(jTable7)){
                jPanel20.setVisible(false);
//hkhk
                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
     renderTableForAccounts(jTable7,jTextField65);
              }
   break;
   
   
   case "LoanPyt":
       
    if(dbq.fillMeWithAllLoanAmounts(jTable7)){
        
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
                
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
        sortTable(jTable7,jTextField65);
        HeaderRenderer headerx = new HeaderRenderer(jTable7.getTableHeader().getDefaultRenderer());

        int h1x=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1x<jTable7.getColumnModel().getColumnCount()){
        jTable7.getColumnModel().getColumn(h1x).setHeaderRenderer(headerx);

        if(h1x==0){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(100);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(90);

        }

        if(h1x==1){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(150);

        }

        if(h1x==2){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(250);

        }

        if(h1x==3){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==4){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==5){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==6){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==7){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        if(h1x==8){
        jTable7.getColumnModel().getColumn(h1x).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x).setPreferredWidth(120);

        }
        h1x++;

        }
        jTable7.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT); 
        this.setFont(new Font("Arial",Font.PLAIN,17));


        if(col>=3&&col<=7){
        Number c = (Number)parseDouble(value.toString());
        String text = NumberFormat.format(c );
        this.setText(text);
        this.setHorizontalAlignment(RIGHT);
        }else{
        this.setText(value.toString());
        }
        if(col==8){

        this.setText(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(value.toString()));

        } 

        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){

        setBackground(Color.CYAN);
        }
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }

        return this;
        }
        });
  
   break;
   
   
   case "RecoverWrittenOffCash":
       
    if(dbq.fillMeWithAllLoanAmountsWrittenOff(jTable7)){
        
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
                
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
        sortTable(jTable7,jTextField65);
        HeaderRenderer headerxy = new HeaderRenderer(jTable7.getTableHeader().getDefaultRenderer());

        int h1xy=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1xy<jTable7.getColumnModel().getColumnCount()){
        jTable7.getColumnModel().getColumn(h1xy).setHeaderRenderer(headerxy);

        if(h1xy==0){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(100);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(90);

        }

        if(h1xy==1){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(150);

        }

        if(h1xy==2){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(250);

        }

        if(h1xy==3){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(120);

        }
        if(h1xy==4){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(120);

        }
        if(h1xy==5){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(120);

        }
        if(h1xy==6){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(120);

        }
        if(h1xy==7){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(120);

        }
        if(h1xy==8){
        jTable7.getColumnModel().getColumn(h1xy).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1xy).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1xy).setPreferredWidth(120);

        }
        h1xy++;

        }
        jTable7.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT); 
        this.setFont(new Font("Arial",Font.PLAIN,17));


        if(col>=3&&col<=7){
        Number c = (Number)parseDouble(value.toString());
        String text = NumberFormat.format(c );
        this.setText(text);
        this.setHorizontalAlignment(RIGHT);
        }else{
        this.setText(value.toString());
        }
        if(col==8){

        this.setText(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(value.toString()));

        } 

        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){

        setBackground(Color.CYAN);
        }
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }

        return this;
        }
        });
  
   break;
   
   case "LoanPytDepositPartPay":
       
    if(dbq.fillMeWithAllLoanAmounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
        sortTable(jTable7,jTextField65);
        HeaderRenderer headerx1 = new HeaderRenderer(jTable7.getTableHeader().getDefaultRenderer());

        int h1x1=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1x1<jTable7.getColumnModel().getColumnCount()){
        jTable7.getColumnModel().getColumn(h1x1).setHeaderRenderer(headerx1);

        if(h1x1==0){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(100);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(90);

        }

        if(h1x1==1){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(150);

        }

        if(h1x1==2){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(250);

        }

        if(h1x1==3){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(120);

        }
        if(h1x1==4){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(120);

        }
        if(h1x1==5){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(120);

        }
        if(h1x1==6){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(120);

        }
        if(h1x1==7){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(120);

        }
        if(h1x1==8){
        jTable7.getColumnModel().getColumn(h1x1).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1).setPreferredWidth(120);

        }
        h1x1++;

        }
        jTable7.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT); 
        this.setFont(new Font("Arial",Font.PLAIN,17));


        if(col>=3&&col<=7){
        Number c = (Number)parseDouble(value.toString());
        String text = NumberFormat.format(c );
        this.setText(text);
        this.setHorizontalAlignment(RIGHT);
        }else{
        this.setText(value.toString());
        }
        if(col==8){

        this.setText(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(value.toString()));

        } 

        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){

        setBackground(Color.CYAN);
        }
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }

        return this;
        }
        });
  
   break;
   
    case "LoanPytSavings":
       
    if(dbq.fillMeWithAllLoanAmounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
        sortTable(jTable7,jTextField65);
        HeaderRenderer headerx1f = new HeaderRenderer(jTable7.getTableHeader().getDefaultRenderer());

        int h1x1f=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h1x1f<jTable7.getColumnModel().getColumnCount()){
        jTable7.getColumnModel().getColumn(h1x1f).setHeaderRenderer(headerx1f);

        if(h1x1f==0){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(100);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(90);

        }

        if(h1x1f==1){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(150);

        }

        if(h1x1f==2){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(250);

        }

        if(h1x1f==3){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(120);

        }
        if(h1x1f==4){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(120);

        }
        if(h1x1f==5){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(120);

        }
        if(h1x1f==6){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(120);

        }
        if(h1x1f==7){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(120);

        }
        if(h1x1f==8){
        jTable7.getColumnModel().getColumn(h1x1f).setMinWidth(0);
        jTable7.getColumnModel().getColumn(h1x1f).setMaxWidth(2000);
        jTable7.getColumnModel().getColumn(h1x1f).setPreferredWidth(120);

        }
        h1x1f++;

        }
        jTable7.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT); 
        this.setFont(new Font("Arial",Font.PLAIN,17));


        if(col>=3&&col<=7){
        Number c = (Number)parseDouble(value.toString());
        String text = NumberFormat.format(c );
        this.setText(text);
        this.setHorizontalAlignment(RIGHT);
        }else{
        this.setText(value.toString());
        }
        if(col==8){

        this.setText(fmt.fromDatabaseWithDashSeperatorBeginningWithYear(value.toString()));

        } 

        if (row%2==0) {
        setBackground(jButton49.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){

        setBackground(Color.CYAN);
        }
        } else {
        setBackground(jButton50.getBackground());
        setForeground(jButton51.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }

        return this;
        }
        });
  
   break;
    case "NewLoan":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
        
        case "NewLoanBank":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;                 
                       case "Withdrawal":
       
    if(dbq.fillMeWithAllAccountsBank(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                      
                   case "MobileMoneyWithdraw":
       
    if(dbq.fillMeWithAllAccountsMobileMoney(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;       
                
                      case "Payable":
       
    if(dbq.fillMeWithAllPayableAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                         case "LProcessFees":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                 case "LProcessFeesBank":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;         
                      case "HEFROI":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                      
                  
                      case "ClearPayable":
       
    if(dbq.fillMeWithAllPayableAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                      
                        case "Prepayments":
       
    if(dbq.fillMeWithAllPrepaidAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;      
                      case "Receivable":
       
    if(dbq.fillMeWithAllRecievablesAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                      case "Drawing":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                         
                      case "ClearReceivable":
       
    if(dbq.fillMeWithAllRecievablesAccounts(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                       
                                
                      case "Salary":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
               
                    
                   case "WithdrawDepositPartPay":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                       
                              
                      case "DepositPartPay":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;                
                      case "Savings":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                       
                              
                      case "WithdrawSavings":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;                        
                      case "Capitalisation":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                       
                                          
                      case "Decaptalisation":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                      
                                                
                      case "RecoverInterest":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                        
                                                
                      case "WriteOffInterest":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;
    }
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                                                                               
                      case "RecoverPenalty":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                                                       
                      case "WriteOffPenalty":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                                                       
                      case "RecoverAccumulatedInterest":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                                                       
                      case "WriteOffAccumulatedInterest":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
                      
                      
                              
                                  case "BadLoansRecovered":
       
    if(dbq.fillMeWithAllAccountsC(jTable7)){
                jPanel20.setVisible(false);

                jPanel21.setVisible(true);
            }else{

                JOptionPane.showMessageDialog(this, "No Accounts Found!!!!");
                return;}
            sortTable(jTable7,jTextField65);
                      renderTableForAccounts(jTable7,jTextField65);    
                      break;
}
  
  
  
  
  
  
  
  
  }
   private void renderTableForAccounts(JTable table,JTextField g){
   
       
            sortTable(table,g);
                         HeaderRenderer headerb = new HeaderRenderer(table.getTableHeader().getDefaultRenderer());

        int hb1=0;

        //        jTable3.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hb1<table.getColumnModel().getColumnCount()){
            table.getColumnModel().getColumn(hb1).setHeaderRenderer(headerb);

            if(hb1==0){
                table.getColumnModel().getColumn(hb1).setMinWidth(0);
                table.getColumnModel().getColumn(hb1).setMaxWidth(100);
                table.getColumnModel().getColumn(hb1).setPreferredWidth(80);

            }

            if(hb1==1){
                table.getColumnModel().getColumn(hb1).setMinWidth(0);
                table.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                table.getColumnModel().getColumn(hb1).setPreferredWidth(200);

            }
            
            if(hb1==2){
                table.getColumnModel().getColumn(hb1).setMinWidth(0);
                table.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                table.getColumnModel().getColumn(hb1).setPreferredWidth(150);

            }
            
            if(hb1==3){
                table.getColumnModel().getColumn(hb1).setMinWidth(0);
                table.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                table.getColumnModel().getColumn(hb1).setPreferredWidth(150);

            }
             if(hb1==4){
                table.getColumnModel().getColumn(hb1).setMinWidth(0);
                table.getColumnModel().getColumn(hb1).setMaxWidth(2000);
                table.getColumnModel().getColumn(hb1).setPreferredWidth(150);

            }
            hb1++;

        }
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                this.setHorizontalAlignment(JLabel.LEFT);

                if(row==table.getRowCount()-1){
                    this.setFont(new Font("Arial",Font.BOLD,20));
                }else{
                    
                    this.setFont(new Font("Arial",Font.PLAIN,18));
                }

                if(col==4){
                    Number c = (Number)parseDouble(value.toString().replace(",", ""));
                    String text = NumberFormat.format(c );
                    this.setText(text);
                }else{
                    this.setText(value.toString());
                }
                if (row%2==0) {
                    setBackground(jButton49.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){
                        
                        setBackground(Color.CYAN);
                    }
                } else {
                    setBackground(jButton50.getBackground());
                    setForeground(jButton51.getBackground());
                    if(isSelected){setBackground(Color.CYAN);}
                }

                return this;
            }
        });
  
   
   
   }  
     private void actOnGui(JCheckBox chechMe,JComboBox boxMe,JTextField fieldMe,JButton buttonMe1,JFormattedTextField formatMe1,JButton buttonMe2,JFormattedTextField formatMe2){
     
     
       if(chechMe.isSelected()){   
        
        if(fieldMe.getText().equalsIgnoreCase("")){
JOptionPane.showMessageDialog(this, "Please First put the Symbol before you proceeed!!!");
chechMe.setSelected(false);

    return;
    }else{
        if(formatMe1.getValue()==null){
  JOptionPane.showMessageDialog(this, "Please First select Debit Account before you proceeed!!!");
  chechMe.setSelected(false);

    return;
    
    }else{
        
        if(formatMe2.getValue()==null){
     JOptionPane.showMessageDialog(this, "Please First select Credit Account before you proceeed!!!");
     chechMe.setSelected(false);

    return;
    }else{
  List newPostedItems=new ArrayList();
  
  newPostedItems.add(boxMe.getSelectedItem().toString());
    newPostedItems.add(fieldMe.getText());
     newPostedItems.add(formatMe1.getValue().toString());
      newPostedItems.add(formatMe2.getValue().toString());
       newPostedItems.add(fieldMe.getText());
  uniqueListPost.add(newPostedItems);
            
boxMe.setEditable(false);
fieldMe.setEditable(false);
buttonMe1.setEnabled(false);
formatMe1.setEditable(false);
buttonMe2.setEnabled(false);
formatMe2.setEditable(false);
chechMe.setSelected(true);
        
        
        }  
        
        
        }
    
    
    }
}else if(!chechMe.isSelected()){
boxMe.setEditable(true);
fieldMe.setEditable(true);
buttonMe1.setEnabled(true);
formatMe1.setEditable(true);
buttonMe2.setEnabled(true);
formatMe2.setEditable(true);
chechMe.setSelected(false);


}

     }
     
     private void setTheAccountNumbers(String theItem,JFormattedTextField formatMe1,JFormattedTextField formatMe2){
     
     switch(theItem){
     
        case  "General":
         formatMe1.setValue(null);  
            formatMe2.setValue(null);  
            
            break;
        case  "Expense":
                 formatMe1.setValue(null);  
            formatMe2.setValue("01-1230001-10");
//            JOptionPane.showMessageDialog(this, "Select the Expense Account");
//             fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationbb.txt"),number);
//updateTable5(jTable5);  
            
            
            break;
        case  "Loan":
            
          formatMe1.setValue("01-1280001-10"); 
            formatMe2.setValue(null);  
            break;
        case  "LoanP":
                formatMe1.setValue(null);  
               formatMe2.setValue("01-1280001-10");   
            
            break;
        case  "Withdrawal":
            formatMe1.setValue("01-1230001-10");  
             formatMe2.setValue("01-1220001-10");  
            
            break;
        case  "Deposit":
          
             formatMe1.setValue("01-1220001-10");    
               formatMe2.setValue("01-1230001-10"); 
            
            break;
        case  "Payable":
            
        
               formatMe1.setValue("01-1230001-10");      
             formatMe2.setValue("05-5000001-10");   
            break;
        case  "Receivable":
              formatMe1.setValue("01-1310001-10");
            formatMe2.setValue("01-1230001-10");      
             
            break;






     
     }
     
     
     
     }
     public synchronized String createLedger(){
         String newAccountNumber="";
 String ledgerProduct="Empty Record";
if(jCheckBox65.getText().equalsIgnoreCase("CREATE SUB-LEDGER")){
    
ledgerProduct=ancdb.getProductName(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 2).toString());
//    JOptionPane.showMessageDialog(this, jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 2).toString());
    if(!ledgerProduct.equals("Empty Record")){
        
//      JOptionPane.showMessageDialog(this, ledgerProduct);   
      
 newAccountNumber= "05"+dbq.getAccountMaster(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 1).toString())+dbq.getProductCode(ledgerProduct); 

 if(createTheLedger(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 1).toString(),newAccountNumber,dbq.getProductCode(ledgerProduct)+"",ledgerProduct,jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 1).toString().split("\\s")[1],jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 1).toString().split("\\s")[0])){
 
          JOptionPane.showMessageDialog(null, "SUB LEDGER SUCCESSFULLY CREATED");
          
         JOptionPane.showMessageDialog(null, "Another Ledger for"+" "+firstName3.getText()+" "+"Account number"+"  "+newAccountNumber+" "+"and Account Name:"+"  "+jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(jTable7.getSelectedRow()), 1).toString()+" "+"has been successfully created");
      
         sendsms.createSmsAccountCreation(newAccountNumber, "", p);
         
         ancdb.activateAccount(newAccountNumber,this);
//         ancdb.createTriggerAccount(newAccountNumber);
        ancdb.updateStatus(newAccountNumber);
    
        switch(jButton82.getText()){
        case "General":
        dbq.fillMeWithAllAccounts(jTable7);
          sortTable(jTable7,jTextField65);
        break;
        case "Expense":
        dbq.fillMeWithAllExpenseAccounts(jTable7);
          sortTable(jTable7,jTextField65);
        break;
        case "LoanPyt":
        dbq.fillMeWithAllLoanAmounts(jTable7);
          sortTable(jTable7,jTextField65);
        break;
        case "NewLoan":
        dbq.fillMeWithAllAccountsC(jTable7);
          sortTable(jTable7,jTextField65);
        break;
           default:
         dbq.fillMeWithAllAccounts(jTable1);   
             sortTable(jTable1,jTextField8);
            break;
        }
  
   
   
 }else{
  JOptionPane.showMessageDialog(this, "Ledger Creation failed!!"); 
 }

           }  else{
// JOptionPane.showMessageDialog(this, "Please first create the Product for  "+jTable7.getModel().getValueAt( jTable5.convertRowIndexToModel(jTable7.getSelectedRow()), 2).toString());
 
 }
 
}else if(jCheckBox65.getText().equalsIgnoreCase("CREATE NEW CUSTOMER")){

        if ("".equals(firstName3.getText())|"".equals(lastName2.getText())){
         JOptionPane.showMessageDialog(this, "You need to put the first and last names before ledger Creation!!"); 
        }else{
        
           
             String accountName =lastName2.getText()+" "+firstName3.getText();
               String account="",productName="",ProductCode="";
           
                 
                  productName="Transaction Deposit";
                  
             ProductCode="10";
             
               newAccountNumber =ancdb.createAccountNumber("Customer Deposits",ProductCode,productName,this);
            
           
          
         if(createTheLedger(accountName,newAccountNumber,ProductCode,productName,firstName3.getText(),lastName2.getText())){
          
          JOptionPane.showMessageDialog(null, "LEDGER SUCCESSFULLY CREATED");
         JOptionPane.showMessageDialog(null, "Ledger for"+" "+firstName3.getText()+" "+"Account number"+"  "+newAccountNumber+" "+"and Account Name:"+"  "+accountName+" "+"has been successfully created");
       
               ancdb.activateAccount(newAccountNumber,this);
//         ancdb.createTriggerAccount(newAccountNumber);
        ancdb.updateStatus(newAccountNumber);
          sortTable(jTable7,jTextField65);
           switch(jButton82.getText()){
        case "General":
        dbq.fillMeWithAllAccounts(jTable7);
       
         sortTable(jTable7,jTextField65);
        break;
        case "Expense":
        dbq.fillMeWithAllExpenseAccounts(jTable7);
          sortTable(jTable7,jTextField65);
        break;
        case "LoanPyt":
        dbq.fillMeWithAllLoanAmounts(jTable7);
          sortTable(jTable7,jTextField65);
        break;
        case "NewLoan":
        dbq.fillMeWithAllAccountsC(jTable7);
         sortTable(jTable7,jTextField65);
        break;
           default:
         dbq.fillMeWithAllAccounts(jTable1);   
             sortTable(jTable1,jTextField8);
            break;
        
        }
         
            
           
         } else{
         JOptionPane.showMessageDialog(this, "Creation of New Ledger Failed!!");
         }}
}else{
JOptionPane.showMessageDialog(this, "Please specify the action to make \"CREATE NEW LEDGER\" OR \"CREATE SUB LEDGER\"");

}

return newAccountNumber;
} 
     
 private boolean createTheLedger(String accountName,String account,String ProductCode,String productName,String firstName,String lastName){
     
//     JOptionPane.showMessageDialog(this, accountName+";"+account+";"+ProductCode+";"+productName+""+firstName+";"+lastName);
accountDetails=new ArrayList<>();   List bga= new ArrayList<>();
         customerDetails=new ArrayList<>();
        
         bga.add(0, accountName);
         bga.add(1, account);
          bga.add(2, "0");
           bga.add(3, "0");
            bga.add(4, "0");
           bga.add(5, "0");
            bga.add(6, "NB");
            
     accountDetails.add(0, "Credits");//Account cat 1:0
     accountDetails.add(1, "Liabilities");//Account cat 2:1
      accountDetails.add(2, "Current Liabilities & Provisions"); //Account cat 3:2
      accountDetails.add(3, "Current Liabilities");//Account cat 4:3
       accountDetails.add(4, "Customer Deposits");//Account cat 5:4
      accountDetails.add(5, account);  //Account Number:5
     accountDetails.add(6, "0.0"); //Account balance:6  
       accountDetails.add(7,  accountName);//Account Name:7
       accountDetails.add(8,  "For holding Customer/Member account balance");//Account Purpose:8
       accountDetails.add(9, this.userId);//User Id:9
            accountDetails.add(10,  ProductCode);//Product Code:10
       accountDetails.add(11, productName);//Product Name:9
       ancdb.createAccount(accountDetails); 
        updateLoans initialUpdate=new updateLoans(userId);
          initialUpdate.createIndividualPostingName(account);
          dbq.loanBoGa(bga);
          
           customerDetails.add(0,account.substring(2, 9));
          customerDetails.add(1, "");  
          customerDetails.add(2, firstName);
          customerDetails.add(3, lastName);
          customerDetails.add(4, "");
          customerDetails.add(5, sdf.format(new Date(System.currentTimeMillis())));
          customerDetails.add(6, "");
          customerDetails.add(7, "");
          customerDetails.add(8, "");
          customerDetails.add(9, "");
          customerDetails.add(10,"");
          customerDetails.add(11, "");
           customerDetails.add(12, "");
          customerDetails.add(13, "");
           customerDetails.add(14, "");
          customerDetails.add(15, "");
           customerDetails.add(16,  "");
          customerDetails.add(17, "");
          customerDetails.add(18, "0.0");
          customerDetails.add(19, "0");
           customerDetails.add(20, ""); 
          customerDetails.add(21, "");
           customerDetails.add(22, "");
          customerDetails.add(23, "");
           customerDetails.add(24, "");
          customerDetails.add(25, "");
           customerDetails.add(26, "");
          customerDetails.add(27, "");
           customerDetails.add(28, "");
          customerDetails.add(29, "");
           customerDetails.add(30, "");
          customerDetails.add(31, "");
           customerDetails.add(32, "");
          customerDetails.add(33, "");
          customerDetails.add(34, sdf.format(new Date(System.currentTimeMillis())));
          customerDetails.add(35, "");
           customerDetails.add(36, account);
          customerDetails.add(37, accountName);
          customerDetails.add(38, this.userId);
           customerDetails.add(39, fios.createFileName("resources", "UserPhoto", "googo.jpg"));
       
          
      return    ancdb.createCustomer(customerDetails); 
}    
     

     public void bulkUpload(){
     List dataInToPostBulk12n=new ArrayList();
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 0).toString().trim());//trn id  
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 1).toString().trim());//trn date
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 2).toString().trim());//trn Type
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 3).toString().trim());//trn code
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 4).toString().trim());//
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 5).toString().trim());
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 6).toString().trim());
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 7).toString().trim());
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 8).toString().trim());
    dataInToPostBulk12n.add(fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt")));
    dataInToPostBulk12n.add("4");
    dataInToPostBulk12n.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(jTable10.getSelectedRow()), 9).toString().trim());

    AddBulkUpload fn = new AddBulkUpload(userId,dataInToPostBulk12n,PostingEntryWindow.this);
    fn.setVisible(true);
    Dimension screenn = Toolkit.getDefaultToolkit().getScreenSize();
    fn.setSize(screenn.getSize());
    fn.pack();
     
     }
     
     
//  public synchronized void StartSms(){
//        myNewTask = new java.util.TimerTask() {
//            @Override
//            public void run() {
//                if(!conn.testInet()){
//                    myNewTask.cancel();
//                    timer.purge();
//                }else{
                   
                   
//                }
//            }
//        };
//        
//            try {
//        wait(12000);
//        } catch (InterruptedException ex) {
//        Logger.getLogger(updateLoans.class.getName()).log(Level.SEVERE, null, ex);
//        }
//            
//    timer.scheduleAtFixedRate(myNewTask, 10*100, 10*100);
//    
//
//    }
//public void StartSmsTimer(){
//    timer1 = new java.util.Timer();
//        myNewTask1 = new java.util.TimerTask() {
//            @Override
//            public void run() {
//           if(timer==null){
//                    timer=new java.util.Timer();
//                     StartSms();
//           }
//            }
//        };
//    timer1.scheduleAtFixedRate(myNewTask1, 10*1000, 10*1000);
//    
//
//    }   
    
    public String getCounter(){
String thecounter="";
fios.forceFileExistanceHundred(fios.createFileName("loanApplication", "amortValues", "otherCounters.txt"));

thecounter =""+(parseInt(fios.stringFileReader(fios.createFileName("loanApplication", "amortValues", "otherCounters.txt")))+1);

fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "otherCounters.txt"), thecounter);
return thecounter;
} 
    
    
  private void generateFile(String fileName){
  JOptionPane.showMessageDialog(this, fileName);  
   
     if (Desktop.isDesktopSupported()) {
      try {
          // no application registered for PDFs
          
          File myFile = new File(fios.createFileName1("Excel", "Files", fileName+".xlsx"));
        
          Desktop.getDesktop().open(myFile);
      } catch (IOException ex) {
          Logger.getLogger(Reportx.class.getName()).log(Level.SEVERE, null, ex);
      }
     }
    
  }   
  
  public List updateDefaults(List theCollection,String accountNumber){
// JOptionPane.showMessageDialog(this, "ddddddddddd");
       String  existance="First Time Borrower";
     if(loan.borrowerExists(accountNumber)){
     existance="Existing Borrower";
     
     }else if(!loan.borrowerExists(accountNumber)){
     
     
      existance="First Time Borrower";
     
     
     }
      
      
        theCollection.add(existance);
        theCollection.add("Individual");
        theCollection.add("Group 1");
        theCollection.add("Group 1");
        theCollection.add("Cycle"+loan.cycleNumber(accountNumber));
        theCollection.add("Salary Loan");
        theCollection.add("Friends");
        theCollection.add("Single Instalment Loan");
        theCollection .add("Business Financing");
        theCollection.add("No History");
        theCollection.add("Can't Tell");
        theCollection.add("No");
        theCollection.add("0"); 
        theCollection.add("Level 1"); 
        theCollection.add("Monthly Income"); 
         theCollection.add("100,000-200,000");
         theCollection.add("Very Low");
        theCollection.add("Self Employment");
        theCollection.add("Agriculture");
         theCollection.add("Male");
           theCollection.add("Single");
           theCollection.add("Minor");
           theCollection.add("No Education");
           
            theCollection.add("Email");
           theCollection.add("augbazi@mail.com");
           theCollection.add("Excellent");
            theCollection.add("Excellent");
              theCollection.add("0792416111");
 
 return theCollection;
 }
 
 
  private void invokeMoreLoanDetails(){
  
    BorrowingCharacteristics frm = new BorrowingCharacteristics(userId,(PostingEntryWindow)this);
       
        frm.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        frm.setSize(screen.getSize());
//        frm.setUserID(userId);
        frm.pack();
  
  }
  
  public void setTheDetailsOfLaon(List newDetails){
  
  this.amortDetails=newDetails;
  
  }
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> InterestRegimeComboBox;
    private javax.swing.JButton JBTrnSqNo;
    private javax.swing.JButton JBTrnSqNo1;
    private javax.swing.JButton JBTrnSqNo2;
    private javax.swing.JPanel JpanelSummuryPanel;
    private javax.swing.JPanel allAccountsPanel;
    private javax.swing.JFormattedTextField amountCredit;
    private javax.swing.JFormattedTextField amountCredit1;
    private javax.swing.JFormattedTextField amountCredit2;
    private javax.swing.JFormattedTextField amountCredit3;
    private javax.swing.JFormattedTextField amountFieldDebit1;
    private javax.swing.JButton batchPosingButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel cashRecon;
    private javax.swing.JTextField chequeNumber;
    private javax.swing.JFormattedTextField clock;
    private javax.swing.JFormattedTextField creditAccountField;
    private javax.swing.JFormattedTextField creditAccountField71;
    private javax.swing.JFormattedTextField creditAccountField72;
    private javax.swing.JTextField creditAccountName;
    private javax.swing.JTextField creditNarration1;
    private javax.swing.JTextField creditNarration2;
    private javax.swing.JTextField creditRefNumber;
    private javax.swing.JPanel creditingPanel;
    private javax.swing.JFormattedTextField debitAccountField;
    private javax.swing.JTextField debitAccountName;
    private javax.swing.JPanel debitPanel;
    private javax.swing.JTextField firstName3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton100;
    private javax.swing.JButton jButton101;
    private javax.swing.JButton jButton103;
    private javax.swing.JButton jButton104;
    private javax.swing.JButton jButton105;
    private javax.swing.JButton jButton106;
    private javax.swing.JButton jButton107;
    private javax.swing.JButton jButton108;
    private javax.swing.JButton jButton109;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton110;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton40;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton43;
    private javax.swing.JButton jButton44;
    private javax.swing.JButton jButton45;
    private javax.swing.JButton jButton46;
    private javax.swing.JButton jButton47;
    private javax.swing.JButton jButton48;
    private javax.swing.JButton jButton49;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton50;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton55;
    private javax.swing.JButton jButton56;
    private javax.swing.JButton jButton57;
    private javax.swing.JButton jButton58;
    private javax.swing.JButton jButton59;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton60;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton62;
    private javax.swing.JButton jButton63;
    private javax.swing.JButton jButton64;
    private javax.swing.JButton jButton65;
    private javax.swing.JButton jButton66;
    private javax.swing.JButton jButton67;
    private javax.swing.JButton jButton68;
    private javax.swing.JButton jButton69;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton70;
    private javax.swing.JButton jButton71;
    private javax.swing.JButton jButton72;
    private javax.swing.JButton jButton73;
    private javax.swing.JButton jButton74;
    private javax.swing.JButton jButton75;
    private javax.swing.JButton jButton77;
    private javax.swing.JButton jButton78;
    private javax.swing.JButton jButton79;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton80;
    private javax.swing.JButton jButton81;
    private javax.swing.JButton jButton82;
    private javax.swing.JButton jButton83;
    private javax.swing.JButton jButton84;
    private javax.swing.JButton jButton85;
    private javax.swing.JButton jButton86;
    private javax.swing.JButton jButton87;
    private javax.swing.JButton jButton88;
    private javax.swing.JButton jButton89;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton90;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JButton jButton94;
    private javax.swing.JButton jButton95;
    private javax.swing.JButton jButton96;
    private javax.swing.JButton jButton97;
    private javax.swing.JButton jButton98;
    private javax.swing.JButton jButton99;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox29;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox30;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox32;
    private javax.swing.JCheckBox jCheckBox33;
    private javax.swing.JCheckBox jCheckBox34;
    private javax.swing.JCheckBox jCheckBox35;
    private javax.swing.JCheckBox jCheckBox36;
    private javax.swing.JCheckBox jCheckBox37;
    private javax.swing.JCheckBox jCheckBox38;
    private javax.swing.JCheckBox jCheckBox39PostAnAdjustment;
    private javax.swing.JCheckBox jCheckBox39PostAnAdjustment1;
    private javax.swing.JCheckBox jCheckBox39PostAnAdjustment2;
    private javax.swing.JCheckBox jCheckBox39PostAnAdjustment3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox65;
    private javax.swing.JCheckBox jCheckBox69;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox70;
    private javax.swing.JCheckBox jCheckBox71;
    private javax.swing.JCheckBox jCheckBox72;
    private javax.swing.JCheckBox jCheckBox73;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox26;
    private javax.swing.JComboBox jComboBox27;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox56;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox68;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JComboBox jComboTransactionType;
    private javax.swing.JFormattedTextField jFormattedTextField3S;
    private javax.swing.JFormattedTextField jFormattedTextField3S3;
    private javax.swing.JLabel jLTrnSqNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLuserId;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelDetailedPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTFLoginTime1;
    private javax.swing.JTextField jTFTrnSqNo;
    private javax.swing.JTextField jTFuserId1;
    private javax.swing.JTextField jTFuserId2;
    private javax.swing.JTextField jTFuserId4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTable jTable1;
    public javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable12;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable14;
    private javax.swing.JTable jTable15;
    private javax.swing.JTable jTable16;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    public javax.swing.JTable jTable9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField60;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField62;
    private javax.swing.JTextField jTextField65;
    private javax.swing.JTextField jTextField66;
    public javax.swing.JTextField jTextField67;
    private javax.swing.JTextField jTextField68;
    private javax.swing.JTextField jTextField69;
    private javax.swing.JTextField jTextField7;
    public javax.swing.JTextField jTextField70;
    private javax.swing.JTextField jTextField71;
    private javax.swing.JTextField jTextField72;
    private javax.swing.JTextField jTextField73;
    private javax.swing.JTextField jTextField76;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTree jTree2;
    private javax.swing.JTextField lastName2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openDay;
    private javax.swing.JButton openDay1;
    private javax.swing.JButton openDay2;
    private javax.swing.JButton openDay3;
    private javax.swing.JButton openDay4;
    private javax.swing.JButton openDay5;
    private javax.swing.JButton openDay6;
    private javax.swing.JComboBox<String> portfolioOwner;
    private javax.swing.JComboBox<String> portfolioOwner1;
    private javax.swing.JPanel postingHeaderButtons;
    private javax.swing.JPanel postingSubHeaderButtons;
    private javax.swing.JTextField reference1;
    private javax.swing.JButton rejectButton;
    private javax.swing.JComboBox<String> repaymentCycle;
    private javax.swing.JButton responseButton;
    private javax.swing.JButton reverseButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox titleJCbox2;
    private javax.swing.JButton validateButton;
    private javax.swing.JTextField valueDate;
    private javax.swing.JTextField valueDate1;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables

 @Override
    public void updateText(String text) {
       switch( fios.intFileReader(fios.createFileName("PMMS_Statements", "reports", "calSelection.txt"))){
        case 1200:jTextField62.setText(text);break;
        case 1210:valueDate1.setText(text);break;
         case 1217:jTextField23.setText(text);break;
    }

      
   fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", "valueDate.txt"),text);
    
    }

    

    @Override
    public void mouseClicked(MouseEvent me) { 
        
        
        
        
       if (me.getClickCount()==2){
           if(me.getSource() == jTable3){
               
            int frombefore=fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliation2.txt"));    
       if(frombefore==57){
       
           fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliation2.txt"), "82");
           PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose(); 
       
       
       }else{
                    int selectedRow =jTable3.getSelectedRow();
                    int selectedColumn =jTable3.getSelectedColumn();
		   if (selectedRow > -1&&selectedColumn>-1)
	   {
	 
         Object cvalue = jTable3.getModel().getValueAt( jTable3.convertRowIndexToModel(selectedRow), 2);
         
    String accountNumber = cvalue.toString();

          int from=fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliation.txt"));
       
          if(from==26){
       
              
//             updateDebitFields(accountNumber) ;
               switch(jComboTransactionType.getSelectedItem().toString()){

    case "Gen":

      
        break;
             case "Save":
//       populateSavingsDetails(accountNumber);
    break;
      case "Save2":
//       populateSavingsDetails(accountNumber);
    break;
                     case "WdrawS":
                        
      if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//  populateWithdrawsDetails(accountNumber);
                       }
    break;
    
    case "WdrawS2":
                        
      if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//  populateWithdrawsDetails(accountNumber);
                       }
    break;
    
case "LoanR":
    
//populateLoanRepayDetails(accountNumber);
    
    break;
        
case "LoanRD":
    
//populateLoanRepayDetails(accountNumber);
    
    break;
case "LoanD":

    break;
case "LoanW":
 
    break;
case "LoanRe":
  
    
    break;
case "LoanT":

    break;
case "LoanC":

    break;

case "CapR":
    if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//    populateCapRDetails(accountNumber);
                       }

    break;
    
 case "CapRD":
    if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//    populateCapRDetails(accountNumber);
                       }

    break;   
    
    
case "CapRC":

    break;
case "Cap":

    break;
case "BC":
  
    break;
case "CB":
   
    break;
case "CR":
   
    
    break;
case "I":
  
    
    break;
    
case "DCap":

    
    break;
    
    case "DCapD":

    
    break;
}
    
          
          }else if(from==27){
 
//           updateCreditFields(accountNumber);
           
             switch(jComboTransactionType.getSelectedItem().toString()){

    case "Gen":

      
        break;
         case "Save":
       if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//       populateSavingsDetails(accountNumber);
                       }
    break;
     case "Save2":
       if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//       populateSavingsDetails(accountNumber);
                       }
    break;
                                case "WdrawS":
//       populateWithdrawsDetails(accountNumber);
    break;
                             case "WdrawS2":
//       populateWithdrawsDetails(accountNumber);
    break;
case "LoanR":
    
//populateRepayDetails();
    
    break;
    case "LoanRD":
    
//populateRepayDetails();
    
    break;
case "LoanD":

    break;
case "LoanW":
 
    break;
case "LoanRe":
  
    
    break;
case "LoanT":

    break;
case "LoanC":

    break;
case "CapR":

    break;
    case "CapRD":

    break;
case "CapRC":

    break;
case "Cap":

    break;
case "BC":
   
    break;
case "CB":
  
    break;
case "CR":
   
    
    break;
case "I":
  
    
    break;
    
case "DCap":
//populateDCapDetails(accountNumber);
    
    break;
    case "DCapD":
//populateDCapDetails(accountNumber);
    
    break;
     case "Pay Employees Salary":
        if(!(dbq.testTable("bsanca"+accountNumber))){JOptionPane.showMessageDialog(this, "CREDIT ACCOUNT NOT ACTIVATED!!");
       
       
      
          PostingEntryWindow fo15 = new PostingEntryWindow(userId,amortDetails);
        fo15.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        fo15.setSize(screen.getSize());
        fo15.pack();
        this.dispose();
       
       
       }else{     
//      populateSalaryDetails(accountNumber);
                       }
 
    
    break;
}
   
          }
   
         
 postingHeaderButtons  .setVisible(true); 
postingSubHeaderButtons.setVisible(true); 
mainPanel.setVisible(true); 
allAccountsPanel.setVisible(false);    
            
         
                
           }
       }
           }
           
           
             if(me.getSource() == jTable11){
             
                                int selectedRow =jTable11.getSelectedRow();
                    int selectedColumn =jTable11.getSelectedColumn();
		   if (selectedRow > -1&&selectedColumn>-1)
	   {
	 
         Object cvalue = jTable11.getModel().getValueAt( jTable11.convertRowIndexToModel(selectedRow), 0);
//              JOptionPane.showMessageDialog(this, "Got it");
//                  JOptionPane.showMessageDialog(this, dbq.gettxnCodeBatch(cvalue.toString()));
             switch(dbq.gettxnCodeBatch(cvalue.toString())){
              case "RecoverWrittenOffCash":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
        jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
        jButton82.setText("RecoverWrittenOffCash");
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
             jLabel54.setVisible(false);
jTextField25.setVisible(false);   
        break;
              
     
        case "RecoverWrittenOffBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
            jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT THE BORROWER AND BANK LEDGERS");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
       jButton82.setText("RecoverWrittenOffBank"); 
         InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
         
        case "RecoverWrittenOffSavings":
               jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
              jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
        jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
        jButton82.setText("RecoverWrittenOffSavings"); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
        
        case "LoanPyt":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
        jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
        jButton82.setText("LoanPyt");
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
             jLabel54.setVisible(false);
jTextField25.setVisible(false);   
        break;
        
        
        
        
        case "LoanPytBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
            jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT THE BORROWER AND BANK LEDGERS");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
       jButton82.setText("LoanPytBank"); 
         InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        
        
        
        
        
        
        case "LoanPytMobileMoney":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
            jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT THE BORROWER AND MOBILE MONEY ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
       jButton82.setText("LoanPytMobileMoney"); 
         InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        case "LoanPytUnknownMobileMoney":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
            jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT THE BORROWER AND MOBILE MONEY ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
       jButton82.setText("LoanPytUnknownMobileMoney"); 
         InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        
        
        
        
        
        
        
        
        
        
        
        case "LoanPytDepositPartPay":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                         jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
                    jButton98.setVisible(true);
            jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
     JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S ACCOUNT");  
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
        jButton82.setText("LoanPytDepositPartPay"); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;   
        case "DepositPartPayBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false); 
            jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT MEMBER'S ACCOUNT");
         jButton82.setText("DepositPartPayBank");  
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;   
          case "LoanPytSavings":
               jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
              jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
        jComboBox26.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jTextField23.setText(sdf.format(new Date(System.currentTimeMillis())));
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);   
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
        amountCredit2.setVisible(true);
        jButton82.setText("LoanPytSavings"); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(false); jComboBox27.setVisible(false);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
   case "HEFROI":
        jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
       jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
          jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
JOptionPane.showMessageDialog(this, "SELECT MEMBER'S ACCOUNT");
        jButton82.setText("HEFROI"); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
         case "LProcessFees":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
          jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
   JOptionPane.showMessageDialog(this, "SELECT CUSTOMER'S LEDGER");
//       jComboBox27.removeAllItems();
        jButton82.setText("LProcessFees");
//          jComboBox27.setSelectedIndex(0); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "LInsuranceFees":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
          jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
   JOptionPane.showMessageDialog(this, "SELECT CUSTOMER'S LEDGER");
//       jComboBox27.removeAllItems();
        jButton82.setText("LInsuranceFees");
//          jComboBox27.setSelectedIndex(0); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
       case "LProcessFeesBank":
            jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
           jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
          jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
   JOptionPane.showMessageDialog(this,  "SELECT THE BORROWER AND BANK LEDGERS");
//       jComboBox27.removeAllItems();
        jButton82.setText("LProcessFeesBank");
//          jComboBox27.setSelectedIndex(0); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
         case "LInsuranceFeesBank":
            jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
           jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
          jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
   JOptionPane.showMessageDialog(this,  "SELECT THE BORROWER AND BANK LEDGERS");
//       jComboBox27.removeAllItems();
        jButton82.setText("LInsuranceFeesBank");
//          jComboBox27.setSelectedIndex(0); 
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;    
                 case "WithdrawDepositPartPay":
                      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
                     jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
                     jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT MEMBER'S ACCOUNT");
        
           jButton82.setText("WithdrawDepositPartPay");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
                     break;
                     
              case "WithdrawDepositPartPayBank":
                   jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
                  jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
                     jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT MEMBER'S ACCOUNT");
        
           jButton82.setText("WithdrawDepositPartPayBank");  
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
                     break;         
                     
                     
                     
                     
                     
                     
                  case "DepositPartPay":
                       jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
                      jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
                     jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT MEMBER'S ACCOUNT");
         jButton82.setText("DepositPartPay"); 
                   InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);  jComboBox27.setVisible(false); 
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
                      break;
                 
        case "General":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT BOTH DEBIT AND CREDIT A/Cs");
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(true);
        creditAccountField71.setVisible(true);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
        jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton82.setText("General"); 
        
          switch(dbq.title(userId)){
            case "Supervisor":
           jCheckBox39PostAnAdjustment.setVisible(true);
           jTextField62.setVisible(true);
jButton67.setVisible(true);
                break;
          
          }
          
          
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "Expense":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE EXPENSE ACCOUNT");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jLabel60.setVisible(true);
        jTextField67.setVisible(true);     
         jButton82.setText("Expense");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "accumDepreciation":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE NUMBER OF INSTALMENTS");
        
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jLabel60.setVisible(true);
        jTextField67.setVisible(true);     
         jButton82.setText("accumDepreciation");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                 jComboBox27.setVisible(true);
                   amountCredit2.setEditable(true);
                   jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "ExpenseBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE EXPENSE ACCOUNT AND BANK ACCOUNTS");
           jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jLabel60.setVisible(true);
        jTextField67.setVisible(true);     
         jButton82.setText("ExpenseBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        
        case "NewLoan":
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT BORROWER ACCOUNT");
        jButton67.setVisible(true);
        jTextField60.setVisible(true);
        jTextField60.setText(fios.stringFileReader( fios.createFileName("persistence", "interestPlan", "flatInterestPlan5.txt")));
        jTextField61.setVisible(true);
        jTextField61.setText(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[0]);
        jTextField62.setText(sdf.format(new Date(System.currentTimeMillis())));
        jTextField62.setVisible(true);
        jLabel56.setVisible(true);
//        jLabel55.setVisible(true);
        jLabel53.setVisible(true);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton84.setVisible(true);  
        InterestRegimeComboBox.setVisible(true);
        repaymentCycle.setVisible(true);
         jButton82.setText("NewLoan"); jComboBox27.setVisible(false);
           amountCredit2.setEditable(true);
           jLabel54.setVisible(true);
jTextField25.setVisible(true);
 jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(true);
//             invokeMoreLoanDetails();
        break;
   case "NewLoanFixed":
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT BORROWER ACCOUNT");
        jButton67.setVisible(true);
        jTextField60.setVisible(false);
        jTextField60.setText(fios.stringFileReader( fios.createFileName("persistence", "interestPlan", "flatInterestPlan5.txt")));
        jTextField61.setVisible(true);
        jTextField61.setText("1");
        jTextField62.setText(sdf.format(new Date(System.currentTimeMillis())));
        jTextField62.setVisible(true);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(true);
        jLabel53.setVisible(true);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
         jButton99.setVisible(true);
        jTextField67.setVisible(true);  
        jButton84.setVisible(true);  
        InterestRegimeComboBox.setVisible(true);
        repaymentCycle.setVisible(true);
         jButton82.setText("NewLoanFixed"); 
         jComboBox27.setVisible(false);
           jLabel54.setVisible(true);
          jTextField25.setVisible(true);
          jLabel55.setVisible(true);
          amountCredit3.setVisible(true);
          
//invokeMoreLoanDetails();          
        break;          
            
            
            
            
         case "NewLoanBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(true);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT BORROWER AND BANK LEDGERS");
        jButton67.setVisible(true);
        jTextField60.setVisible(true);
        jTextField60.setText(fios.stringFileReader( fios.createFileName("persistence", "interestPlan", "flatInterestPlan5.txt")));
        jTextField61.setVisible(true);
        jTextField61.setText(fios.stringFileReader(fios.createFileName("persistence", "loanTenure", "handleValues.txt")).split("[,]", 2)[0]);
        jTextField62.setText(sdf.format(new Date(System.currentTimeMillis())));
        jTextField62.setVisible(true);
        jLabel56.setVisible(true);
//        jLabel55.setVisible(true);
        jLabel53.setVisible(true);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
         jButton84.setVisible(true);  
        InterestRegimeComboBox.setVisible(true);
        repaymentCycle.setVisible(true); jComboBox27.setVisible(false);
         jButton82.setText("NewLoanBank");
           amountCredit2.setEditable(true);
           jLabel54.setVisible(true);
jTextField25.setVisible(true);

//    invokeMoreLoanDetails();

        break;
    
                case "MobileMoneyWithdraw":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel54.setVisible(false);
jTextField25.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE MOBILE MONEY ACCOUNT");
           jButton82.setText("MobileMoneyWithdraw");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "MobileMoneyDeposit":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE MOBILE MONEY ACCOUNT");
           jButton82.setText("MobileMoneyDeposit");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
                
                
                
                
        
        case "Withdrawal":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel54.setVisible(false);
jTextField25.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BANK ACCOUNT");
           jButton82.setText("Withdrawal");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "Deposit":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BANK ACCOUNT");
           jButton82.setText("Deposit");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "Payable":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
         jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE PAYABLE TO");
         jButton82.setText("Payable");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
          case "PayableBank":
               jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
              jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
         jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY AND BANK LEDGERS");
         jButton82.setText("PayableBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
          case "ClearReceivableBank":
               jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
              jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
         jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY AND BANK LEDGERS");
         jButton82.setText("ClearReceivableBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "Drawing":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
 JOptionPane.showMessageDialog(this, "SELECT THE DRAWER'S LEDGER");
        jButton82.setText("Drawing");
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "DrawingBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
 JOptionPane.showMessageDialog(this, "SELECT THE DRAWER'S LEDGER");
        jButton82.setText("DrawingBank");
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        case "Receivable":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY'S LEDGER");
          jButton82.setText("Receivable");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
       
        
        case "ClearPayable":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY'S LEDGER");
         jButton82.setText("ClearPayable");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
         case "Prepayments":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE PREPAID  LEDGER");
         jButton82.setText("Prepayments");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
           case "PrepaymentsBank":
                jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
               jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE PREPAID  LEDGER");
         jButton82.setText("PrepaymentsBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "SavingPenalties":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE SAVINGS LEDGER");
         jButton82.setText("SavingPenalties");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "ClearPayableBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY AND BANK LEDGERS");
         jButton82.setText("ClearPayableBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
         case "ReceivableBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
        JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY AND BANK LEDGERS");
         jButton82.setText("ReceivableBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;

        case "ClearReceivable":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
   JOptionPane.showMessageDialog(this, "SELECT THE BENEFICIARY'S LEDGER");  
         jButton82.setText("ClearReceivable");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "Salary":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);     
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
   JOptionPane.showMessageDialog(this, "SELECT THE EMPLOYEE ACCOUNT");
         jButton82.setText("Salary");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
           amountCredit2.setEditable(true);
           jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
 case "Savings":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this, "SELECT CUSTOMER'S LEDGER");
         jButton82.setText("Savings");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        case "SavingsBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this, "SELECT CUSTOMER AND BANK LEDGERS");
         jButton82.setText("SavingsBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         
        case "SavingsTransfer":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this, "SELECT TRANSFERER AND TRANSFEREE LEDGERS");
         jButton82.setText("SavingsTransfer");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "WithdrawSavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
JOptionPane.showMessageDialog(this, "SELECT  CUSTOMER'S LEDGER");
        jButton82.setText("WithdrawSavings");
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
          case "WithdrawSavingsBank":
               jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
              jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
        jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
JOptionPane.showMessageDialog(this, "SELECT  CUSTOMER'S LEDGER");
        jButton82.setText("WithdrawSavingsBank");
          InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break; 
 case "Capitalisation":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this,"SELECT SHARE HOLDER'S LEDGER");
           jButton82.setText("Capitalisation");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
         case "CapitalisationBank1":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this,"SELECT SHARE HOLDER'S LEDGER");
           jButton82.setText("CapitalisationBank1");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "SalaryBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);     
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this,"SELECT THE EMPLOYEE ACCOUNT");
           jButton82.setText("SalaryBank");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
//  case "CapitalisationBank":
////         JOptionPane.showMessageDialog(this, "again"+dbq.gettxnCodeBatch(cvalue.toString()));
//        jComboBox26.setVisible(false);
//          jButton67.setVisible(false);
//        jTextField60.setVisible(false);
//        jTextField61.setVisible(false);
//        jTextField62.setVisible(false);
//        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
//        jLabel53.setVisible(false);
//         amountCredit2.setVisible(true);
//         jLabel60.setVisible(true);
//        jTextField67.setVisible(true); 
//        jButton66.setVisible(true);
//        creditAccountField72.setVisible(true);
//        jButton65.setVisible(false);
//        creditAccountField71.setVisible(false);
//    JOptionPane.showMessageDialog(this,"SELECT BOTH SHARE HOLDER AND BANK LEDGER");
//           jButton82.setText("CapitalisationBank"); jComboBox27.setVisible(false);
//               amountCredit2.setEditable(true);
//             jLabel54.setVisible(false);
//jTextField25.setVisible(false);
//        break;
        
        
        case "CapitalisationSavings":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this,"SELECT SHARE HOLDER'S LEDGER");
           jButton82.setText("CapitalisationSavings");
           
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
 case "Decaptalisation":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT SHARE HOLDER'S LEDGER");
          jButton82.setText("Decaptalisation");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
     case "DecaptalisationSavings":
          jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
         jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT SHARE HOLDER'S LEDGER");
          jButton82.setText("DecaptalisationSavings");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;    
     
     
     
     
             case "AdminCosts":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("AdminCosts");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
     
     case "MembershipFees":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("MembershipFees");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "FinesAndCharges":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("FinesAndCharges");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
        
        
         case "AnnualSubscriptionFees":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("AnnualSubscriptionFees");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
         case "AnnualSubsFeesBank":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("AnnualSubsFeesBank");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "FinesAndChargesBank":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("FinesAndChargesBank");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "LedgerFees":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT CUSTOMER/MEMBER'S LEDGER");
          jButton82.setText("LedgerFees");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
                
                
                 case "AdminCostsBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("AdminCostsBank");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "MembershipFeesBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("MembershipFeesBank");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "LedgerFeesBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT CUSTOMER/MEMBER'S LEDGER");
          jButton82.setText("LedgerFeesBank");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         
                 case "FinesAndChargesSavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("FinesAndChargesSavings");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        case "AdminCostsSavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("AdminCostsSavings");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "MembershipFeesSavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("MembershipFeesSavings");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
          case "LedgerFeesSavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
         JOptionPane.showMessageDialog(this,"SELECT MEMBER'S LEDGER");
          jButton82.setText("LedgerFeesSavings");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
 case "RecoverInterest":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S LEDGER");
            jButton82.setText("RecoverInterest");
              InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
     
     
       
              
     
                case "RecoverAccumulatedInterestDepositPartPay":
                     jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S LEDGER");
            jButton82.setText("RecoverAccumulatedInterestDepositPartPay");
            
              InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
                    
                     case "RecoverInterestBank":
                          jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S LEDGER");
            jButton82.setText("RecoverInterestBank");
            
              InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
               
      case "RecoverInterestDepositPartPay":
           jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
          jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this, "SELECT THE BORROWER'S LEDGER");
            jButton82.setText("RecoverInterestDepositPartPay");
            
              InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
        
        
        
    case "WriteOffInterest":
         jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffInterest");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
          
    case "WriteOffProcessingFees":
         jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
        jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffProcessingFees");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
   
        
        case "WriteOffInterestDepositPartPay":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffInterestDepositPartPay");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
         case "WriteOffAccumulatedInterestDepositPartPay":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffAccumulatedInterestDepositPartPay");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
        
         case "WriteOffAccumulatedInterestSavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffAccumulatedInterestSavings");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
        
          case "WriteOffInterestSavings":
               jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
              jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffInterestSavings");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
         case "WriteOffPenaltySavings":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffPenaltySavings");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
        
       case "WriteOffInterestBank":
            jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
           jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffInterestBank");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;   
        
        
       case "WriteOffProcessingFeesBank":
            jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
           jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
             jButton82.setText("WriteOffProcessingFeesBank");
               InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
           
 case "RecoverPenalty":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
      jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER");
          jButton82.setText("RecoverPenalty");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "RecoverPenaltyBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
      jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER");
          jButton82.setText("RecoverPenaltyBank");
            InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         case "WriteOffPenalty":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
         jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
         jButton82.setText("WriteOffPenalty");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        case "WriteOffPenaltyBank":
             jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
            jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
         jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
      JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
         jButton82.setText("WriteOffPenaltyBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;  
       
      
 case "RecoverAccumulatedInterest":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
    jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER");
         jButton82.setText("RecoverAccumulatedInterest");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
        
         case "RecoverAccumulatedInterestBank":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
    jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
    JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER");
         jButton82.setText("RecoverAccumulatedInterestBank");
           InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
         
         case "WriteOffAccumulatedInterest":
              jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
             jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
           jButton82.setText("WriteOffAccumulatedInterest");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
 case "WriteOffAccumulatedInterestBank":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(true);
                    jTextField23.setVisible(true);
                    jButton98.setVisible(true);
        jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true);  
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER"); 
           jButton82.setText("WriteOffAccumulatedInterestBank");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
     case "BadLoansRecovered":
          jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
         jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER");   
           jButton82.setText("BadLoansRecovered");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                  amountCredit2.setEditable(true);
                  jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
 case "BadLoansRecoveredBank":
      jLabel55.setVisible(false);
          amountCredit3.setVisible(false);
           jButton99.setVisible(false);
     jLabel67.setVisible(false);
                    jTextField23.setVisible(false);
                    jButton98.setVisible(false);
       jComboBox26.setVisible(false);
          jButton67.setVisible(false);
        jTextField60.setVisible(false);
        jTextField61.setVisible(false);
        jTextField62.setVisible(false);
        jLabel56.setVisible(false);
//        jLabel55.setVisible(false);
        jLabel53.setVisible(false);
         amountCredit2.setVisible(true);
         jLabel60.setVisible(true);
        jTextField67.setVisible(true); 
        jButton66.setVisible(true);
        creditAccountField72.setVisible(true);
        jButton65.setVisible(false);
        creditAccountField71.setVisible(false);
       JOptionPane.showMessageDialog(this,"SELECT THE BORROWER'S LEDGER");   
           jButton82.setText("BadLoansRecoveredBank");
             InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false);
                  InterestRegimeComboBox.setVisible(false);
        repaymentCycle.setVisible(false);
        InterestRegimeComboBox.setVisible(false);
                jButton84.setVisible(false); jComboBox27.setVisible(false);
                 amountCredit2.setEditable(true);
                 jLabel54.setVisible(false);
jTextField25.setVisible(false);
        break;
 
   }
     jPanel10.setVisible(true);
        jPanel19.setVisible(true);
        jPanel28.setVisible(false);
                
             
           }        
             
             } 
           
           
             
             
             
     if(me.getSource() == jTable7){
               
   
     
                    int selectedRow =jTable7.getSelectedRow();
                    int selectedColumn =jTable7.getSelectedColumn();
		   if (selectedRow > -1&&selectedColumn>-1)
	   {
	 
      

          int from=fios.intFileReader(fios.createFileName("loanApplication", "amortValues", "allAccountsAppliationBatch.txt"));
        
          if(from==30){

              double amount=0.0;  
            
            
           switch(jComboBox26.getSelectedItem().toString()){
         case "I":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString());
        break;
        case "AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;
        case "LP":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break;
        case "P":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
        case "P&I":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
          case "P&I&AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&AI":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&LP":
         amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
        case "P&AI":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
          case "P&AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&I&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
           case "P&I&AI&LP":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break; 
          case "CloseLoan":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
           }

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
//          fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString());
          amountCredit2.setValue(amount);
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==31){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
         
          amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
         
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }
          else if(from==32){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt(jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
             jPanel20.setVisible(true);
   
    
                jPanel21.setVisible(false); 
          
          }else if(from==33){
          creditAccountField71.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
//                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==34){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          }else if(from==35){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==51){
         
              creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
         
          fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());       
         fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvGG"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());   
         fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvKK"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()); 
      
         amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
         
         
              Object[] optionsx = {"YES",  "NO"};
    int nx = JOptionPane.showOptionDialog(this,  "Do you want to capture more loan details?",
    "MORE LOAN DETAILS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsx, optionsx[0]);
    if(nx==JOptionPane.YES_OPTION){
        
   invokeMoreLoanDetails();
   fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
   
    }
    else if (nx==JOptionPane.NO_OPTION){   
           amortDetails=new ArrayList();
updateDefaults(amortDetails,jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());

    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
     
    }
         
         jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          }else if(from==36){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          }else if(from==37){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          
          }else if(from==38){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==39){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          
          }else if(from==40){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==41){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
           jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          
          }else if(from==42){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
              jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          }else if(from==43){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==44){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
         
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==45){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          
          }else if(from==46){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
         
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==47){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
            jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          
          }else if(from==48){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
           jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          }else if(from==49){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==50){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
     
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==52){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
            jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          }else if(from==53){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
      
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==54){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==55){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          jPanel20.setVisible(true);

                jPanel21.setVisible(false);   
            
         
         }else if(from==56){
              
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
          
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
       
                    jPanel20.setVisible(true);

                jPanel21.setVisible(false);   
            
          
          }else if(from==57){
          
            double amount=0.0;  
            
            
           switch(jComboBox26.getSelectedItem().toString()){
         case "I":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString());
        break;
        case "AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;
        case "LP":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break;
        case "P":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
        case "P&I":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
          case "P&I&AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&AI":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&LP":
         amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
        case "P&AI":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
          case "P&AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&I&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
           case "P&I&AI&LP":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break; 
          case "CloseLoan":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break; 
           }

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
         
          amountCredit2.setValue(amount);
          
          jPanel20.setVisible(true);

                jPanel21.setVisible(false);   
            
          
           }else if(from==58){
          
            double amount=0.0;  
            
            
           switch(jComboBox26.getSelectedItem().toString()){
               
       case "I":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString());
        break;
        case "AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;
        case "LP":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break;
        case "P":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
        case "P&I":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
          case "P&I&AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&AI":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&LP":
         amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
        case "P&AI":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
          case "P&AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&I&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
           case "P&I&AI&LP":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break; 
          case "CloseLoan":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break; 
           }

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
          
          amountCredit2.setValue(amount);
          
          jPanel20.setVisible(true);

         jPanel21.setVisible(false);   
            
          
   }else if(from==59){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
   jPanel20.setVisible(true);

  jPanel21.setVisible(false);   
            
   
   }else if(from==60){
   
   
    double amount=0.0;  
            
            
           switch(jComboBox26.getSelectedItem().toString()){
        case "I":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString());
        break;
        case "AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;
        case "LP":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break;
        case "P":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
        case "P&I":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
          case "P&I&AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&AI":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&LP":
         amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
        case "P&AI":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
          case "P&AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&I&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
           case "P&I&AI&LP":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break; 
          case "CloseLoan":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break; 
           }

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
       
          amountCredit2.setValue(amount);
          
      JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
    
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false); 
   }else if(from==61){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
  }else if(from==62){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
 }else if(from==63){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());  
    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvGG"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());  
     fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvKK"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());  
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   

//     Object[] optionsx = {"YES",  "NO"};
//    int nx = JOptionPane.showOptionDialog(this,  "DO YOU WANT TO CAPTURE MORE LOAN DETAILS???",
//    "MORE LOAN DETAILS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsx, optionsx[0]);
//    if(nx==JOptionPane.YES_OPTION){
//        
//     invokeMoreLoanDetails();
//   fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
//   
//    }
//    else if (nx==JOptionPane.NO_OPTION){   
//        
//            amortDetails=new ArrayList();
//updateDefaults(amortDetails,jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
//
//    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
//     
//    
//    }


                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
 }else if(from==64){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
}else if(from==65){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
 }
else if(from==66){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
      
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
       }else if(from==69){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
 }else if(from==68){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
   jPanel20.setVisible(true);

  jPanel21.setVisible(false);   
            
   
  }else if(from==70){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
}else if(from==71){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
}else if(from==72){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
   
}else if(from==73){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BENEFICIERY LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsC(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
   
 }else if(from==75){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}
   else if(from==76){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
} else if(from==77){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}
else if(from==78){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}   else if(from==79){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==80){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
} else if(from==81){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}    else if(from==82){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}
   else if(from==83){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}    
   else if(from==84){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}    else if(from==85){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
} else if(from==86){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}   else if(from==87){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}   else if(from==88){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}  else if(from==89){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }
                
          else if(from==90){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          } else if(from==91){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          } else if(from==92){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}  else if(from==93){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==94){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==95){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==96){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }else if(from==97){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
                
          }
          else 
              if(from==98){
                       double balanceAmount=0.0;
               if(dbq.testTable("bsanca01107000110")){
              String numberInstalmens=jComboBox27.getSelectedItem().toString();
                  if(numberInstalmens.equalsIgnoreCase("Select Instalments To Process")){
               
              JOptionPane.showConfirmDialog(this, "Please select atleast one instalment");
              
           
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
               return;
               }else{
                  
                 if(dbq.assetStoreNotThere(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())){
                 
                    
              JOptionPane.showConfirmDialog(this, "Please first create the asset register and amortisation schedule for depreciation!!!");
              
           
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
                 
                 }else{ 
                     
             balanceAmount=dbq.depriAmount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString(),parseInt(numberInstalmens),this);      
               
             amountCredit2.setValue(balanceAmount);  
                               
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   amountCredit2.setEditable(false);
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); }
                  }
                   
                  
     
        }else{
         JOptionPane.showMessageDialog(this, "Please First create the accumulated depreciation Ledgers");
             
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
              } 
             
   
 } 
              else if(from==100){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
                
          }  else if(from==101){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
                
          }else if(from==102){
               
              creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
         
          fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());       
         fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvGG"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());   
         fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvvKK"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()); 
      
         amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
         
//         Object[] optionsx = {"YES",  "NO"};
//    int nx = JOptionPane.showOptionDialog(this,  "Do you want to capture more loan details?",
//    "MORE LOAN DETAILS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsx, optionsx[0]);
//    if(nx==JOptionPane.YES_OPTION){
//        
//      invokeMoreLoanDetails();
//   fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
//   
//
//    }
//    else if (nx==JOptionPane.NO_OPTION){   
        
                  amortDetails=new ArrayList();
                  
updateDefaults(amortDetails,jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());

    fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccount"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString());
     
//    }

         
        
        
         
         jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
                
          } else if(from==104){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
                
          }else if(from==105){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
      sortTable(jTable8,jTextField73);
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
            
  }else if(from==106){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
        
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          }   else if(from==107){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
} else if(from==108){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
   jPanel20.setVisible(true);

  jPanel21.setVisible(false);   
            
   
  } else if(from==109){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
}else if(from==110){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
   jPanel20.setVisible(true);

  jPanel21.setVisible(false);   
            
   
  } else if(from==112){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
   jPanel20.setVisible(true);

  jPanel21.setVisible(false);   
            
   
  } else if(from==120){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          
          
          } else if(from==121){
   
    creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
   
    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
  
 JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false);  
       sortTable(jTable8,jTextField73);       
   
} else if(from==200){

              double amount=0.0;  
            
            
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
       

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
//          fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "activeAccountvv"+this.userId+".txt"), jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString());
          amountCredit2.setValue(amount);
             jPanel20.setVisible(true);

                jPanel21.setVisible(false); 
          } else if(from==201){
   
   
    double amount=0.0;  
            
            
   
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
       
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
       
          amountCredit2.setValue(amount);
          
      JOptionPane.showMessageDialog(this,"PLEASE SELECT THE BANK LEDGER!!!!");
      
      
      dbq.fillMeWithAllAccountsBank(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
    
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false); 
   }else if(from==202){
          
            double amount=0.0;  
            
 
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
       

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
          
          amountCredit2.setValue(amount);
          
          jPanel20.setVisible(true);

         jPanel21.setVisible(false);   
            
          
    }else if(from==203){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          
             jPanel20.setVisible(true);

                jPanel21.setVisible(false);
   
   } else if(from==204){
          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString()));
                    amountCredit2.setValue(parseDouble(dbq.lastTxn(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 2).toString())));
          
             jPanel20.setVisible(true);

                jPanel21.setVisible(false);

                
           
       
     }else if(from==205){
   
   
    double amount=0.0;  
            
            
           switch(jComboBox26.getSelectedItem().toString()){
        case "I":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString());
        break;
        case "AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;
        case "LP":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break;
        case "P":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
        case "P&I":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
          case "P&I&AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&AI":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&LP":
         amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
        case "P&AI":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
          case "P&AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&I&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
           case "P&I&AI&LP":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break; 
          case "CloseLoan":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break; 
           }

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
       
          amountCredit2.setValue(amount);
          
      JOptionPane.showMessageDialog(this,"PLEASE SELECT THE MOBILE MONEY ACCOUNT!!!!");
      
      
      dbq.fillMeWithAllAccountsMobileMoney(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
    
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false); 
   }else if(from==206){
   
   
    double amount=0.0;  
            
            
           switch(jComboBox26.getSelectedItem().toString()){
        case "I":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString());
        break;
        case "AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;
        case "LP":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break;
        case "P":
      amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
        case "P&I":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString());
        break;
          case "P&I&AI":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&AI":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break;  
         case "I&LP":
         amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
        case "P&AI":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
          case "P&AI&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
         case "P&I&LP":
        amount= parseDouble(dbq.ledgerBal(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
        break; 
           case "P&I&AI&LP":
       amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString());
        break; 
          case "CloseLoan":
        amount= parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 6).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 4).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 3).toString())+parseDouble(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 5).toString());
        break; 
           }

          creditAccountField72.setValue(fmt.putSeparatorsOnNormaAccount(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow), 1).toString()));
       
          amountCredit2.setValue(amount);
          
      JOptionPane.showMessageDialog(this,"PLEASE SELECT THE MOBILE MONEY ACCOUNT!!!!");
      
      
      dbq.fillMeWithAllAccountsMobileMoney(jTable8);
    
   renderTableForAccounts(jTable8,jTextField73);
    
      jPanel20.setVisible(false);
jPanel22.setVisible(true);   
                jPanel21.setVisible(false);          
   jPanel28.setVisible(false); 
   }}}
             
            if(me.getSource() == jTable8){

        int selectedRow =jTable8.getSelectedRow();
        
        int selectedColumn =jTable8.getSelectedColumn();
        
        if (selectedRow > -1&&selectedColumn>-1)
	   {
            

                    
               fios.stringFileWriter(fios.createFileName("loanApplication", "amortValues", "accountLedger.txt"),jTable8.getModel().getValueAt( jTable8.convertRowIndexToModel(selectedRow), 2).toString());
                  jPanel20.setVisible(true);

  jPanel21.setVisible(false);  
jPanel22.setVisible(false);         
   jPanel28.setVisible(false); 
   
                 
           }
            
            }   
             
              
           if(me.getSource() == jTable4){

        int selectedRow =jTable4.getSelectedRow();
        
        int selectedColumn =jTable4.getSelectedColumn();
        
        if (selectedRow > -1&&selectedColumn>-1)
	   {
	
         Object batchNumbercc = jTable4.getModel().getValueAt(jTable4.convertRowIndexToModel(selectedRow), 2);
         
           Object txnType = jTable4.getModel().getValueAt(jTable4.convertRowIndexToModel(selectedRow), 3);
           
 Object batchStatus = jTable4.getModel().getValueAt(jTable4.convertRowIndexToModel(selectedRow), 6);
 
 fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt"), batchNumbercc.toString());
 
   fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintType.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 3).toString());
   
 fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString()+"batchPosint.txt"), batchStatus.toString());
 

switch(txnType.toString()){
    
    case"Loan":
        
        jPanelDetailedPanel.setVisible(true);

        JpanelSummuryPanel.setVisible(false);

jButton8.setVisible(false);
jButton26.setVisible(false);
 jButton21.setEnabled(false);
jButton23.setVisible(false); 
  jButton6.setVisible(false); 
        jTable1.setModel( otherLoans.createAllOutstandingLaonPaymentsSpecialxc(batchNumbercc.toString()));

        TableRowSorter<ListDataModel> sorter = new TableRowSorter<>(result);

        jTable1.setRowSorter(sorter); 
sortTable(jTable1,jTextField1);   
   HeaderRenderer header = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());
        int h=0;

        jTable1.getColumnModel().getColumns().nextElement().setResizable(false);
        while(h<jTable1.getColumnModel().getColumnCount()){
        jTable1.getColumnModel().getColumn(h).setHeaderRenderer(header);

        if(h==0){
        jTable1.getColumnModel().getColumn(h).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(50);

        }
        if(h==1){
        jTable1.getColumnModel().getColumn(h).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(100);
        }
        if(h==2){
        jTable1.getColumnModel().getColumn(h).setMinWidth(0);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(180);
        }if(h==3){
        jTable1.getColumnModel().getColumn(h).setMinWidth(4);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(120);
     }if(h==4){
        jTable1.getColumnModel().getColumn(h).setMinWidth(4);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(110);
        }if(h==5){
        jTable1.getColumnModel().getColumn(h).setMinWidth(4);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(110);
        }if(h==6){
        jTable1.getColumnModel().getColumn(h).setMinWidth(6);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(110);
        }if(h==7){
        jTable1.getColumnModel().getColumn(h).setMinWidth(7);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(110);
        }if(h==8){
        jTable1.getColumnModel().getColumn(h).setMinWidth(8);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(110);
        }if(h==8){
        jTable1.getColumnModel().getColumn(h).setMinWidth(8);
        jTable1.getColumnModel().getColumn(h).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(h).setPreferredWidth(110);
        }
        h++;

        }
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT);


        if(row==table.getRowCount()-1){
        this.setFont(new Font("Arial",Font.BOLD,20));
        }else{
        this.setFont(new Font("Arial",Font.PLAIN,18));
        }
// this.setText(value.toString());
        
if(col>=4&&col<=8){
         String text="";
           this.setHorizontalAlignment(RIGHT);
        if(!(value.toString().equals("-")||value.toString().equals(""))){
            
            if(parseDouble(value.toString().replaceAll(",", ""))<0){
            
             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", ""))+")" ;
            }else{
        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "") );
        }
        }
        this.setText(text);
        
        }else{
        this.setText(value.toString());
        }
        if (row%2==0) {
        setBackground(jButton8.getBackground());
        setForeground(jButton7.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton6.getBackground());
        setForeground(jButton7.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }  


        return this;
        }   
        });
          break; 
    case "Savings":
         jPanelDetailedPanel.setVisible(true);

        JpanelSummuryPanel.setVisible(false);

jButton8.setVisible(false);
jButton26.setVisible(false);
 jButton21.setEnabled(false);
jButton23.setVisible(false); 
  jButton6.setVisible(false); 
        jTable1.setModel( otherLoans.createAllOutstandingSavingsPaymentsSpecialxc(batchNumbercc.toString()));

        TableRowSorter<ListDataModel> sorters = new TableRowSorter<>(result);

        jTable1.setRowSorter(sorters); 
sortTable(jTable1,jTextField1);   
   HeaderRenderer headers = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());
        int hs=0;

        jTable1.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hs<jTable1.getColumnModel().getColumnCount()){
        jTable1.getColumnModel().getColumn(hs).setHeaderRenderer(headers);

        if(hs==0){
        jTable1.getColumnModel().getColumn(hs).setMinWidth(0);
        jTable1.getColumnModel().getColumn(hs).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hs).setPreferredWidth(50);

        }
        if(hs==1){
        jTable1.getColumnModel().getColumn(hs).setMinWidth(0);
        jTable1.getColumnModel().getColumn(hs).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hs).setPreferredWidth(100);
        }
        if(hs==2){
        jTable1.getColumnModel().getColumn(hs).setMinWidth(0);
        jTable1.getColumnModel().getColumn(hs).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hs).setPreferredWidth(180);
        }if(hs==3){
        jTable1.getColumnModel().getColumn(hs).setMinWidth(4);
        jTable1.getColumnModel().getColumn(hs).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hs).setPreferredWidth(120);
     }if(hs==4){
        jTable1.getColumnModel().getColumn(hs).setMinWidth(4);
        jTable1.getColumnModel().getColumn(hs).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hs).setPreferredWidth(110);
        }if(hs==5){
        jTable1.getColumnModel().getColumn(hs).setMinWidth(4);
        jTable1.getColumnModel().getColumn(hs).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hs).setPreferredWidth(110);
        }
        hs++;

        }
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT);


        if(row==table.getRowCount()-1){
        this.setFont(new Font("Arial",Font.BOLD,20));
        }else{
        this.setFont(new Font("Arial",Font.PLAIN,18));
        }
// this.setText(value.toString());
        
if(col>=4&&col<=5){
         String text="";
           this.setHorizontalAlignment(RIGHT);
        if(!(value.toString().equals("-")||value.toString().equals(""))){
            
            if(parseDouble(value.toString().replaceAll(",", ""))<0){
            
             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", ""))+")" ;
            }else{
        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "") );
        }
        }
        this.setText(text);
        
        }else{
        this.setText(value.toString());
        }
        if (row%2==0) {
        setBackground(jButton8.getBackground());
        setForeground(jButton7.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton6.getBackground());
        setForeground(jButton7.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }  


        return this;
        }   
        });
        
        
        break;
     case "Shares":
           jPanelDetailedPanel.setVisible(true);

        JpanelSummuryPanel.setVisible(false);

jButton8.setVisible(false);
jButton26.setVisible(false);
 jButton21.setEnabled(false);
jButton23.setVisible(false); 
  jButton6.setVisible(false); 
        jTable1.setModel( otherLoans.createAllOutstandingSharesPaymentsSpecialxc(batchNumbercc.toString()));

        TableRowSorter<ListDataModel> sorterss = new TableRowSorter<>(result);

        jTable1.setRowSorter(sorterss); 
sortTable(jTable1,jTextField1);   
   HeaderRenderer headerss = new HeaderRenderer(jTable1.getTableHeader().getDefaultRenderer());
        int hss=0;

        jTable1.getColumnModel().getColumns().nextElement().setResizable(false);
        while(hss<jTable1.getColumnModel().getColumnCount()){
        jTable1.getColumnModel().getColumn(hss).setHeaderRenderer(headerss);

        if(hss==0){
        jTable1.getColumnModel().getColumn(hss).setMinWidth(0);
        jTable1.getColumnModel().getColumn(hss).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hss).setPreferredWidth(50);

        }
        if(hss==1){
        jTable1.getColumnModel().getColumn(hss).setMinWidth(0);
        jTable1.getColumnModel().getColumn(hss).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hss).setPreferredWidth(100);
        }
        if(hss==2){
        jTable1.getColumnModel().getColumn(hss).setMinWidth(0);
        jTable1.getColumnModel().getColumn(hss).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hss).setPreferredWidth(180);
        }if(hss==3){
        jTable1.getColumnModel().getColumn(hss).setMinWidth(4);
        jTable1.getColumnModel().getColumn(hss).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hss).setPreferredWidth(120);
     }if(hss==4){
        jTable1.getColumnModel().getColumn(hss).setMinWidth(4);
        jTable1.getColumnModel().getColumn(hss).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hss).setPreferredWidth(110);
        }if(hss==5){
        jTable1.getColumnModel().getColumn(hss).setMinWidth(4);
        jTable1.getColumnModel().getColumn(hss).setMaxWidth(1000);
        jTable1.getColumnModel().getColumn(hss).setPreferredWidth(110);
        }
        hss++;

        }
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

        this.setHorizontalAlignment(JLabel.LEFT);


        if(row==table.getRowCount()-1){
        this.setFont(new Font("Arial",Font.BOLD,20));
        }else{
        this.setFont(new Font("Arial",Font.PLAIN,18));
        }
// this.setText(value.toString());
        
if(col>=4&&col<=5){
         String text="";
           this.setHorizontalAlignment(RIGHT);
        if(!(value.toString().equals("-")||value.toString().equals(""))){
            
            if(parseDouble(value.toString().replaceAll(",", ""))<0){
            
             text = "("+fmt.formatForStatementNumbers(value.toString().replaceAll(",", ""))+")" ;
            }else{
        text = fmt.formatForStatementNumbers(value.toString().replaceAll(",", "") );
        }
        }
        this.setText(text);
        
        }else{
        this.setText(value.toString());
        }
        if (row%2==0) {
        setBackground(jButton8.getBackground());
        setForeground(jButton7.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        } else {
        setBackground(jButton6.getBackground());
        setForeground(jButton7.getBackground());
        if(isSelected){setBackground(Color.CYAN);}
        }  


        return this;
        }   
        });
        
        
         
         
         
         
         break;
           }
       }
       
           
        }
   
             
           
           
        if(me.getSource()==jTable1){
            switch(dbq.title(userId)){
            case "Cashier":
//              jButton8.setText("SUBMIT TXN");
                break;
            case "Accountant":
            JpanelSummuryPanel.setVisible(true);
            jPanelDetailedPanel.setVisible(false);
            jButton8.setVisible(true);
//            jButton26.setVisible(false);
//            jButton21.setEnabled(true);
            jButton21.setText("DELETE TXN"); 
            jButton23.setVisible(true); 
              jButton23.setEnabled(false);
              jButton22.setEnabled(false);
              jButton25  .setEnabled(false); 
            
            break;
            case "Supervisor":
             JpanelSummuryPanel.setVisible(true);
            jPanelDetailedPanel.setVisible(false);
            jButton8.setVisible(true);
//            jButton21.setEnabled(true);
            jButton21.setText("DELETE TXN"); 
            jButton23.setVisible(true); 
            break;
            case "Manager":

            break;
            case "Loans Office":

            break;
            case "System Admin":

                break;
        
        }
     
    
        }    
    
    if(me.getSource()==jTree2){
    DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree2.getLastSelectedPathComponent();
    String window =node.toString();
    switch (window){
        case "Loan Calculator":

        Object[] optionsSF = {"Continue",  "Cancel"};
        int nSF = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSF, optionsSF[0]);
        if(nSF==JOptionPane.YES_OPTION){

        LoanCalculator f = new LoanCalculator(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
        }
        else if (nSF==JOptionPane.NO_OPTION){ this.setVisible(true);}
        break;
            case "Loan Application":

   fios.intFileWriterReplace(fios.createFileName("loanApplication", "amortValues", "fromLoanManagementTable.txt"),"0");
        Object[] optionsSFx = {"Continue",  "Cancel"};
        int nSFx = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSFx, optionsSFx[0]);
        if(nSFx==JOptionPane.YES_OPTION){

        NewLoanApplication f = new NewLoanApplication(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
        }
        else if (nSFx==JOptionPane.NO_OPTION){ this.setVisible(true);}
        break;
        case "Loan management Module":
        
            
//            
//         SwingWorker<Void,Void> updateInterest = new SwingWorker(){     
//        @Override
//        protected Object doInBackground() throws Exception {
            
//       loan.updateInterestRepaymentsInterest(PostingEntryWindow.this); 
  
//      loan.updateAmdaPenalty2(PostingEntryWindow.this); 
//      if(loan.getThePenaltyStatus(PostingEntryWindow.this)==1){
//             loan.updateAmdaPenalty(PostingEntryWindow.this); 
//               }
//        
//        return null;
//        } };
//        updateInterest.execute();
        
        
        
    Object[] options = {"Continue",  "Cancel"};
    int n = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
    "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,options, options[0]);
    if(n==JOptionPane.YES_OPTION){
         LoanManagmentWindow f = new LoanManagmentWindow(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }
    else if (n==JOptionPane.NO_OPTION){ this.setVisible(true);}
    break;
    
    
        case "Email Module":
    Object[] optionsy = {"Continue",  "Cancel"};
    int ny = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
    "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsy, optionsy[0]);
    if(ny==JOptionPane.YES_OPTION){
         email f = new email(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }
    else if (ny==JOptionPane.NO_OPTION){ this.setVisible(true);}
    break;
        case "Loan authorisation Module":
    Object[] optionsx = {"Continue",  "Cancel"};
    int nx = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
    "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsx, optionsx[0]);
    if(nx==JOptionPane.YES_OPTION){
         LoanApprovals f = new LoanApprovals(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }
    else if (nx==JOptionPane.NO_OPTION){ this.setVisible(true);}
    break;
    case "Operations Module":
    Object[] optionsES = {"Continue",  "Cancel"};
    int nES = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
    "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsES, optionsES[0]);
    if(nES==JOptionPane.YES_OPTION){
    OperationsModule f = new OperationsModule (userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    }
    else if (nES==JOptionPane.NO_OPTION){ this.setVisible(true);}
    break;
    
    case "Reports Module":
//         SwingWorker<Void,Void> updateInterest1 = new SwingWorker(){     
//        @Override
//        protected Object doInBackground() throws Exception {
//             loan.updateAmdaPenalty2(PostingEntryWindow.this); 
//       loan.updateInterestRepaymentsInterest(PostingEntryWindow.this); 
 
//               if(loan.getThePenaltyStatus(PostingEntryWindow.this)==1){
//            loan.updateAmdaPenalty(PostingEntryWindow.this); 
//               }
//        return null;
//        } };
//        updateInterest1.execute();
        
           Object[] optionsSGS1 = {"Continue",  "Cancel"};
        int nSGS1 = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS1, optionsSGS1[0]);
        if(nSGS1==JOptionPane.YES_OPTION){
        Reportx frm5 = new Reportx(userId);
        frm5.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        frm5.setSize(screen.getSize());
        frm5.pack();
//        frm5.setUserID(userId);
        this.dispose();
        }
        else if (nSGS1==JOptionPane.NO_OPTION){ this.setVisible(true);}
   
    break;
         case "Amortization Calculator":
           Object[] optionsSGS1n = {"Continue",  "Cancel"};
        int nSGS1n = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS1n, optionsSGS1n[0]);
        if(nSGS1n==JOptionPane.YES_OPTION){
             Integer xh=0;
        fios.intFileWriterReplace(fios.createFileName("amortization", "allowUsage", "showNecessaryAmorts.txt"), xh.toString());
        amortDetails=new ArrayList();
        AmotizationCalculator frm5 = new AmotizationCalculator(userId,amortDetails);
        frm5.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        frm5.setSize(screen.getSize());
        frm5.pack();
//        frm5.setUserID(userId);
        this.dispose();
        }
        else if (nSGS1n==JOptionPane.NO_OPTION){ this.setVisible(true);}
   
    break;
    
       case "Ledger Reconcilliantion":
           Object[] optionsSGS1nhh = {"Continue",  "Cancel"};
        int nSGS1nhh = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS1nhh, optionsSGS1nhh[0]);
        if(nSGS1nhh==JOptionPane.YES_OPTION){
             Integer xh=0;
//        fios.intFileWriterReplace(fios.createFileName("amortization", "allowUsage", "showNecessaryAmorts.txt"), xh.toString());
        LedgerReconcilliation frm5 = new LedgerReconcilliation(userId);
        frm5.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        frm5.setSize(screen.getSize());
        frm5.pack();
//        frm5.setUserID(userId);
        this.dispose();
        }
        else if (nSGS1nhh==JOptionPane.NO_OPTION){ this.setVisible(true);}
   
    break;
    
     case "Sms Management":
           Object[] optionsSGS1nhhV = {"Continue",  "Cancel"};
        int nSGS1nhhV = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
        "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS1nhhV, optionsSGS1nhhV[0]);
        if(nSGS1nhhV==JOptionPane.YES_OPTION){
             Integer xh=0;
//        fios.intFileWriterReplace(fios.createFileName("amortization", "allowUsage", "showNecessaryAmorts.txt"), xh.toString());
        Sms frm5 = new Sms(userId);
        frm5.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        frm5.setSize(screen.getSize());
        frm5.pack();
//        frm5.setUserID(userId);
        this.dispose();
        }
        else if (nSGS1nhhV==JOptionPane.NO_OPTION){ this.setVisible(true);}
   
    break;
    
    case "Log Out":
       
    Object[] optionsSGS = {"Continue",  "Cancel"};
    int nSGS = JOptionPane.showOptionDialog(this,  "Work may not be saved!!!\n"+"Do you want to  continue ?",
    "SAVE PLEASE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,optionsSGS, optionsSGS[0]);
    if(nSGS==JOptionPane.YES_OPTION){
         switch(dbq.title(userId)){
            case "Loans Officer":
         LoanManagmentWindow ffx = new LoanManagmentWindow (userId);
        ffx.setVisible(true);
        Dimension screensx = Toolkit.getDefaultToolkit().getScreenSize();
        ffx.setSize(screensx.getSize());
        ffx.pack();
        this.dispose();
                break;
            case "Accountant":
          JFrame fh = new  Login();
        fh.setVisible(true);
        Dimension screenh = Toolkit.getDefaultToolkit().getScreenSize();
        fh.setSize(screenh.getSize());
        fh.pack();
        this.dispose();
                
                
                break;
            case "Supervisor":
        JFrame f = new  Login();
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
                break;
        
        
           case "Manager":
            LoanApprovals fx = new LoanApprovals (userId);
        fx.setVisible(true);
        Dimension screenx = Toolkit.getDefaultToolkit().getScreenSize();
        fx.setSize(screenx.getSize());
        fx.pack();
        this.dispose();
                break;
         case "Cashier":
       JFrame fg = new  Login();
        fg.setVisible(true);
        Dimension screeng = Toolkit.getDefaultToolkit().getScreenSize();
        fg.setSize(screeng.getSize());
        fg.pack();
        this.dispose();
                break;
               case "System Admin":
            CreateNewStaff fxs1 = new CreateNewStaff (userId);
        fxs1.setVisible(true);
        Dimension screenxs1 = Toolkit.getDefaultToolkit().getScreenSize();
        fxs1.setSize(screenxs1.getSize());
        fxs1.pack();
        this.dispose();
                break;
        }
    
    }
    else if (nSGS==JOptionPane.NO_OPTION){ this.setVisible(true);}
    
    Timer t =new Timer(12000,this);
  t.setRepeats(false);
  t.start();
    
    break;
    }}}
  jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
    @Override
    public Component getTableCellRendererComponent(JTable table,
            Object value, boolean isSelected, boolean hasFocus, int row, int col) {
           double cvalue = (Double)jTable2.getModel().getValueAt(row, 1);
     this.setHorizontalAlignment(JLabel.CENTER);
      if(col==1){
          Number c = (Number)cvalue;
       String text = NumberFormat.format(c );
           this.setText(text);
      
      }
      else{this.setText(value.toString());}
      
             
               if(position.equals("Red")){
               if(col!=0){
            setForeground(Color.RED);
               }
        }
        if(isSelected){setBackground(Color.CYAN);}   
        return this;
    }   
});  
    
    
    
    }       
            
            
 
    

    @Override
    public void mousePressed(MouseEvent me) {
          String itemIndicator,itemIndicator1="";  
            if(me.getSource() == jTable14){
            
              int selectedRow1 =jTable14.getSelectedRow();
                    int selectedColumn1 =jTable14.getSelectedColumn();
		   if (selectedRow1 > -1&&selectedColumn1>-1)
	   {
	 
         Object cvalue1 = jTable14.getModel().getValueAt( jTable14.convertRowIndexToModel(selectedRow1), 6);
         
   itemIndicator1 = cvalue1.toString();
    jButton86.setEnabled(true);
      jButton85  .setEnabled(true);    
           } 
            
            
            }else
           if(me.getSource() == jTable4){
           
             
           
           
        
        int selectedRow =jTable4.getSelectedRow();
                    int selectedColumn =jTable4.getSelectedColumn();
		   if (selectedRow > -1&&selectedColumn>-1)
	   {
	 
         Object cvalue = jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 6);
         
   itemIndicator = cvalue.toString();
   
    switch(itemIndicator){
        case "Created":
           jButton23.setEnabled(false);
            jButton6.setVisible(false);
            jComboBox1   .setVisible(false);
            jButton8.setEnabled(true);
            jButton21.setEnabled(true);
//             jButton22  .setEnabled(true);  
             jButton22.setEnabled(false);
               jButton25.setEnabled(false);
               
             fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString()+"batchPosint.txt"), "Created");
             
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString());
              
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintType.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 3).toString());
              switch(dbq.title(userId)){
            case "Cashier":
             
                break;
            case "Accountant":
            jButton8.setText("SUBMIT TXN");
                break;
            case "Supervisor":
                jButton8.setText("APPROVE TXN"); 
                break;
                case "Manager":
                  
                break;
                    case "Loans Office":
                  
                break;
                        case "System Admin":
            
                break;
        
        }
                   
              
            break;
        case "Submitted":
            
           fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString()+"batchPosint.txt"), "Submitted");  
           fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString());
         fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintType.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 3).toString());
           switch(dbq.title(userId)){
            case "Cashier":
              
                break;
            case "Accountant":
           jButton8.setEnabled(false);
              jButton21.setEnabled(false);
              jButton23.setEnabled(false);
              jButton22.setEnabled(false);
              jButton25  .setEnabled(false);      
                break;
            case "Supervisor":
                jButton8.setText("APPROVE TXN"); 
                jButton8.setEnabled(true);
                 jButton26.setEnabled(true);
                  jButton21.setEnabled(false);
                             fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString()+"batchPosint.txt"), "Submitted");
                break;
                case "Manager":
                  
                break;
                    case "Loans Office":
                  
                break;
                        case "System Admin":
            
                break;
        
        }
                       
           
           
           break;
         case "Approved":
             
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString()+"batchPosint.txt"), "Approved");   
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString());
              fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintType.txt"), jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 3).toString());
           switch(dbq.title(userId)){
            case "Cashier":
              
                break;
            case "Accountant":
           jButton8.setEnabled(false);
           jButton23.setEnabled(true);
           jButton21.setEnabled(true);
                break;
            case "Supervisor":
                jButton8.setText("APPROVE TXN"); 
                 jButton8.setEnabled(false);
                       fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", jTable4.getModel().getValueAt( jTable4.convertRowIndexToModel(selectedRow), 2).toString()+"batchPosint.txt"), "Approved");
                break;
                case "Manager":
                  
                break;
                    case "Loans Office":
                  
                break;
                        case "System Admin":
            
                break;
        
        }  
            
            break;
    
    }
    
    
           }  
        
        
 }

            if(me.getSource() == jTable10){
           
             
           
           
        
                    int selectedRow =jTable10.getSelectedRow();
                    int selectedColumn =jTable10.getSelectedColumn();
		   if (selectedRow > -1&&selectedColumn>-1)
	   {
	 
         String trxnType = jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 3).toString().trim();
         
          String trxnCode = jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 4).toString().trim();
         
          if(dbq.txnCodeExistsBulk(trxnCode)&&!(trxnType.equalsIgnoreCase("NewLoan")||trxnType.equalsIgnoreCase("LoanPyt")||trxnType.equalsIgnoreCase("Payable")||trxnType.equalsIgnoreCase("ClearPayable")||trxnType.equalsIgnoreCase("Receivable")||trxnType.equalsIgnoreCase("LoanPyt"))){
              
          List dataInToPostBulk=new ArrayList();
//        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 0).toString().trim());//trn id 
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 1).toString().trim());//trn date
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 2).toString().trim());//trn Type
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 3).toString().trim());//trn code
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 4).toString().trim());//
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 5).toString().trim());
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 6).toString().trim());
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 7).toString().trim());
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 8).toString().trim());
        dataInToPostBulk.add(fios.intFileReader(fios.createFileName("persistence", "interestPlan", "flatInterestPlan.txt")));
        dataInToPostBulk.add("4");
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 9).toString().trim());
        dataInToPostBulk.add(dbq.debitAccountBulk(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 4).toString().trim()));
        dataInToPostBulk.add(dbq.creditAccountBulk(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 4).toString().trim()));
        dataInToPostBulk.add(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 0).toString().trim());
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dataInToPostBulk.add("NA");
        dbq.addItemBulkUpload(dataInToPostBulk);
        dbq.updateTheId(jTable10.getModel().getValueAt(jTable10.convertRowIndexToModel(selectedRow), 0).toString().trim());
        dbq.loadAllBulkUploadsSecond(jTable9);

        dbq.loadAllBulkUploads(jTable10);
          
          }else{
              
          switch(trxnType){

case  "General":
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "General");
   bulkUpload();  
    break;
case  "Expense":
fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Expense");
bulkUpload();  
    break;
case  "NewLoan":
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "NewLoan");
bulkUpload();    
    break;
    
    case  "NewLoanBank":
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "NewLoanBank");
bulkUpload();    
    break;
case  "LoanPyt":
fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "LoanPyt");
bulkUpload(); 
    break;
case  "Withdrawal":
 fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Withdrawal");
bulkUpload();   
    break;
case  "Deposit":
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Deposit");
bulkUpload(); 
    break;
case  "Payable":
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Payable");
bulkUpload(); 
    break;
case  "ClearPayable":
     fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "ClearPayable");
bulkUpload();
    break;
case  "Receivable":
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Receivable");
bulkUpload();
    break;
    case  "Drawing":
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Drawing");
bulkUpload();
break;
case  "ClearReceivable":
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "ClearReceivable");
bulkUpload();
    break;
case  "Salary":
     fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Salary");
bulkUpload();
    break;

case  "DepositPartPay":
     fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "DepositPartPay");
bulkUpload();
    break;
case  "WithdrawDepositPartPay":
     fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "WithdrawDepositPartPay");
bulkUpload();
    break;
case  "Savings":
    fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Savings");
bulkUpload();
    break;
case  "WithdrawSavings":
     fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "WithdrawSavings");
bulkUpload();
    break;
case  "Capitalisation":
        fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Capitalisation");
bulkUpload();
    
    break;
case  "Decaptalisation":
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "Decaptalisation");
bulkUpload();
    break;
case  "RecoverInterest":
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "RecoverInterest");
bulkUpload();
    
    break;
case  "WriteOffInterest":
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "WriteOffInterest");
bulkUpload();
    break;
case  "RecoverPenalty":
     fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "RecoverPenalty");
bulkUpload();
    break;
case  "WriteOffPenalty":
    
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "WriteOffPenalty");
bulkUpload();
    break;
case  "RecoverAccumulatedInterest":
    
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "RecoverAccumulatedInterest");
bulkUpload();
    break;
case  "WriteOffAccumulatedInterest":
    
      fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "WriteOffAccumulatedInterest");
bulkUpload();
    break;
case  "BadLoansRecovered":
       fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "BadLoansRecovered");
bulkUpload();
    break;
case  "HEFROI":
         fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"bulkPosintType.txt"), "HEFROI");
bulkUpload();
    break;


          }
          
          
          
          }

   

    
    
           }  
        
        
 }
           
 if(me.getSource() == jTable1){
           
        int selectedRow1 =jTable1.getSelectedRow();
                    int selectedColumn1 =jTable1.getSelectedColumn();
		   if (selectedRow1 > -1&&selectedColumn1>-1)
	   {    
           switch(dbq.title(userId)){
               
            case "Cashier":
              
                break;
            case "Accountant":
                switch(fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", fios.stringFileReader(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintNo.txt"))+"batchPosint.txt"))){
                    case "Created":
           jButton8.setEnabled(false);
           jButton23.setEnabled(false);
           jButton22.setEnabled(true);
            jButton25.setEnabled(true);
          jButton21.setEnabled(true);
           jButton21.setText("DELETE ITEM"); 
            fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintItmNo.txt"), jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(selectedRow1), 0).toString());
           break;
                    case "Submitted":
                  jButton8.setEnabled(false);
           jButton23.setEnabled(false);
           jButton22.setEnabled(false);
           jButton25.setEnabled(false);
          jButton21.setEnabled(false);
           jButton21.setText("DELETE ITEM");       
             fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintItmNo.txt"), jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(selectedRow1), 0).toString());           
                        break;
                       case "Approved":
                         jButton8.setEnabled(false);
           jButton23.setEnabled(false);
           jButton22.setEnabled(true);
           jButton25.setEnabled(true);
          jButton21.setEnabled(true);
           jButton21.setText("DELETE ITEM");    
             fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintItmNo.txt"), jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(selectedRow1), 0).toString());              
                           
                           break;
                }
                break;
            case "Supervisor":
//                jButton8.setText("APPROVE TXN"); 
//                 jButton8.setEnabled(false);
                fios.stringFileWriter(fios.createFileName("logOut", "completeShutDown", userId+"batchPosintItmNo.txt"), jTable1.getModel().getValueAt( jTable1.convertRowIndexToModel(selectedRow1), 0).toString());
                break;
                case "Manager":
                  
                break;
                    case "Loans Office":
                  
                break;
                        case "System Admin":
            
                break;
        
        }  
            
           }
    
    
    
    
           }  
        
        
     if(me.getSource() == jTable7){
           
        int selectedRow1 =jTable7.getSelectedRow();
                    int selectedColumn1 =jTable7.getSelectedColumn();
		   if (selectedRow1 > -1&&selectedColumn1>-1)
	   {    
     
    String nema=jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow1), 1).toString();    
    
    
    if(jCheckBox65.isSelected()){
        
//        JOptionPane.showMessageDialog(this, parseInt(fmt.getMasterAccountCodeS(jTable7.getModel().getValueAt( jTable5.convertRowIndexToModel(selectedRow1), 2).toString())));
    
if(parseInt(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow1), 2).toString().substring(2, 9))>5020000&& parseInt(jTable7.getModel().getValueAt( jTable7.convertRowIndexToModel(selectedRow1), 2).toString().substring(2, 9))<5029999){               
   
        lastName2.setText(nema.split("\\s")[0]);
 
firstName3.setText(nema.replace(nema.split("\\s")[0], " ").trim()); 
    
jCheckBox65.setText("CREATE SUB-LEDGER");
    }else{
       lastName2.setText("");
 
firstName3.setText(""); 
    
    }
    }else if(!jCheckBox65.isSelected()){
        
     lastName2.setText("");
 
firstName3.setText(""); 
    
offjCheckBox65();
    
    }
     
            
           }
    
    
    
    
           }        
           
     if(me.getSource() == jTable9){
           
        int selectedRow1 =jTable9.getSelectedRow();
                    int selectedColumn1 =jTable9.getSelectedColumn();
		   if (selectedRow1 > -1&&selectedColumn1>-1)
	   {    
     
    
     jButton80.setEnabled(true);
       jButton83.setEnabled(true);
            
           }
    
    
    
    
           }       
}   

    @Override
    public void mouseReleased(MouseEvent me) {
        
}

    @Override
    public void mouseEntered(MouseEvent me) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
       clock.setValue(System.currentTimeMillis( ));
    }

    @Override
    public void keyTyped(KeyEvent e) {
     if(e.getSource().toString().equals(amountFieldDebit1.toString())){
        
         amountCredit.setValue(amountFieldDebit1.getValue());
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
           jPanel2.setVisible(false);
        switch(jComboTransactionType.getSelectedItem().toString()){

    case "Gen":
    dbq.fillMeWithAllAccounts(jTable3);
      
        break;
         case "Save":
   
      
        break;
        case "Save2":
   
      
        break;
        case "WdrawS":
    
      
        break;
         case "WdrawS2":
    
      
        break;
case "LoanR":

    
    break;
    case "LoanRD":

    
    break;
case "LoanD":

    break;
case "LoanW":

    break;
case "LoanRe":
  
    
    break;
case "LoanT":

    break;
case "LoanC":

    break;
case "CapR":

    break;
    case "CapRD":

    break;
case "CapRC":

    break;
case "Cap":
 
    break;
case "BC":
  
    break;
case "CB":
 
    break;
case "CR":
   
    
    break;
case "I":
 
    
    break;
    
case "DCap":
   
    
    break;
    
        
case "DCapD":
   
    
    break;
}
        
 }
    

   
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
        
        if(e.getSource().toString().equals(reference1.toString())){ 
            creditRefNumber.setText(reference1.getText());
        }
        
      
        String S1, S2, S3, S4;
      
       int code = e.getKeyCode();  
     
       if (code== KeyEvent.VK_F1) {
          if(e.getSource().toString().equals(debitPanel.getRootPane().toString())){ 
          LoanManagmentWindow f = new LoanManagmentWindow(userId);
        f.setVisible(true);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        f.setSize(screen.getSize());
        f.pack();
        this.dispose();
    
          }
        
       }
       
       
   if (code == KeyEvent.VK_ENTER) {
   
     if(e.getSource().toString().equals(debitAccountField.toString())){      
           
           if((debitAccountField.getValue()==null)){JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER A VALID DEBIT ACCOUNT NUMBER"); return;} else
           {
                if(e.getSource().toString().equals(debitAccountField.toString())){
       S4=fmt.formatAccountWithSeperators(this.getDrAccountNumber());
       
//      updateDebitFields( S4) ;
       
                }

      
           }}else if(e.getSource().toString().equals(creditAccountField.toString())){
  
     if((creditAccountField.getValue()==null)){JOptionPane.showMessageDialog(rootPane, "PLEASE ENTER A VALID CREDIT ACCOUNT NUMBER"); return;} else{
         
       S4=fmt.formatAccountWithSeperators(this.getCrAccountNumber());

       
//          updateCreditFields(S4);
         
      }
    
         }
  jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
    @Override
    public Component getTableCellRendererComponent(JTable table,
            Object value, boolean isSelected, boolean hasFocus, int row, int col) {
           double cvalue = (Double)jTable2.getModel().getValueAt(row, 1);
     this.setHorizontalAlignment(JLabel.CENTER);
      if(col==1){
          Number c = (Number)cvalue;
       String text = NumberFormat.format(c );
           this.setText(text);
      
      }
      else{this.setText(value.toString());}
      
             
               if(position.equals("Red")){
               if(col!=0){
            setForeground(Color.RED);
               }
        }
        if(isSelected){setBackground(Color.CYAN);}   
        return this;
    }   
});
 
   
   }
    
    }

    @Override
    public void run() {
     

       
    }

    @Override
    public void windowOpened(WindowEvent e) {
        
    }

    @Override
    public void windowClosing(WindowEvent e) {
   JOptionPane.showMessageDialog(rootPane, "Closing the sysytem manually is illegal"+"\n"+"Always logout properly from the system instead");
                             PostingEntryWindow f = new PostingEntryWindow(userId,amortDetails);
                            f.setVisible(true);
                            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                            f.setSize(screen.getSize());
                            f.pack();
                            this.dispose();
    }

    @Override
    public void windowClosed(WindowEvent e) {
     
    }

    @Override
    public void windowIconified(WindowEvent e) {
        
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
       
    }

    @Override
    public void windowActivated(WindowEvent e) {
      
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        
    }

    @Override
    public String getTransactionSequenceNumber() {
        return jTFTrnSqNo.getText();
    }

    @Override
    public String getUseId() {
      return jTFuserId1.getText();
    }

    @Override
    public String getLogInTime() {
     return jTFLoginTime1.getText();
    }

    @Override
    public String getTransactionDate() {
        return valueDate.getText();
    }

    @Override
    public String getTransactionType() {
      return   jComboTransactionType.getSelectedItem().toString();
    }

   

    @Override
    public String getValueDate() {
       return   valueDate1.getText();
    }

    @Override
    public String getChequeNumber() {
   return  chequeNumber.getText();
    }

    @Override
    public String getDrReferenceNumber() {
   return reference1.getText();
    }

    @Override
    public String getDrAccountNumber() {
   return debitAccountField.getValue().toString();
    }

    @Override
    public String getDrAccountName() {
   return  debitAccountName.getText();
    }

    @Override
    public String getNumberOfShares() {
     return   jFormattedTextField3S.getValue().toString();
    }

    @Override
    public String getValueOfShares() {
    return jFormattedTextField3S3.getValue().toString();
    }

    @Override
    public String getDrAmount() {
    return amountFieldDebit1.getValue().toString();
    }

    @Override
    public String getDrNarrative1() {
     return jTextField3.getText();
    }

    @Override
    public String getDrNarrative2() {
     return jTextField4.getText();
    }

    @Override
    public String getCrAccountNumber() {
    return   creditAccountField.getValue().toString();
    }

    @Override
    public String getCrAccountName() {
     return creditAccountName.getText();
    }

    @Override
    public String getCrAmount() {
    return amountCredit.getValue().toString();
    }

    @Override
    public String getCrNarrative1() {
     return  creditNarration1.getText();
    }

    @Override
    public String getCrNarrative2() {
    return  creditNarration2.getText();
    }

    @Override
    public String getCrReferenceNumber() {
     return creditRefNumber.getText();
    }

    @Override
    public void setTransactionSequenceNumber(String a1) {
     jTFTrnSqNo.setText(a1);    }

    @Override
    public void setUserId(String a2) {
     jTFuserId1.setText(a2);    }

    @Override
    public void setLogInTime(String a3) {
     jTFLoginTime1.setText(a3);    }

    @Override
    public void setTransactionDate(String a4) {
    valueDate.setText(a4);    }

    @Override
    public void setTransactionType(String a5) {
    jComboTransactionType.setSelectedItem(a5);    }

   

    @Override
    public void setValueDate(String a7) {
     valueDate1.setText(a7);    }

    @Override
    public void setChequeNumber(String a8) {
      chequeNumber.setText(a8);    }

    @Override
    public void setDrReferenceNumber(String a9) {
     reference1  .setText(a9);
             }

    @Override
    public void setDrAccountNumber(String a10) {
     debitAccountField.setValue(a10);    }

    @Override
    public void setDrAccountName(String a11) {
        debitAccountName.setText(a11);
    }

    @Override
    public void setNumberOfShares(int a12) {
       jFormattedTextField3S.setValue(a12);
    }

    @Override
    public void setValueOfShares(double a13) {
     jFormattedTextField3S3.setValue(a13);
    }

    @Override
    public void setDrAmount(double a14) {
      amountFieldDebit1.setValue(a14);
    }

    @Override
    public void setDrNarrative1(String a15) {
     jTextField3.setText(a15);
    }

    @Override
    public void setDrNarrative2(String a16) {
     jTextField4.setText(a16);
    }

    @Override
    public void setCrAccountNumber(String a17) {
    creditAccountField.setValue(a17);    }

    @Override
    public void setCrAccountName(String a18) {
    creditAccountName .setText(a18);   }


  @Override
    public void setCrAmount(double a19) {
    amountCredit.setValue(a19);
    }

  @Override
    public void setCrNarrative1(String a20) {
    creditNarration1.setText(a20);
    }

   
  @Override
    public void setCrNarrative2(String a21) {
  creditNarration2.setText(a21);    }

  
  @Override
    public void setCrReferenceNumber(String a22) {
        
   creditRefNumber .setText(a22);   }

   

  @Override
    public void setBatchNumber() {
        
      batchNumber=this.batchCode();
      
    }


  @Override
    public String getBatchNumber() {
        return    batchNumber;
     
    }
   }
